
misproyectos/vehiculociaa/out/vehiculociaa.elf:     file format elf32-littlearm
misproyectos/vehiculociaa/out/vehiculociaa.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00071d

Program Header:
0x70000001 off    0x000151e8 vaddr 0x1a0051e8 paddr 0x1a0051e8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000007d4 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000051f0 memsz 0x000051f0 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0051f0 align 2**16
         filesz 0x000002b0 memsz 0x000002b0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051e4  1a000000  1a000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b0  10000000  1a0051f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000202b0  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000202b0  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000202b0  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000202b0  2**2
                  CONTENTS
  6 .bss          00000524  100002b0  100002b0  000002b0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000202b0  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000202b0  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000202b0  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000202b0  2**2
                  CONTENTS
 11 .init_array   00000004  1a0051e4  1a0051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0051e8  1a0051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000202b0  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000202b0  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000202b0  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000202b0  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000202b0  2**2
                  CONTENTS
 18 .noinit       00000000  100007d4  100007d4  000202b0  2**2
                  CONTENTS
 19 .debug_info   0002f2fd  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006629  00000000  00000000  0004f5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000abba  00000000  00000000  00055bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000cd8  00000000  00000000  00060790  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000da8  00000000  00000000  00061468  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00010006  00000000  00000000  00062210  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00017dde  00000000  00000000  00072216  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000292ac  00000000  00000000  00089ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000b32a0  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000b3308  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002b30  00000000  00000000  000b333c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100002b0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0051e4 l    d  .init_array	00000000 .init_array
1a0051e8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100007d4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001a98 l     F .text	000000a4 uartProcessIRQ
100002d4 l     O .bss	00000004 rxIsrCallbackUART0
100002d8 l     O .bss	00000004 rxIsrCallbackUART2
100002dc l     O .bss	00000004 rxIsrCallbackUART3
100002e0 l     O .bss	00000004 txIsrCallbackUART0
100002e4 l     O .bss	00000004 txIsrCallbackUART2
100002e8 l     O .bss	00000004 txIsrCallbackUART3
1a004e60 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 ctrl_marchas.c
00000000 l    df *ABS*	00000000 moduloint.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mensajes.c
00000000 l    df *ABS*	00000000 esp32_cam.c
00000000 l    df *ABS*	00000000 system.c
100002b4 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004bf4 l     O .text	00000004 InitClkStates
1a004bf8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000878 l     F .text	00000044 Board_LED_Init
1a0008bc l     F .text	00000040 Board_TEC_Init
1a0008fc l     F .text	00000040 Board_GPIO_Init
1a00093c l     F .text	00000030 Board_ADC_Init
1a00096c l     F .text	00000038 Board_SPI_Init
1a0009a4 l     F .text	00000024 Board_I2C_Init
1a004c70 l     O .text	00000008 GpioButtons
1a004c78 l     O .text	0000000c GpioLeds
1a004c84 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000a24 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000a38 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sct_pwm_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sct_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000bf8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000c0c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004c9c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000e2c l     F .text	000000a0 pll_calc_divs
1a000ecc l     F .text	0000010c pll_get_frac
1a000fd8 l     F .text	0000004c Chip_Clock_FindBaseClock
1a00124c l     F .text	00000022 Chip_Clock_GetDivRate
100002b8 l     O .bss	00000008 audio_usb_pll_freq
1a004cf0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0013b8 l     F .text	0000002c Chip_UART_GetIndex
1a004d5c l     O .text	00000008 UART_BClock
1a004d64 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0015a8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0017f2 l     F .text	00000002 errorOcurred
1a0017f4 l     F .text	00000002 doNothing
10000040 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_tick.c
100002c0 l     O .bss	00000004 callBackFuncParams
100002c8 l     O .bss	00000008 tickCounter
100002d0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_pwm.c
1a0019cc l     F .text	0000000c pwmInitTimers
1a001a24 l     F .text	00000034 pwmAttach
1a001a58 l     F .text	0000001c pwmDetach
10000088 l     O .data	0000000b AttachedPWMList
1a004e54 l     O .text	0000000b pwmMap
00000000 l    df *ABS*	00000000 sapi_sct.c
1a004ea8 l     O .text	0000001c SCTdataList
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100002ec l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_convert.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001fdc l     F .text	00000010 clearInterrupt
1a001fec l     F .text	0000005c serveInterrupt
10000094 l     O .data	00000048 ultrasonicSensors
1a004f0c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strtod.c
1a002ed0 l     F .text	00000038 sulp
1a00507c l     O .text	00000014 fpi.7530
1a005090 l     O .text	00000014 fpinan.7566
1a0050a8 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
1a003b5e l     F .text	00000074 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
1a004044 l     F .text	00000024 L_shift
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
1a0051d8 l     O .text	0000000c p05.7454
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 lnumeric.c
10000140 l     O .data	00000002 numempty
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 impure.c
100000e0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a0051e8 l       .init_array	00000000 __init_array_end
1a0051e4 l       .bss_RAM5	00000000 __preinit_array_end
1a0051e4 l       .init_array	00000000 __init_array_start
1a0051e4 l       .bss_RAM5	00000000 __preinit_array_start
1a001070 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0049aa g     F .text	00000042 __any_on
1a0028d8 g     F .text	00000012 .hidden __aeabi_dcmple
1a002eb0 g     F .text	00000010 strcpy
1a001878 g     F .text	00000044 TIMER2_IRQHandler
1a001cb8 g     F .text	00000014 uartRxRead
1a002814 g     F .text	0000007a .hidden __cmpdf2
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a002814 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001ef4 g     F .text	00000088 int64ToString
1a002384 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001d5c g     F .text	0000001e uartReadByte
1a000a1c g     F .text	00000008 __stdio_init
100007c8 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000cb2 g     F .text	0000000c Chip_ADC_SetResolution
1a0041f0 g     F .text	0000000c __malloc_unlock
1a0019a0 g     F .text	0000002c SysTick_Handler
1a003bd2 g     F .text	0000002a __hexdig_fun
1a001438 g     F .text	00000040 Chip_UART_SetBaud
100007c9 g     O .bss	00000001 __lock___arc4random_mutex
1a000718  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0041fc g     F .text	00000068 _Balloc
1a0051f0 g       .ARM.exidx	00000000 __exidx_end
1a003b0c g     F .text	00000052 __strtok_r
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a000be6 g     F .text	00000010 Chip_SCT_Init
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a002804 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a004a58 g     F .text	0000002e .hidden __aeabi_d2lz
53ff7172 g       *ABS*	00000000 __valid_user_code_checksum
1a0051f0 g       .ARM.exidx	00000000 _etext
1a0028a0 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0018bc g     F .text	00000044 TIMER3_IRQHandler
1a0012ee g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002dd0 g     F .text	0000001c memcpy
1a004090 g     F .text	00000120 __hexnan
1a002890 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00230c g     F .text	00000022 .hidden __floatsidf
1a00280c g     F .text	00000082 .hidden __ltdf2
1a002a04 g     F .text	00000000 .hidden __aeabi_uldivmod
100007d4 g       .noinit	00000000 _noinit
1a000694 g     F .text	00000054 reciveMessage
1a001d94 g     F .text	00000016 uartWriteString
100006f8 g     O .bss	00000004 SystemCoreClock
1a004910 g     F .text	00000066 __ratio
1a0013e4 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0041b0 g     F .text	00000010 malloc
1a005110 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a00136c g     F .text	0000004c Chip_Clock_GetRate
1a002d44 g     F .text	00000040 .hidden __fixunsdfsi
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000800 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0022ec g     F .text	0000001e .hidden __aeabi_ui2d
1a004424 g     F .text	00000012 __i2b
1a002a70 g     F .text	000002d0 .hidden __udivmoddi4
1a002068 g     F .text	00000000 .hidden __aeabi_drsub
1a0007a8 g     F .text	00000020 _sbrk_r
1a004c6c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001e18 g     F .text	0000004c Sct_EnablePwmFor
1a0028c4 g     F .text	00000012 .hidden __aeabi_dcmplt
1a002052 g     F .text	0000000a GPIO1_IRQHandler
1a002330 g     F .text	00000042 .hidden __extendsfdf2
1a002634 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002074 g     F .text	00000276 .hidden __adddf3
1a001c88 g     F .text	00000018 uartRxReady
1a0047d4 g     F .text	000000a0 __b2d
1a0051e8 g       .ARM.exidx	00000000 __exidx_start
100007ca g     O .bss	00000001 __lock___env_recursive_mutex
1a0023e0 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
100007cb g     O .bss	00000001 __lock___sinit_recursive_mutex
1a002d84 g     F .text	00000048 __libc_init_array
1a0050e8 g     O .text	00000028 __mprec_bigtens
1a004308 g     F .text	0000007c __s2b
1a0022ec g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
10000000 g     O .data	00000004 espResponseBufferSize
1a00469a g     F .text	00000034 __mcmp
1a001dbe g     F .text	00000024 Sct_Init
1a0009ec g     F .text	00000030 Board_Init
1a0007a6  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a001f7c g     F .text	00000028 intToStringGlobal
1a002a34 g     F .text	0000003c .hidden __aeabi_d2ulz
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1a002f08 g     F .text	00000b98 _strtod_l
1a004068 g     F .text	00000028 __match
100007d4 g       .bss	00000000 _ebss
1a0017f8 g     F .text	00000040 TIMER0_IRQHandler
1a00071c g     F .text	00000088 Reset_Handler
1a001924 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a004384 g     F .text	00000040 __hi0bits
1a000b1c g     F .text	0000004a Chip_SCTPWM_SetRate
1a000bac g     F .text	00000038 Chip_I2C_SetClockRate
1a002914 g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001024 g     F .text	0000004c Chip_Clock_EnableCrystal
100007cc g     O .bss	00000001 __lock___malloc_recursive_mutex
1a003aa0 g     F .text	00000018 strtod
1a000300 g     F .text	0000003c ctrl_Init
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002074 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a00280c g     F .text	00000082 .hidden __ledf2
1a004558 g     F .text	0000009c __pow5mult
1a002374 g     F .text	0000006a .hidden __aeabi_ul2d
1a001838 g     F .text	00000040 TIMER1_IRQHandler
1a005010 g     O .text	00000020 __sf_fake_stderr
1a000b88 g     F .text	00000024 Chip_I2C_Init
1a002dce g     F .text	00000002 __retarget_lock_release_recursive
1a001daa g     F .text	0000000a UART2_IRQHandler
1a0011e0 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004d6c g     O .text	000000e6 gpioPinsInit
1a001b3c g     F .text	00000090 uartInterrupt
1a001d7a g     F .text	0000001a uartWriteByte
1a000a50 g     F .text	00000012 Chip_SSP_SetClockRate
1a002900 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a00205c g     F .text	0000000a GPIO2_IRQHandler
1a0012c8 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0028ec g     F .text	00000012 .hidden __aeabi_dcmpge
100002b0 g       .bss	00000000 _bss
1a000c80 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002070 g     F .text	0000027a .hidden __aeabi_dsub
1a0006e8 g     F .text	00000030 esp32_init
1a002374 g     F .text	0000006a .hidden __floatundidf
1a0045f4 g     F .text	000000a6 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000a62 g     F .text	0000003e Chip_SSP_SetBitRate
1a000be4 g     F .text	00000002 Chip_GPIO_Init
1a004a18 g     F .text	00000024 strncmp
1a004c98 g     O .text	00000004 OscRateIn
1a001ce0 g     F .text	0000007c uartInit
1a004436 g     F .text	00000120 __multiply
100007d4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a004874 g     F .text	0000009c __d2b
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000678 g     F .text	0000001c esp32CleanRxBuffer
1a000178 g       .text	00000000 __bss_section_table_end
1a00230c g     F .text	00000022 .hidden __aeabi_i2d
1a0015dc g     F .text	000001ac gpioInit
1a003ab8 g     F .text	00000054 strtok
1a001a74 g     F .text	00000024 pwmInit
1a00048c g     F .text	0000000c getFlagUart232
1a002d40  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002634 g     F .text	000001d0 .hidden __divdf3
1a004976 g     F .text	00000034 __copybits
1a00033c g     F .text	00000042 ctrl_motor
1a0023e0 g     F .text	00000254 .hidden __muldf3
1a001e64 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0041e4 g     F .text	0000000c __malloc_lock
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0049ec g     F .text	0000001c _calloc_r
1a005030 g     O .text	00000020 __sf_fake_stdin
1a00108c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002dcc g     F .text	00000002 __retarget_lock_acquire_recursive
1a002dec g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0004e0 g     F .text	000000a8 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a001e00 g     F .text	00000018 Sct_SetDutyCycle
1a002dfc g     F .text	000000b4 _malloc_r
10000700 g     O .bss	000000c8 globalStrConvertBuff
1a004a3c g     F .text	0000001a __ascii_wctomb
1a002384 g     F .text	0000005a .hidden __aeabi_l2d
1a001ca0 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0012fc g     F .text	0000003c Chip_Clock_EnableOpts
1a001c58 g     F .text	00000030 uartClearPendingInterrupt
1a0010a8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000588 g     F .text	000000f0 procesarMenssage
1a000498 g     F .text	0000000c setFlagUart232
1a001160 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001554 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001fa4 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002a34 g     F .text	0000003c .hidden __fixunsdfdi
1a002814 g     F .text	0000007a .hidden __nedf2
1a001788 g     F .text	0000006a gpioWrite
1a0007a4  w    F .text	00000002 _fini
1a000c40 g     F .text	00000040 Chip_ADC_Init
1a004a58 g     F .text	0000002e .hidden __fixdfdi
100006fc g     O .bss	00000004 g_pUsbApi
1a0007c8 g     F .text	00000038 Board_SetupMuxing
1a001478 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001900 g     F .text	0000000c tickRead
10000080 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
100000dc g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001de4 g     F .text	0000001c Sct_Uint8ToTicks
1a001ccc g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a0041c0 g     F .text	00000024 __ascii_mbtowc
10000000 g       .data	00000000 _data
1a004788 g     F .text	0000004c __ulp
1a000464 g     F .text	00000028 dataInBuffer
1a0050d0 g     O .text	0000000c _C_numeric_locale
100007d4 g       .bss	00000000 _pvHeapStart
100002b0 g     O .bss	00000001 dataToSendToUart232Pending
1a000178 g       .text	00000000 __section_table_end
1a000aa0 g     F .text	00000038 Chip_SSP_Init
1a0004a4 g     F .text	0000003c mod_int_init
1a002d44 g     F .text	00000040 .hidden __aeabi_d2uiz
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a004a08 g     F .text	00000010 nan
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0009c8 g     F .text	00000024 Board_Debug_Init
1a0028b0 g     F .text	00000012 .hidden __aeabi_dcmpeq
100002b0 g       .data	00000000 _edata
1a000b68 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
100007cd g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000ad8 g     F .text	00000044 Chip_SCTPWM_SetOutPin
1a000cc0 g     F .text	00000158 Chip_SetupCoreClock
1a000410 g     F .text	00000054 ctrl_ruedas
1a002048 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000e18 g     F .text	00000014 SystemCoreClockUpdate
1a0046ce g     F .text	000000ba __mdiff
1a002914 g     F .text	0000004e .hidden __aeabi_d2iz
1a0019d8 g     F .text	00000028 pwmIsAttached
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005050 g     O .text	00000020 __sf_fake_stdout
1a004f0f g     O .text	00000101 _ctype_
1a002d40  w    F .text	00000002 .hidden __aeabi_idiv0
1a001bcc g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
100007ce g     O .bss	00000001 __lock___dd_hash_mutex
100007cf g     O .bss	00000001 __lock___tz_mutex
1a002ec0 g     F .text	00000010 strlen
1a000380 g     F .text	00000090 obtener_vel
1a001a00 g     F .text	00000024 pwmWrite
1a001338 g     F .text	00000034 Chip_Clock_Enable
1a0028a0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a002804 g     F .text	0000008a .hidden __gedf2
1a001db4 g     F .text	0000000a UART3_IRQHandler
1a003bfc g     F .text	00000446 __gethex
100002f4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002330 g     F .text	00000042 .hidden __aeabi_f2d
1a001e80 g     F .text	00000074 boardInit
100002f0 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002070 g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0043c4 g     F .text	00000060 __lo0bits
1a002964 g     F .text	00000000 .hidden __aeabi_ldivmod
1a00190c g     F .text	00000018 tickPowerSet
10000144 g     O .data	0000016c __global_locale
100002f8 g     O .bss	00000400 espResponseBuffer
1a001270 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00158c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100007d0 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a00086c g     F .text	0000000c Board_SystemInit
1a004292 g     F .text	00000076 __multadd
1a004264 g     F .text	0000002e _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 1d 07 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 72 71 ff 53     }...........rq.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	a1 19 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	65 1e 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     e...............
1a000070:	f9 17 00 1a 39 18 00 1a 79 18 00 1a bd 18 00 1a     ....9...y.......
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a ab 1d 00 1a b5 1d 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	49 20 00 1a 53 20 00 1a 5d 20 00 1a bb 01 00 1a     I ..S ..] ......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0051f0 	.word	0x1a0051f0
1a000118:	10000000 	.word	0x10000000
1a00011c:	000002b0 	.word	0x000002b0
1a000120:	1a0051f0 	.word	0x1a0051f0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0051f0 	.word	0x1a0051f0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0051f0 	.word	0x1a0051f0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0051f0 	.word	0x1a0051f0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100002b0 	.word	0x100002b0
1a000154:	00000524 	.word	0x00000524
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f001 fc6a 	bl	1a001a98 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ctrl_Init>:
   GPIO4(+) GPIO3(-) ENB: PWM4    T_FIL3   Motor Derecho
*/

/* ------------- INICIALIZACIONES ------------- */
void ctrl_Init( )
{
1a000300:	b508      	push	{r3, lr}
   /* Inicializar los GPIO como salida */
   gpioConfig( GPIO1, GPIO_OUTPUT );
1a000302:	2101      	movs	r1, #1
1a000304:	200f      	movs	r0, #15
1a000306:	f001 f969 	bl	1a0015dc <gpioInit>
   gpioConfig( GPIO2, GPIO_OUTPUT );
1a00030a:	2101      	movs	r1, #1
1a00030c:	201f      	movs	r0, #31
1a00030e:	f001 f965 	bl	1a0015dc <gpioInit>
   gpioConfig( GPIO3, GPIO_OUTPUT );
1a000312:	2101      	movs	r1, #1
1a000314:	200e      	movs	r0, #14
1a000316:	f001 f961 	bl	1a0015dc <gpioInit>
   gpioConfig( GPIO4, GPIO_OUTPUT );
1a00031a:	2101      	movs	r1, #1
1a00031c:	201e      	movs	r0, #30
1a00031e:	f001 f95d 	bl	1a0015dc <gpioInit>
   
   /* Inicializar los PWM */
   // Configurar el (o los) Timer(s) para generar las senales PWM
   pwmInit( 0, PWM_ENABLE );    
1a000322:	2100      	movs	r1, #0
1a000324:	4608      	mov	r0, r1
1a000326:	f001 fba5 	bl	1a001a74 <pwmInit>
   pwmInit( PWM0 , PWM_ENABLE_OUTPUT ); //Enable motor A, pin TFIL1 Actua sobre el motor en los pines 1, 2 Output del puente H
1a00032a:	2102      	movs	r1, #2
1a00032c:	2000      	movs	r0, #0
1a00032e:	f001 fba1 	bl	1a001a74 <pwmInit>
   pwmInit( PWM4 , PWM_ENABLE_OUTPUT );  //Enable motor B, pin T_FIL3 Actua sobre el motor en los pines 3, 4 Output del puente H   
1a000332:	2102      	movs	r1, #2
1a000334:	2004      	movs	r0, #4
1a000336:	f001 fb9d 	bl	1a001a74 <pwmInit>
}
1a00033a:	bd08      	pop	{r3, pc}

1a00033c <ctrl_motor>:

void ctrl_motor (int sentido, int  velocidad, pwmMap_t  PWM, gpioMap_t  positivo, gpioMap_t  negativo)  //Este modulo energiza el motor referenciado por el PWM.
{
1a00033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00033e:	460d      	mov	r5, r1
1a000340:	4614      	mov	r4, r2
1a000342:	461f      	mov	r7, r3
1a000344:	f99d 6018 	ldrsb.w	r6, [sp, #24]
   if (sentido > 0){   
1a000348:	2800      	cmp	r0, #0
1a00034a:	dc06      	bgt.n	1a00035a <ctrl_motor+0x1e>
      gpioWrite(negativo, OFF);       
      gpioWrite(positivo, ON);
   }else if (sentido < 0) {
1a00034c:	2800      	cmp	r0, #0
1a00034e:	db0d      	blt.n	1a00036c <ctrl_motor+0x30>
      gpioWrite(negativo, ON);
   }else if (sentido = 0) {
      gpioWrite(positivo, OFF);
      gpioWrite(negativo, OFF);
   }
   pwmWrite( PWM, velocidad );
1a000350:	b2e9      	uxtb	r1, r5
1a000352:	4620      	mov	r0, r4
1a000354:	f001 fb54 	bl	1a001a00 <pwmWrite>
}
1a000358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      gpioWrite(negativo, OFF);       
1a00035a:	2100      	movs	r1, #0
1a00035c:	4630      	mov	r0, r6
1a00035e:	f001 fa13 	bl	1a001788 <gpioWrite>
      gpioWrite(positivo, ON);
1a000362:	2101      	movs	r1, #1
1a000364:	4638      	mov	r0, r7
1a000366:	f001 fa0f 	bl	1a001788 <gpioWrite>
1a00036a:	e7f1      	b.n	1a000350 <ctrl_motor+0x14>
      gpioWrite(positivo, OFF);
1a00036c:	2100      	movs	r1, #0
1a00036e:	4618      	mov	r0, r3
1a000370:	f001 fa0a 	bl	1a001788 <gpioWrite>
      gpioWrite(negativo, ON);
1a000374:	2101      	movs	r1, #1
1a000376:	4630      	mov	r0, r6
1a000378:	f001 fa06 	bl	1a001788 <gpioWrite>
1a00037c:	e7e8      	b.n	1a000350 <ctrl_motor+0x14>
1a00037e:	Address 0x1a00037e is out of bounds.


1a000380 <obtener_vel>:

int obtener_vel (int pos_x, int pos_y, pwmMap_t pwm) // Este modulo calcula la velocidad de giro para una rueda especifica
{  
1a000380:	b538      	push	{r3, r4, r5, lr}
   int aux_x = 0;   
   int aux_y = 0;
   int abs_x = abs (pos_x);
1a000382:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
1a000386:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
   int abs_y = abs (pos_y);
1a00038a:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
1a00038e:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
   int velocidad;
      if ((pwm == PWM0) && (pos_y < 0) || (pwm == PWM4) && (pos_y > 0) ) { //Chequeo si el motor es el que quiere doblar.
1a000392:	4613      	mov	r3, r2
1a000394:	b90a      	cbnz	r2, 1a00039a <obtener_vel+0x1a>
1a000396:	2900      	cmp	r1, #0
1a000398:	db11      	blt.n	1a0003be <obtener_vel+0x3e>
1a00039a:	2b04      	cmp	r3, #4
1a00039c:	d00d      	beq.n	1a0003ba <obtener_vel+0x3a>
               aux_x = 2.55 * abs_x;
            }
         velocidad = (aux_x) - (aux_y);                                    //Determinamos Velocidad final del motor.
      }
      else{                                                                //Este motor no esta afectado para doblar
            if (abs_x > 0 && abs_x <38){
1a00039e:	1e63      	subs	r3, r4, #1
1a0003a0:	2b24      	cmp	r3, #36	; 0x24
1a0003a2:	d92c      	bls.n	1a0003fe <obtener_vel+0x7e>
               velocidad = 0;
            } else {
               velocidad = 2.55 * abs_x;
1a0003a4:	4620      	mov	r0, r4
1a0003a6:	f001 ffb1 	bl	1a00230c <__aeabi_i2d>
1a0003aa:	a317      	add	r3, pc, #92	; (adr r3, 1a000408 <obtener_vel+0x88>)
1a0003ac:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0003b0:	f002 f816 	bl	1a0023e0 <__aeabi_dmul>
1a0003b4:	f002 faae 	bl	1a002914 <__aeabi_d2iz>
1a0003b8:	e01e      	b.n	1a0003f8 <obtener_vel+0x78>
      if ((pwm == PWM0) && (pos_y < 0) || (pwm == PWM4) && (pos_y > 0) ) { //Chequeo si el motor es el que quiere doblar.
1a0003ba:	2900      	cmp	r1, #0
1a0003bc:	ddef      	ble.n	1a00039e <obtener_vel+0x1e>
         if (abs_y > 0 && abs_y <38){                                    //Determinamos cuanto reducir la velocidad para doblar.
1a0003be:	1e43      	subs	r3, r0, #1
1a0003c0:	2b24      	cmp	r3, #36	; 0x24
1a0003c2:	d90a      	bls.n	1a0003da <obtener_vel+0x5a>
               aux_y = 2.55 * abs_y;
1a0003c4:	f001 ffa2 	bl	1a00230c <__aeabi_i2d>
1a0003c8:	a30f      	add	r3, pc, #60	; (adr r3, 1a000408 <obtener_vel+0x88>)
1a0003ca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0003ce:	f002 f807 	bl	1a0023e0 <__aeabi_dmul>
1a0003d2:	f002 fa9f 	bl	1a002914 <__aeabi_d2iz>
1a0003d6:	4605      	mov	r5, r0
1a0003d8:	e000      	b.n	1a0003dc <obtener_vel+0x5c>
               aux_y = 0;
1a0003da:	2500      	movs	r5, #0
         if (abs_x > 0 && abs_x <38){                                    //Determinamos velocidad inicial.
1a0003dc:	1e63      	subs	r3, r4, #1
1a0003de:	2b24      	cmp	r3, #36	; 0x24
1a0003e0:	d90b      	bls.n	1a0003fa <obtener_vel+0x7a>
               aux_x = 2.55 * abs_x;
1a0003e2:	4620      	mov	r0, r4
1a0003e4:	f001 ff92 	bl	1a00230c <__aeabi_i2d>
1a0003e8:	a307      	add	r3, pc, #28	; (adr r3, 1a000408 <obtener_vel+0x88>)
1a0003ea:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0003ee:	f001 fff7 	bl	1a0023e0 <__aeabi_dmul>
1a0003f2:	f002 fa8f 	bl	1a002914 <__aeabi_d2iz>
         velocidad = (aux_x) - (aux_y);                                    //Determinamos Velocidad final del motor.
1a0003f6:	1b40      	subs	r0, r0, r5
            }
         }
   return velocidad;
}
1a0003f8:	bd38      	pop	{r3, r4, r5, pc}
               aux_x = 0;
1a0003fa:	2000      	movs	r0, #0
1a0003fc:	e7fb      	b.n	1a0003f6 <obtener_vel+0x76>
               velocidad = 0;
1a0003fe:	2000      	movs	r0, #0
   return velocidad;
1a000400:	e7fa      	b.n	1a0003f8 <obtener_vel+0x78>
1a000402:	bf00      	nop
1a000404:	f3af 8000 	nop.w
1a000408:	66666666 	.word	0x66666666
1a00040c:	40046666 	.word	0x40046666

1a000410 <ctrl_ruedas>:

void ctrl_ruedas (int pos_x, int pos_y)  //Este modulo recorre todas las ruedas, y en base al las posiciones de los controles, calcula para cada una la velocidad de giro y las energiza.
{
1a000410:	b570      	push	{r4, r5, r6, lr}
1a000412:	b082      	sub	sp, #8
1a000414:	4605      	mov	r5, r0
1a000416:	460e      	mov	r6, r1
   int positivo;
   int negativo;
   int i;
   int velocidad;
   for (i=0; i<2; i++){
1a000418:	2400      	movs	r4, #0
1a00041a:	e00d      	b.n	1a000438 <ctrl_ruedas+0x28>
      switch(i) {
        case 0:
            velocidad = obtener_vel (pos_x, pos_y,PWM0);
1a00041c:	2200      	movs	r2, #0
1a00041e:	4631      	mov	r1, r6
1a000420:	4628      	mov	r0, r5
1a000422:	f7ff ffad 	bl	1a000380 <obtener_vel>
            ctrl_motor (pos_x,velocidad,PWM0, GPIO1, GPIO2);
1a000426:	231f      	movs	r3, #31
1a000428:	9300      	str	r3, [sp, #0]
1a00042a:	230f      	movs	r3, #15
1a00042c:	2200      	movs	r2, #0
1a00042e:	4601      	mov	r1, r0
1a000430:	4628      	mov	r0, r5
1a000432:	f7ff ff83 	bl	1a00033c <ctrl_motor>
   for (i=0; i<2; i++){
1a000436:	3401      	adds	r4, #1
1a000438:	2c01      	cmp	r4, #1
1a00043a:	dc11      	bgt.n	1a000460 <ctrl_ruedas+0x50>
      switch(i) {
1a00043c:	2c00      	cmp	r4, #0
1a00043e:	d0ed      	beq.n	1a00041c <ctrl_ruedas+0xc>
1a000440:	2c01      	cmp	r4, #1
1a000442:	d1f8      	bne.n	1a000436 <ctrl_ruedas+0x26>
            break;
        case 1:
            velocidad = obtener_vel (pos_x, pos_y,PWM4);
1a000444:	2204      	movs	r2, #4
1a000446:	4631      	mov	r1, r6
1a000448:	4628      	mov	r0, r5
1a00044a:	f7ff ff99 	bl	1a000380 <obtener_vel>
            ctrl_motor (pos_x,velocidad,PWM4, GPIO4, GPIO3);
1a00044e:	230e      	movs	r3, #14
1a000450:	9300      	str	r3, [sp, #0]
1a000452:	231e      	movs	r3, #30
1a000454:	2204      	movs	r2, #4
1a000456:	4601      	mov	r1, r0
1a000458:	4628      	mov	r0, r5
1a00045a:	f7ff ff6f 	bl	1a00033c <ctrl_motor>
            break;
1a00045e:	e7ea      	b.n	1a000436 <ctrl_ruedas+0x26>
        default:
           break;
      }
   }
}
1a000460:	b002      	add	sp, #8
1a000462:	bd70      	pop	{r4, r5, r6, pc}

1a000464 <dataInBuffer>:
void setFlagUart232(void){
   dataToSendToUart232Pending = false;
}

// Implementacion de la funcion de callback
void dataInBuffer( void *param ){
1a000464:	b508      	push	{r3, lr}
   uartInterrupt(UART_232, false);
1a000466:	2100      	movs	r1, #0
1a000468:	2005      	movs	r0, #5
1a00046a:	f001 fb67 	bl	1a001b3c <uartInterrupt>
   uartWriteString(UART_USB, ">>>> Atendiendo interrupcion. \r\n" );
1a00046e:	4905      	ldr	r1, [pc, #20]	; (1a000484 <dataInBuffer+0x20>)
1a000470:	2003      	movs	r0, #3
1a000472:	f001 fc8f 	bl	1a001d94 <uartWriteString>
   dataToSendToUart232Pending = true;
1a000476:	4b04      	ldr	r3, [pc, #16]	; (1a000488 <dataInBuffer+0x24>)
1a000478:	2201      	movs	r2, #1
1a00047a:	701a      	strb	r2, [r3, #0]
   uartClearPendingInterrupt(UART_232);
1a00047c:	2005      	movs	r0, #5
1a00047e:	f001 fbeb 	bl	1a001c58 <uartClearPendingInterrupt>
}
1a000482:	bd08      	pop	{r3, pc}
1a000484:	1a004a88 	.word	0x1a004a88
1a000488:	100002b0 	.word	0x100002b0

1a00048c <getFlagUart232>:
}
1a00048c:	4b01      	ldr	r3, [pc, #4]	; (1a000494 <getFlagUart232+0x8>)
1a00048e:	7818      	ldrb	r0, [r3, #0]
1a000490:	4770      	bx	lr
1a000492:	bf00      	nop
1a000494:	100002b0 	.word	0x100002b0

1a000498 <setFlagUart232>:
   dataToSendToUart232Pending = false;
1a000498:	4b01      	ldr	r3, [pc, #4]	; (1a0004a0 <setFlagUart232+0x8>)
1a00049a:	2200      	movs	r2, #0
1a00049c:	701a      	strb	r2, [r3, #0]
}
1a00049e:	4770      	bx	lr
1a0004a0:	100002b0 	.word	0x100002b0

1a0004a4 <mod_int_init>:

void mod_int_init ( void){
1a0004a4:	b508      	push	{r3, lr}
      uartWriteString(UART_USB, ">>>> Mon Init. \r\n" );
1a0004a6:	490b      	ldr	r1, [pc, #44]	; (1a0004d4 <mod_int_init+0x30>)
1a0004a8:	2003      	movs	r0, #3
1a0004aa:	f001 fc73 	bl	1a001d94 <uartWriteString>
      uartInterrupt(UART_232, true);      // Habilitar interrupcion por recepcion de UART 232
1a0004ae:	2101      	movs	r1, #1
1a0004b0:	2005      	movs	r0, #5
1a0004b2:	f001 fb43 	bl	1a001b3c <uartInterrupt>
      uartCallbackSet(UART_232, UART_RECEIVE, dataInBuffer, NULL);     // Configurar callback para recepcion
1a0004b6:	2300      	movs	r3, #0
1a0004b8:	4a07      	ldr	r2, [pc, #28]	; (1a0004d8 <mod_int_init+0x34>)
1a0004ba:	4619      	mov	r1, r3
1a0004bc:	2005      	movs	r0, #5
1a0004be:	f001 fb85 	bl	1a001bcc <uartCallbackSet>
      uartClearPendingInterrupt(UART_232);
1a0004c2:	2005      	movs	r0, #5
1a0004c4:	f001 fbc8 	bl	1a001c58 <uartClearPendingInterrupt>
      uartWriteString(UART_USB, ">>>> Fin \r\n" );
1a0004c8:	4904      	ldr	r1, [pc, #16]	; (1a0004dc <mod_int_init+0x38>)
1a0004ca:	2003      	movs	r0, #3
1a0004cc:	f001 fc62 	bl	1a001d94 <uartWriteString>
1a0004d0:	bd08      	pop	{r3, pc}
1a0004d2:	bf00      	nop
1a0004d4:	1a004aac 	.word	0x1a004aac
1a0004d8:	1a000465 	.word	0x1a000465
1a0004dc:	1a004ac0 	.word	0x1a004ac0

1a0004e0 <main>:
#include "moduloint.h"

#define CADENA_BUFF_SIZE         512


int main(void){
1a0004e0:	b500      	push	{lr}
1a0004e2:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
   char cadenaBuffer[ CADENA_BUFF_SIZE ];
   uint32_t cadenaBufferSize = CADENA_BUFF_SIZE;
   /* ------------- INICIALIZACIONES ------------- */

   /* Inicializar la placa */
   boardConfig();
1a0004e6:	f001 fccb 	bl	1a001e80 <boardInit>
      
   /* Inicializar el motor */
   ctrl_Init();
1a0004ea:	f7ff ff09 	bl	1a000300 <ctrl_Init>
   
   /* Inicializar la conexion UART con la ESP32-CAM */
   esp32_init();
1a0004ee:	f000 f8fb 	bl	1a0006e8 <esp32_init>
   
   /*Inicializar interrupcion */
   mod_int_init();
1a0004f2:	f7ff ffd7 	bl	1a0004a4 <mod_int_init>
   
   delay (100);
1a0004f6:	2064      	movs	r0, #100	; 0x64
1a0004f8:	2100      	movs	r1, #0
1a0004fa:	f001 fd53 	bl	1a001fa4 <delay>
1a0004fe:	e00f      	b.n	1a000520 <main+0x40>
   while (1){
        // Poner el procesador en espera hasta que ocurra una interrupcion
         if(!getFlagUart232()) {
            //gpioWrite( GPIO5, OFF );
            gpioWrite(LED1, ON);
1a000500:	2101      	movs	r1, #1
1a000502:	202b      	movs	r0, #43	; 0x2b
1a000504:	f001 f940 	bl	1a001788 <gpioWrite>
            __WFI();
1a000508:	bf30      	wfi
            delay(1);
1a00050a:	2001      	movs	r0, #1
1a00050c:	2100      	movs	r1, #0
1a00050e:	f001 fd49 	bl	1a001fa4 <delay>
            gpioWrite(LED2, ON);
1a000512:	2101      	movs	r1, #1
1a000514:	202c      	movs	r0, #44	; 0x2c
1a000516:	f001 f937 	bl	1a001788 <gpioWrite>
            //gpioWrite( GPIO5, ON );
         }
         // Si ocurrio una interrupcion, procesar los datos aqui
         if (getFlagUart232()) {
1a00051a:	f7ff ffb7 	bl	1a00048c <getFlagUart232>
1a00051e:	b920      	cbnz	r0, 1a00052a <main+0x4a>
         if(!getFlagUart232()) {
1a000520:	f7ff ffb4 	bl	1a00048c <getFlagUart232>
1a000524:	2800      	cmp	r0, #0
1a000526:	d1f8      	bne.n	1a00051a <main+0x3a>
1a000528:	e7ea      	b.n	1a000500 <main+0x20>
            uartWriteString(UART_USB, ">>>> Llego una interrupcion \r\n" ); 
1a00052a:	4914      	ldr	r1, [pc, #80]	; (1a00057c <main+0x9c>)
1a00052c:	2003      	movs	r0, #3
1a00052e:	f001 fc31 	bl	1a001d94 <uartWriteString>
            while(uartRxReady( UART_232 )){
1a000532:	2005      	movs	r0, #5
1a000534:	f001 fba8 	bl	1a001c88 <uartRxReady>
1a000538:	b930      	cbnz	r0, 1a000548 <main+0x68>
               uartWriteString( UART_USB, cadenaBuffer );
               uartWriteString( UART_USB, "\r\n Procese el siguiente mensaje: \r\n");
               procesarMenssage(cadenaBuffer);
               memset(cadenaBuffer, 0, CADENA_BUFF_SIZE);                       //limpiamos el buffer antes de usarlo nuevamente.
            }
            setFlagUart232();    // Resetear la bandera despues de procesar
1a00053a:	f7ff ffad 	bl	1a000498 <setFlagUart232>
            uartInterrupt(UART_232, true); 
1a00053e:	2101      	movs	r1, #1
1a000540:	2005      	movs	r0, #5
1a000542:	f001 fafb 	bl	1a001b3c <uartInterrupt>
1a000546:	e7eb      	b.n	1a000520 <main+0x40>
               reciveMessage(cadenaBuffer);
1a000548:	4668      	mov	r0, sp
1a00054a:	f000 f8a3 	bl	1a000694 <reciveMessage>
               uartWriteString( UART_USB, "Recibi el siguiente mensaje:");
1a00054e:	490c      	ldr	r1, [pc, #48]	; (1a000580 <main+0xa0>)
1a000550:	2003      	movs	r0, #3
1a000552:	f001 fc1f 	bl	1a001d94 <uartWriteString>
               uartWriteString( UART_USB, cadenaBuffer );
1a000556:	4669      	mov	r1, sp
1a000558:	2003      	movs	r0, #3
1a00055a:	f001 fc1b 	bl	1a001d94 <uartWriteString>
               uartWriteString( UART_USB, "\r\n Procese el siguiente mensaje: \r\n");
1a00055e:	4909      	ldr	r1, [pc, #36]	; (1a000584 <main+0xa4>)
1a000560:	2003      	movs	r0, #3
1a000562:	f001 fc17 	bl	1a001d94 <uartWriteString>
               procesarMenssage(cadenaBuffer);
1a000566:	4668      	mov	r0, sp
1a000568:	f000 f80e 	bl	1a000588 <procesarMenssage>
               memset(cadenaBuffer, 0, CADENA_BUFF_SIZE);                       //limpiamos el buffer antes de usarlo nuevamente.
1a00056c:	f44f 7200 	mov.w	r2, #512	; 0x200
1a000570:	2100      	movs	r1, #0
1a000572:	4668      	mov	r0, sp
1a000574:	f002 fc3a 	bl	1a002dec <memset>
1a000578:	e7db      	b.n	1a000532 <main+0x52>
1a00057a:	bf00      	nop
1a00057c:	1a004acc 	.word	0x1a004acc
1a000580:	1a004aec 	.word	0x1a004aec
1a000584:	1a004b0c 	.word	0x1a004b0c

1a000588 <procesarMenssage>:

/*==================[declaraciones de funciones externas]====================*/

/*==================[funcion principal]======================================*/

void procesarMenssage ( char *cadena){   //  "ets Jun 8 2016" "AP IP address: 160..."
1a000588:	b530      	push	{r4, r5, lr}
1a00058a:	b083      	sub	sp, #12
    int pos_X = 101; 
    int pos_Y = 101;
    int index = 0;
    char *endptr;
    char *token = strtok(cadena, ",");
1a00058c:	4934      	ldr	r1, [pc, #208]	; (1a000660 <procesarMenssage+0xd8>)
1a00058e:	f003 fa93 	bl	1a003ab8 <strtok>
    
   if (token != NULL) {
1a000592:	b178      	cbz	r0, 1a0005b4 <procesarMenssage+0x2c>
        double valor = strtod(token, &endptr);  // Intentamos convertir el token a número
1a000594:	a901      	add	r1, sp, #4
1a000596:	f003 fa83 	bl	1a003aa0 <strtod>
        if (*endptr == '\0') {                  // Verificamos si toda la cadena fue convertida
1a00059a:	9b01      	ldr	r3, [sp, #4]
1a00059c:	781b      	ldrb	r3, [r3, #0]
1a00059e:	b9fb      	cbnz	r3, 1a0005e0 <procesarMenssage+0x58>
            pos_X = valor * 100;
1a0005a0:	2200      	movs	r2, #0
1a0005a2:	4b30      	ldr	r3, [pc, #192]	; (1a000664 <procesarMenssage+0xdc>)
1a0005a4:	ec51 0b10 	vmov	r0, r1, d0
1a0005a8:	f001 ff1a 	bl	1a0023e0 <__aeabi_dmul>
1a0005ac:	f002 f9b2 	bl	1a002914 <__aeabi_d2iz>
1a0005b0:	4604      	mov	r4, r0
1a0005b2:	e000      	b.n	1a0005b6 <procesarMenssage+0x2e>
    int pos_X = 101; 
1a0005b4:	2465      	movs	r4, #101	; 0x65
        }
    }
    token = strtok(NULL, ",");  // Continuamos con el siguiente token
1a0005b6:	492a      	ldr	r1, [pc, #168]	; (1a000660 <procesarMenssage+0xd8>)
1a0005b8:	2000      	movs	r0, #0
1a0005ba:	f003 fa7d 	bl	1a003ab8 <strtok>
    if (token != NULL) {
1a0005be:	b188      	cbz	r0, 1a0005e4 <procesarMenssage+0x5c>
        double valor = strtod(token, &endptr);
1a0005c0:	a901      	add	r1, sp, #4
1a0005c2:	f003 fa6d 	bl	1a003aa0 <strtod>
        if (*endptr == '\0') {
1a0005c6:	9b01      	ldr	r3, [sp, #4]
1a0005c8:	781b      	ldrb	r3, [r3, #0]
1a0005ca:	bbdb      	cbnz	r3, 1a000644 <procesarMenssage+0xbc>
            pos_Y = valor * 100;
1a0005cc:	2200      	movs	r2, #0
1a0005ce:	4b25      	ldr	r3, [pc, #148]	; (1a000664 <procesarMenssage+0xdc>)
1a0005d0:	ec51 0b10 	vmov	r0, r1, d0
1a0005d4:	f001 ff04 	bl	1a0023e0 <__aeabi_dmul>
1a0005d8:	f002 f99c 	bl	1a002914 <__aeabi_d2iz>
1a0005dc:	4605      	mov	r5, r0
1a0005de:	e002      	b.n	1a0005e6 <procesarMenssage+0x5e>
    int pos_X = 101; 
1a0005e0:	2465      	movs	r4, #101	; 0x65
1a0005e2:	e7e8      	b.n	1a0005b6 <procesarMenssage+0x2e>
    int pos_Y = 101;
1a0005e4:	2565      	movs	r5, #101	; 0x65
        }
    }
    switch (pos_X){
1a0005e6:	2cc8      	cmp	r4, #200	; 0xc8
1a0005e8:	d02e      	beq.n	1a000648 <procesarMenssage+0xc0>
1a0005ea:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
1a0005ee:	d031      	beq.n	1a000654 <procesarMenssage+0xcc>
            //Apago el led de conexion activa.
            //gpioWrite( GPIO6, OFF );
            uartWriteString(UART_USB, "Llego un 400."); 
        
        default:
            if (pos_X > -101 && pos_X < 101 && pos_Y > -101 && pos_Y < 101){
1a0005f0:	f104 0364 	add.w	r3, r4, #100	; 0x64
1a0005f4:	2bc8      	cmp	r3, #200	; 0xc8
1a0005f6:	d82b      	bhi.n	1a000650 <procesarMenssage+0xc8>
1a0005f8:	f115 0f64 	cmn.w	r5, #100	; 0x64
1a0005fc:	db28      	blt.n	1a000650 <procesarMenssage+0xc8>
1a0005fe:	2d64      	cmp	r5, #100	; 0x64
1a000600:	dc26      	bgt.n	1a000650 <procesarMenssage+0xc8>
               uartWriteString( UART_USB, "Enviando Cordenadas al Auto: ");
1a000602:	4919      	ldr	r1, [pc, #100]	; (1a000668 <procesarMenssage+0xe0>)
1a000604:	2003      	movs	r0, #3
1a000606:	f001 fbc5 	bl	1a001d94 <uartWriteString>
               uartWriteString(UART_USB, intToStringGlobal(pos_X));
1a00060a:	4620      	mov	r0, r4
1a00060c:	17e1      	asrs	r1, r4, #31
1a00060e:	f001 fcb5 	bl	1a001f7c <intToStringGlobal>
1a000612:	4601      	mov	r1, r0
1a000614:	2003      	movs	r0, #3
1a000616:	f001 fbbd 	bl	1a001d94 <uartWriteString>
               uartWriteString(UART_USB, ",");
1a00061a:	4911      	ldr	r1, [pc, #68]	; (1a000660 <procesarMenssage+0xd8>)
1a00061c:	2003      	movs	r0, #3
1a00061e:	f001 fbb9 	bl	1a001d94 <uartWriteString>
               uartWriteString(UART_USB, intToStringGlobal(pos_Y));
1a000622:	4628      	mov	r0, r5
1a000624:	17e9      	asrs	r1, r5, #31
1a000626:	f001 fca9 	bl	1a001f7c <intToStringGlobal>
1a00062a:	4601      	mov	r1, r0
1a00062c:	2003      	movs	r0, #3
1a00062e:	f001 fbb1 	bl	1a001d94 <uartWriteString>
               uartWriteString( UART_USB, "\r\n");
1a000632:	490e      	ldr	r1, [pc, #56]	; (1a00066c <procesarMenssage+0xe4>)
1a000634:	2003      	movs	r0, #3
1a000636:	f001 fbad 	bl	1a001d94 <uartWriteString>
               ctrl_ruedas (pos_X, pos_Y);
1a00063a:	4629      	mov	r1, r5
1a00063c:	4620      	mov	r0, r4
1a00063e:	f7ff fee7 	bl	1a000410 <ctrl_ruedas>
            }
            break;
    } 
1a000642:	e005      	b.n	1a000650 <procesarMenssage+0xc8>
    int pos_Y = 101;
1a000644:	2565      	movs	r5, #101	; 0x65
1a000646:	e7ce      	b.n	1a0005e6 <procesarMenssage+0x5e>
            uartWriteString(UART_USB, "Llego un 200."); 
1a000648:	4909      	ldr	r1, [pc, #36]	; (1a000670 <procesarMenssage+0xe8>)
1a00064a:	2003      	movs	r0, #3
1a00064c:	f001 fba2 	bl	1a001d94 <uartWriteString>
1a000650:	b003      	add	sp, #12
1a000652:	bd30      	pop	{r4, r5, pc}
            uartWriteString(UART_USB, "Llego un 400."); 
1a000654:	4907      	ldr	r1, [pc, #28]	; (1a000674 <procesarMenssage+0xec>)
1a000656:	2003      	movs	r0, #3
1a000658:	f001 fb9c 	bl	1a001d94 <uartWriteString>
1a00065c:	e7c8      	b.n	1a0005f0 <procesarMenssage+0x68>
1a00065e:	bf00      	nop
1a000660:	1a004b30 	.word	0x1a004b30
1a000664:	40590000 	.word	0x40590000
1a000668:	1a004b54 	.word	0x1a004b54
1a00066c:	1a004ae8 	.word	0x1a004ae8
1a000670:	1a004b34 	.word	0x1a004b34
1a000674:	1a004b44 	.word	0x1a004b44

1a000678 <esp32CleanRxBuffer>:
   while( TRUE ){
      sleepUntilNextInterrupt();
   }
}

void esp32CleanRxBuffer( void ){
1a000678:	b508      	push	{r3, lr}
   espResponseBufferSize = ESP32_RX_BUFF_SIZE;
1a00067a:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a00067e:	4b03      	ldr	r3, [pc, #12]	; (1a00068c <esp32CleanRxBuffer+0x14>)
1a000680:	601a      	str	r2, [r3, #0]
   memset( espResponseBuffer, 0, espResponseBufferSize );
1a000682:	2100      	movs	r1, #0
1a000684:	4802      	ldr	r0, [pc, #8]	; (1a000690 <esp32CleanRxBuffer+0x18>)
1a000686:	f002 fbb1 	bl	1a002dec <memset>
} 
1a00068a:	bd08      	pop	{r3, pc}
1a00068c:	10000000 	.word	0x10000000
1a000690:	100002f8 	.word	0x100002f8

1a000694 <reciveMessage>:

void reciveMessage( char *cadena){   //Recive un puntero a una cadena, para guardar la lectura completa del buffer. 
1a000694:	b530      	push	{r4, r5, lr}
1a000696:	b083      	sub	sp, #12
1a000698:	4605      	mov	r5, r0
   int index = 0;
   char c;
   esp32CleanRxBuffer();                     //limpiamos el buffer antes de usarlo nuevamente.
1a00069a:	f7ff ffed 	bl	1a000678 <esp32CleanRxBuffer>
   int index = 0;
1a00069e:	2400      	movs	r4, #0
   
   while (index < (ESP32_RX_BUFF_SIZE - 1) && uartRxReady( UART_232 ) ) {
1a0006a0:	f240 33fe 	movw	r3, #1022	; 0x3fe
1a0006a4:	429c      	cmp	r4, r3
1a0006a6:	dc17      	bgt.n	1a0006d8 <reciveMessage+0x44>
1a0006a8:	2005      	movs	r0, #5
1a0006aa:	f001 faed 	bl	1a001c88 <uartRxReady>
1a0006ae:	b198      	cbz	r0, 1a0006d8 <reciveMessage+0x44>
       if (uartReadByte(UART_232, &c)){
1a0006b0:	f10d 0107 	add.w	r1, sp, #7
1a0006b4:	2005      	movs	r0, #5
1a0006b6:	f001 fb51 	bl	1a001d5c <uartReadByte>
1a0006ba:	2800      	cmp	r0, #0
1a0006bc:	d0f0      	beq.n	1a0006a0 <reciveMessage+0xc>
         if (c == '\n' || c == '\r'){
1a0006be:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0006c2:	2b0a      	cmp	r3, #10
1a0006c4:	d005      	beq.n	1a0006d2 <reciveMessage+0x3e>
1a0006c6:	2b0d      	cmp	r3, #13
1a0006c8:	d003      	beq.n	1a0006d2 <reciveMessage+0x3e>
            espResponseBuffer[index] = '\0';
            break;
         }
         espResponseBuffer[index] = c;
1a0006ca:	4a06      	ldr	r2, [pc, #24]	; (1a0006e4 <reciveMessage+0x50>)
1a0006cc:	5513      	strb	r3, [r2, r4]
         index ++;
1a0006ce:	3401      	adds	r4, #1
1a0006d0:	e7e6      	b.n	1a0006a0 <reciveMessage+0xc>
            espResponseBuffer[index] = '\0';
1a0006d2:	4b04      	ldr	r3, [pc, #16]	; (1a0006e4 <reciveMessage+0x50>)
1a0006d4:	2200      	movs	r2, #0
1a0006d6:	551a      	strb	r2, [r3, r4]
       }
   }
   strcpy(cadena, espResponseBuffer);   //Copiames el Buffer en cadena.
1a0006d8:	4902      	ldr	r1, [pc, #8]	; (1a0006e4 <reciveMessage+0x50>)
1a0006da:	4628      	mov	r0, r5
1a0006dc:	f002 fbe8 	bl	1a002eb0 <strcpy>
   //uartWriteString(UART_USB, espResponseBuffer);    Sirve para imprimir por completo lo que tiene el buffer. "DEBUG"
}
1a0006e0:	b003      	add	sp, #12
1a0006e2:	bd30      	pop	{r4, r5, pc}
1a0006e4:	100002f8 	.word	0x100002f8

1a0006e8 <esp32_init>:

void esp32_init( void ){
1a0006e8:	b508      	push	{r3, lr}

   //gpioInit( GPIO5, GPIO_OUTPUT );// Gpio5 como Salida senial del led para saber si hay conexion con el esp32.
   //gpioInit( GPIO6, GPIO_OUTPUT );// Gpio6 como Salida senial del led para saber si hay alguien conectado al esp32.
   
   // Inicializar otra UART_USB para debug y mostrar mensaje en consola. 
   uartConfig( UART_DEBUG, UARTS_BAUD_RATE );
1a0006ea:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0006ee:	2003      	movs	r0, #3
1a0006f0:	f001 faf6 	bl	1a001ce0 <uartInit>
   uartWriteString(UART_USB, "UART_USB configurada correctamente.\r\n");
1a0006f4:	4906      	ldr	r1, [pc, #24]	; (1a000710 <esp32_init+0x28>)
1a0006f6:	2003      	movs	r0, #3
1a0006f8:	f001 fb4c 	bl	1a001d94 <uartWriteString>

   // Inicializar otra UART donde se conecta el ESP32 y mostrar mensaje en consola.
   uartInit( UART_ESP32, UARTS_BAUD_RATE );
1a0006fc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000700:	2005      	movs	r0, #5
1a000702:	f001 faed 	bl	1a001ce0 <uartInit>
   uartWriteString(UART_USB, ">>>> UART_ESP (donde se conecta el ESP32), \r\n>>>> configurada como salida de consola.\r\n" );
1a000706:	4903      	ldr	r1, [pc, #12]	; (1a000714 <esp32_init+0x2c>)
1a000708:	2003      	movs	r0, #3
1a00070a:	f001 fb43 	bl	1a001d94 <uartWriteString>
}
1a00070e:	bd08      	pop	{r3, pc}
1a000710:	1a004b74 	.word	0x1a004b74
1a000714:	1a004b9c 	.word	0x1a004b9c

1a000718 <initialise_monitor_handles>:
}
1a000718:	4770      	bx	lr
1a00071a:	Address 0x1a00071a is out of bounds.


1a00071c <Reset_Handler>:
void Reset_Handler(void) {
1a00071c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00071e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000720:	4b19      	ldr	r3, [pc, #100]	; (1a000788 <Reset_Handler+0x6c>)
1a000722:	4a1a      	ldr	r2, [pc, #104]	; (1a00078c <Reset_Handler+0x70>)
1a000724:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000726:	3304      	adds	r3, #4
1a000728:	4a19      	ldr	r2, [pc, #100]	; (1a000790 <Reset_Handler+0x74>)
1a00072a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00072c:	2300      	movs	r3, #0
1a00072e:	e005      	b.n	1a00073c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000730:	4a18      	ldr	r2, [pc, #96]	; (1a000794 <Reset_Handler+0x78>)
1a000732:	f04f 31ff 	mov.w	r1, #4294967295
1a000736:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00073a:	3301      	adds	r3, #1
1a00073c:	2b07      	cmp	r3, #7
1a00073e:	d9f7      	bls.n	1a000730 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000740:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000742:	4b15      	ldr	r3, [pc, #84]	; (1a000798 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000744:	e007      	b.n	1a000756 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000746:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00074a:	689a      	ldr	r2, [r3, #8]
1a00074c:	6859      	ldr	r1, [r3, #4]
1a00074e:	6818      	ldr	r0, [r3, #0]
1a000750:	f7ff fd1b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000754:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000756:	4a11      	ldr	r2, [pc, #68]	; (1a00079c <Reset_Handler+0x80>)
1a000758:	4293      	cmp	r3, r2
1a00075a:	d3f4      	bcc.n	1a000746 <Reset_Handler+0x2a>
1a00075c:	e006      	b.n	1a00076c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00075e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000760:	6859      	ldr	r1, [r3, #4]
1a000762:	f854 0b08 	ldr.w	r0, [r4], #8
1a000766:	f7ff fd1f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00076a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00076c:	4a0c      	ldr	r2, [pc, #48]	; (1a0007a0 <Reset_Handler+0x84>)
1a00076e:	4293      	cmp	r3, r2
1a000770:	d3f5      	bcc.n	1a00075e <Reset_Handler+0x42>
    SystemInit();
1a000772:	f000 feef 	bl	1a001554 <SystemInit>
    __libc_init_array();
1a000776:	f002 fb05 	bl	1a002d84 <__libc_init_array>
    initialise_monitor_handles();
1a00077a:	f7ff ffcd 	bl	1a000718 <initialise_monitor_handles>
    main();
1a00077e:	f7ff feaf 	bl	1a0004e0 <main>
        __asm__ volatile("wfi");
1a000782:	bf30      	wfi
1a000784:	e7fd      	b.n	1a000782 <Reset_Handler+0x66>
1a000786:	bf00      	nop
1a000788:	40053100 	.word	0x40053100
1a00078c:	10df1000 	.word	0x10df1000
1a000790:	01dff7ff 	.word	0x01dff7ff
1a000794:	e000e280 	.word	0xe000e280
1a000798:	1a000114 	.word	0x1a000114
1a00079c:	1a000150 	.word	0x1a000150
1a0007a0:	1a000178 	.word	0x1a000178

1a0007a4 <_fini>:
void _fini(void) {}
1a0007a4:	4770      	bx	lr

1a0007a6 <_init>:
void _init(void) {}
1a0007a6:	4770      	bx	lr

1a0007a8 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0007a8:	4b05      	ldr	r3, [pc, #20]	; (1a0007c0 <_sbrk_r+0x18>)
1a0007aa:	681b      	ldr	r3, [r3, #0]
1a0007ac:	b123      	cbz	r3, 1a0007b8 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0007ae:	4b04      	ldr	r3, [pc, #16]	; (1a0007c0 <_sbrk_r+0x18>)
1a0007b0:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0007b2:	4401      	add	r1, r0
1a0007b4:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0007b6:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0007b8:	4b01      	ldr	r3, [pc, #4]	; (1a0007c0 <_sbrk_r+0x18>)
1a0007ba:	4a02      	ldr	r2, [pc, #8]	; (1a0007c4 <_sbrk_r+0x1c>)
1a0007bc:	601a      	str	r2, [r3, #0]
1a0007be:	e7f6      	b.n	1a0007ae <_sbrk_r+0x6>
1a0007c0:	100002b4 	.word	0x100002b4
1a0007c4:	100007d4 	.word	0x100007d4

1a0007c8 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0007c8:	2300      	movs	r3, #0
1a0007ca:	2b1c      	cmp	r3, #28
1a0007cc:	d812      	bhi.n	1a0007f4 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0007ce:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0007d0:	4a09      	ldr	r2, [pc, #36]	; (1a0007f8 <Board_SetupMuxing+0x30>)
1a0007d2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0007d6:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0007da:	784a      	ldrb	r2, [r1, #1]
1a0007dc:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0007de:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0007e2:	4906      	ldr	r1, [pc, #24]	; (1a0007fc <Board_SetupMuxing+0x34>)
1a0007e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0007e8:	3301      	adds	r3, #1
1a0007ea:	2b1c      	cmp	r3, #28
1a0007ec:	d9f0      	bls.n	1a0007d0 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0007ee:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0007f2:	4770      	bx	lr
1a0007f4:	4770      	bx	lr
1a0007f6:	bf00      	nop
1a0007f8:	1a004bf8 	.word	0x1a004bf8
1a0007fc:	40086000 	.word	0x40086000

1a000800 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000800:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000802:	4a17      	ldr	r2, [pc, #92]	; (1a000860 <Board_SetupClocking+0x60>)
1a000804:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000808:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00080c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000810:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000814:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00081c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000820:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000824:	2201      	movs	r2, #1
1a000826:	490f      	ldr	r1, [pc, #60]	; (1a000864 <Board_SetupClocking+0x64>)
1a000828:	2006      	movs	r0, #6
1a00082a:	f000 fa49 	bl	1a000cc0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00082e:	2400      	movs	r4, #0
1a000830:	b14c      	cbz	r4, 1a000846 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000832:	4b0b      	ldr	r3, [pc, #44]	; (1a000860 <Board_SetupClocking+0x60>)
1a000834:	685a      	ldr	r2, [r3, #4]
1a000836:	f022 020c 	bic.w	r2, r2, #12
1a00083a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00083c:	685a      	ldr	r2, [r3, #4]
1a00083e:	f042 0203 	orr.w	r2, r2, #3
1a000842:	605a      	str	r2, [r3, #4]
}
1a000844:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000846:	4808      	ldr	r0, [pc, #32]	; (1a000868 <Board_SetupClocking+0x68>)
1a000848:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00084c:	2301      	movs	r3, #1
1a00084e:	788a      	ldrb	r2, [r1, #2]
1a000850:	7849      	ldrb	r1, [r1, #1]
1a000852:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000856:	f000 fd0b 	bl	1a001270 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00085a:	3401      	adds	r4, #1
1a00085c:	e7e8      	b.n	1a000830 <Board_SetupClocking+0x30>
1a00085e:	bf00      	nop
1a000860:	40043000 	.word	0x40043000
1a000864:	0c28cb00 	.word	0x0c28cb00
1a000868:	1a004bf4 	.word	0x1a004bf4

1a00086c <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00086c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00086e:	f7ff ffab 	bl	1a0007c8 <Board_SetupMuxing>
    Board_SetupClocking();
1a000872:	f7ff ffc5 	bl	1a000800 <Board_SetupClocking>
}
1a000876:	bd08      	pop	{r3, pc}

1a000878 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000878:	2200      	movs	r2, #0
1a00087a:	2a05      	cmp	r2, #5
1a00087c:	d819      	bhi.n	1a0008b2 <Board_LED_Init+0x3a>
{
1a00087e:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000880:	490c      	ldr	r1, [pc, #48]	; (1a0008b4 <Board_LED_Init+0x3c>)
1a000882:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000886:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00088a:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00088c:	4b0a      	ldr	r3, [pc, #40]	; (1a0008b8 <Board_LED_Init+0x40>)
1a00088e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000892:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000896:	2001      	movs	r0, #1
1a000898:	40a0      	lsls	r0, r4
1a00089a:	4301      	orrs	r1, r0
1a00089c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0008a0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0008a4:	2100      	movs	r1, #0
1a0008a6:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0008a8:	3201      	adds	r2, #1
1a0008aa:	2a05      	cmp	r2, #5
1a0008ac:	d9e8      	bls.n	1a000880 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0008ae:	bc70      	pop	{r4, r5, r6}
1a0008b0:	4770      	bx	lr
1a0008b2:	4770      	bx	lr
1a0008b4:	1a004c78 	.word	0x1a004c78
1a0008b8:	400f4000 	.word	0x400f4000

1a0008bc <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0008bc:	2300      	movs	r3, #0
1a0008be:	2b03      	cmp	r3, #3
1a0008c0:	d816      	bhi.n	1a0008f0 <Board_TEC_Init+0x34>
{
1a0008c2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0008c4:	490b      	ldr	r1, [pc, #44]	; (1a0008f4 <Board_TEC_Init+0x38>)
1a0008c6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0008ca:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0008ce:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0008d0:	4c09      	ldr	r4, [pc, #36]	; (1a0008f8 <Board_TEC_Init+0x3c>)
1a0008d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0008d6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0008da:	2001      	movs	r0, #1
1a0008dc:	40a8      	lsls	r0, r5
1a0008de:	ea21 0100 	bic.w	r1, r1, r0
1a0008e2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0008e6:	3301      	adds	r3, #1
1a0008e8:	2b03      	cmp	r3, #3
1a0008ea:	d9eb      	bls.n	1a0008c4 <Board_TEC_Init+0x8>
   }
}
1a0008ec:	bc30      	pop	{r4, r5}
1a0008ee:	4770      	bx	lr
1a0008f0:	4770      	bx	lr
1a0008f2:	bf00      	nop
1a0008f4:	1a004c70 	.word	0x1a004c70
1a0008f8:	400f4000 	.word	0x400f4000

1a0008fc <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0008fc:	2300      	movs	r3, #0
1a0008fe:	2b08      	cmp	r3, #8
1a000900:	d816      	bhi.n	1a000930 <Board_GPIO_Init+0x34>
{
1a000902:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000904:	490b      	ldr	r1, [pc, #44]	; (1a000934 <Board_GPIO_Init+0x38>)
1a000906:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00090a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00090e:	784d      	ldrb	r5, [r1, #1]
1a000910:	4c09      	ldr	r4, [pc, #36]	; (1a000938 <Board_GPIO_Init+0x3c>)
1a000912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000916:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00091a:	2001      	movs	r0, #1
1a00091c:	40a8      	lsls	r0, r5
1a00091e:	ea21 0100 	bic.w	r1, r1, r0
1a000922:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000926:	3301      	adds	r3, #1
1a000928:	2b08      	cmp	r3, #8
1a00092a:	d9eb      	bls.n	1a000904 <Board_GPIO_Init+0x8>
   }
}
1a00092c:	bc30      	pop	{r4, r5}
1a00092e:	4770      	bx	lr
1a000930:	4770      	bx	lr
1a000932:	bf00      	nop
1a000934:	1a004c84 	.word	0x1a004c84
1a000938:	400f4000 	.word	0x400f4000

1a00093c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00093c:	b510      	push	{r4, lr}
1a00093e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000940:	4c08      	ldr	r4, [pc, #32]	; (1a000964 <Board_ADC_Init+0x28>)
1a000942:	4669      	mov	r1, sp
1a000944:	4620      	mov	r0, r4
1a000946:	f000 f97b 	bl	1a000c40 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00094a:	4a07      	ldr	r2, [pc, #28]	; (1a000968 <Board_ADC_Init+0x2c>)
1a00094c:	4669      	mov	r1, sp
1a00094e:	4620      	mov	r0, r4
1a000950:	f000 f996 	bl	1a000c80 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000954:	2200      	movs	r2, #0
1a000956:	4669      	mov	r1, sp
1a000958:	4620      	mov	r0, r4
1a00095a:	f000 f9aa 	bl	1a000cb2 <Chip_ADC_SetResolution>
}
1a00095e:	b002      	add	sp, #8
1a000960:	bd10      	pop	{r4, pc}
1a000962:	bf00      	nop
1a000964:	400e3000 	.word	0x400e3000
1a000968:	00061a80 	.word	0x00061a80

1a00096c <Board_SPI_Init>:
{
1a00096c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00096e:	4c0b      	ldr	r4, [pc, #44]	; (1a00099c <Board_SPI_Init+0x30>)
1a000970:	4620      	mov	r0, r4
1a000972:	f000 f895 	bl	1a000aa0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000976:	6863      	ldr	r3, [r4, #4]
1a000978:	f023 0304 	bic.w	r3, r3, #4
1a00097c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00097e:	6823      	ldr	r3, [r4, #0]
1a000980:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000984:	f043 0307 	orr.w	r3, r3, #7
1a000988:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00098a:	4905      	ldr	r1, [pc, #20]	; (1a0009a0 <Board_SPI_Init+0x34>)
1a00098c:	4620      	mov	r0, r4
1a00098e:	f000 f868 	bl	1a000a62 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000992:	6863      	ldr	r3, [r4, #4]
1a000994:	f043 0302 	orr.w	r3, r3, #2
1a000998:	6063      	str	r3, [r4, #4]
}
1a00099a:	bd10      	pop	{r4, pc}
1a00099c:	400c5000 	.word	0x400c5000
1a0009a0:	000186a0 	.word	0x000186a0

1a0009a4 <Board_I2C_Init>:
{
1a0009a4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0009a6:	2000      	movs	r0, #0
1a0009a8:	f000 f8ee 	bl	1a000b88 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0009ac:	4b04      	ldr	r3, [pc, #16]	; (1a0009c0 <Board_I2C_Init+0x1c>)
1a0009ae:	f640 0208 	movw	r2, #2056	; 0x808
1a0009b2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0009b6:	4903      	ldr	r1, [pc, #12]	; (1a0009c4 <Board_I2C_Init+0x20>)
1a0009b8:	2000      	movs	r0, #0
1a0009ba:	f000 f8f7 	bl	1a000bac <Chip_I2C_SetClockRate>
}
1a0009be:	bd08      	pop	{r3, pc}
1a0009c0:	40086000 	.word	0x40086000
1a0009c4:	000f4240 	.word	0x000f4240

1a0009c8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0009c8:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0009ca:	4c07      	ldr	r4, [pc, #28]	; (1a0009e8 <Board_Debug_Init+0x20>)
1a0009cc:	4620      	mov	r0, r4
1a0009ce:	f000 fd09 	bl	1a0013e4 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0009d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0009d6:	4620      	mov	r0, r4
1a0009d8:	f000 fd4e 	bl	1a001478 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0009dc:	2303      	movs	r3, #3
1a0009de:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0009e0:	2301      	movs	r3, #1
1a0009e2:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0009e4:	bd10      	pop	{r4, pc}
1a0009e6:	bf00      	nop
1a0009e8:	400c1000 	.word	0x400c1000

1a0009ec <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0009ec:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0009ee:	f7ff ffeb 	bl	1a0009c8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0009f2:	4809      	ldr	r0, [pc, #36]	; (1a000a18 <Board_Init+0x2c>)
1a0009f4:	f000 f8f6 	bl	1a000be4 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0009f8:	f7ff ff80 	bl	1a0008fc <Board_GPIO_Init>
   Board_ADC_Init();
1a0009fc:	f7ff ff9e 	bl	1a00093c <Board_ADC_Init>
   Board_SPI_Init();
1a000a00:	f7ff ffb4 	bl	1a00096c <Board_SPI_Init>
   Board_I2C_Init();
1a000a04:	f7ff ffce 	bl	1a0009a4 <Board_I2C_Init>

   Board_LED_Init();
1a000a08:	f7ff ff36 	bl	1a000878 <Board_LED_Init>
   Board_TEC_Init();
1a000a0c:	f7ff ff56 	bl	1a0008bc <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000a10:	f000 fa02 	bl	1a000e18 <SystemCoreClockUpdate>
}
1a000a14:	bd08      	pop	{r3, pc}
1a000a16:	bf00      	nop
1a000a18:	400f4000 	.word	0x400f4000

1a000a1c <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000a1c:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000a1e:	f7ff ffd3 	bl	1a0009c8 <Board_Debug_Init>
1a000a22:	bd08      	pop	{r3, pc}

1a000a24 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000a24:	4b03      	ldr	r3, [pc, #12]	; (1a000a34 <Chip_SSP_GetClockIndex+0x10>)
1a000a26:	4298      	cmp	r0, r3
1a000a28:	d001      	beq.n	1a000a2e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000a2a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000a2c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000a2e:	20a5      	movs	r0, #165	; 0xa5
1a000a30:	4770      	bx	lr
1a000a32:	bf00      	nop
1a000a34:	400c5000 	.word	0x400c5000

1a000a38 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000a38:	4b04      	ldr	r3, [pc, #16]	; (1a000a4c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000a3a:	4298      	cmp	r0, r3
1a000a3c:	d002      	beq.n	1a000a44 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000a3e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000a42:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000a44:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000a48:	4770      	bx	lr
1a000a4a:	bf00      	nop
1a000a4c:	400c5000 	.word	0x400c5000

1a000a50 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000a50:	6803      	ldr	r3, [r0, #0]
1a000a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000a56:	0209      	lsls	r1, r1, #8
1a000a58:	b289      	uxth	r1, r1
1a000a5a:	4319      	orrs	r1, r3
1a000a5c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000a5e:	6102      	str	r2, [r0, #16]
}
1a000a60:	4770      	bx	lr

1a000a62 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000a62:	b570      	push	{r4, r5, r6, lr}
1a000a64:	4606      	mov	r6, r0
1a000a66:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000a68:	f7ff ffe6 	bl	1a000a38 <Chip_SSP_GetPeriphClockIndex>
1a000a6c:	f000 fc7e 	bl	1a00136c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000a70:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000a72:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a000a76:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a000a78:	e000      	b.n	1a000a7c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000a7a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a000a7c:	42ab      	cmp	r3, r5
1a000a7e:	d90b      	bls.n	1a000a98 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000a80:	1c4c      	adds	r4, r1, #1
1a000a82:	fb02 f304 	mul.w	r3, r2, r4
1a000a86:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000a8a:	429d      	cmp	r5, r3
1a000a8c:	d2f6      	bcs.n	1a000a7c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a000a8e:	2cff      	cmp	r4, #255	; 0xff
1a000a90:	d9f3      	bls.n	1a000a7a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a000a92:	3202      	adds	r2, #2
				cr0_div = 0;
1a000a94:	2100      	movs	r1, #0
1a000a96:	e7f1      	b.n	1a000a7c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a000a98:	4630      	mov	r0, r6
1a000a9a:	f7ff ffd9 	bl	1a000a50 <Chip_SSP_SetClockRate>
}
1a000a9e:	bd70      	pop	{r4, r5, r6, pc}

1a000aa0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000aa0:	b510      	push	{r4, lr}
1a000aa2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000aa4:	f7ff ffbe 	bl	1a000a24 <Chip_SSP_GetClockIndex>
1a000aa8:	f000 fc46 	bl	1a001338 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000aac:	4620      	mov	r0, r4
1a000aae:	f7ff ffc3 	bl	1a000a38 <Chip_SSP_GetPeriphClockIndex>
1a000ab2:	f000 fc41 	bl	1a001338 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000ab6:	6863      	ldr	r3, [r4, #4]
1a000ab8:	f023 0304 	bic.w	r3, r3, #4
1a000abc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000abe:	6823      	ldr	r3, [r4, #0]
1a000ac0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000ac4:	f043 0307 	orr.w	r3, r3, #7
1a000ac8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000aca:	4902      	ldr	r1, [pc, #8]	; (1a000ad4 <Chip_SSP_Init+0x34>)
1a000acc:	4620      	mov	r0, r4
1a000ace:	f7ff ffc8 	bl	1a000a62 <Chip_SSP_SetBitRate>
}
1a000ad2:	bd10      	pop	{r4, pc}
1a000ad4:	000186a0 	.word	0x000186a0

1a000ad8 <Chip_SCTPWM_SetOutPin>:
 * Public functions
 ****************************************************************************/

/* Setup the OUTPUT pin corresponding to the PWM index */
void Chip_SCTPWM_SetOutPin(LPC_SCT_T *pSCT, uint8_t index, uint8_t pin)
{
1a000ad8:	b430      	push	{r4, r5}
	int ix = (int) index;
	pSCT->EVENT[ix].CTRL = index | (1 << 12);
1a000ada:	f441 5580 	orr.w	r5, r1, #4096	; 0x1000
1a000ade:	f101 0360 	add.w	r3, r1, #96	; 0x60
1a000ae2:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
1a000ae6:	6065      	str	r5, [r4, #4]
	pSCT->EVENT[ix].STATE = 1;
1a000ae8:	2401      	movs	r4, #1
1a000aea:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].SET = 1;
1a000aee:	f102 03a0 	add.w	r3, r2, #160	; 0xa0
1a000af2:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].CLR = 1 << ix;
1a000af6:	fa04 f101 	lsl.w	r1, r4, r1
1a000afa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
1a000afe:	6059      	str	r1, [r3, #4]

	/* Clear the output in-case of conflict */
	pSCT->RES = (pSCT->RES & ~(3 << (pin << 1))) | (0x01 << (pin << 1));
1a000b00:	6d81      	ldr	r1, [r0, #88]	; 0x58
1a000b02:	40a2      	lsls	r2, r4
1a000b04:	2303      	movs	r3, #3
1a000b06:	4093      	lsls	r3, r2
1a000b08:	43db      	mvns	r3, r3
1a000b0a:	4019      	ands	r1, r3
1a000b0c:	4094      	lsls	r4, r2
1a000b0e:	430c      	orrs	r4, r1
1a000b10:	6584      	str	r4, [r0, #88]	; 0x58

	/* Set and Clear do not depend on direction */
	pSCT->OUTPUTDIRCTRL = (pSCT->OUTPUTDIRCTRL & ~(3 << (pin << 1)));
1a000b12:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a000b14:	4013      	ands	r3, r2
1a000b16:	6543      	str	r3, [r0, #84]	; 0x54
}
1a000b18:	bc30      	pop	{r4, r5}
1a000b1a:	4770      	bx	lr

1a000b1c <Chip_SCTPWM_SetRate>:

/* Set the PWM frequency */
void Chip_SCTPWM_SetRate(LPC_SCT_T *pSCT, uint32_t freq)
{
1a000b1c:	b538      	push	{r3, r4, r5, lr}
1a000b1e:	4604      	mov	r4, r0
1a000b20:	460d      	mov	r5, r1
	uint32_t rate;

	rate = Chip_Clock_GetRate(CLK_MX_SCT) / freq;;
1a000b22:	206d      	movs	r0, #109	; 0x6d
1a000b24:	f000 fc22 	bl	1a00136c <Chip_Clock_GetRate>
1a000b28:	fbb0 f0f5 	udiv	r0, r0, r5
 * @param	value	: Value (ORed value of SCT_CTRL_* bits)
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetControl(LPC_SCT_T *pSCT, uint32_t value)
{
	pSCT->CTRL_U |= value;
1a000b2c:	6863      	ldr	r3, [r4, #4]
1a000b2e:	f043 1304 	orr.w	r3, r3, #262148	; 0x40004
1a000b32:	6063      	str	r3, [r4, #4]
1a000b34:	6863      	ldr	r3, [r4, #4]
1a000b36:	f043 1308 	orr.w	r3, r3, #524296	; 0x80008
1a000b3a:	6063      	str	r3, [r4, #4]

	/* Stop the SCT before configuration */
	Chip_SCTPWM_Stop(pSCT);

	/* Set MATCH0 for max limit */
	pSCT->REGMODE_L = 0;
1a000b3c:	2300      	movs	r3, #0
1a000b3e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	pSCT->REGMODE_H = 0;
1a000b42:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	pSCT->MATCH[n].U = value;
1a000b46:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 * @param	value	: The 32-bit match count reload value
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetMatchReload(LPC_SCT_T *pSCT, CHIP_SCT_MATCH_REG_T n, uint32_t value)
{
	pSCT->MATCHREL[n].U = value;
1a000b4a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
	Chip_SCT_SetMatchCount(pSCT, SCT_MATCH_0, 0);
	Chip_SCT_SetMatchReload(pSCT, SCT_MATCH_0, rate);
	pSCT->EVENT[0].CTRL = 1 << 12;
1a000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a000b52:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	pSCT->EVENT[0].STATE = 1;
1a000b56:	2301      	movs	r3, #1
1a000b58:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	pSCT->LIMIT_L = 1;
1a000b5c:	8123      	strh	r3, [r4, #8]
	pSCT->CONFIG = value;
1a000b5e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
1a000b62:	6023      	str	r3, [r4, #0]

	/* Set SCT Counter to count 32-bits and reset to 0 after reaching MATCH0 */
	Chip_SCT_Config(pSCT, SCT_CONFIG_32BIT_COUNTER | SCT_CONFIG_AUTOLIMIT_L);
}
1a000b64:	bd38      	pop	{r3, r4, r5, pc}
1a000b66:	Address 0x1a000b66 is out of bounds.


1a000b68 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000b68:	2901      	cmp	r1, #1
1a000b6a:	d109      	bne.n	1a000b80 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000b6c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000b70:	0082      	lsls	r2, r0, #2
1a000b72:	4b04      	ldr	r3, [pc, #16]	; (1a000b84 <Chip_I2C_EventHandler+0x1c>)
1a000b74:	4413      	add	r3, r2
1a000b76:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000b78:	7d13      	ldrb	r3, [r2, #20]
1a000b7a:	b2db      	uxtb	r3, r3
1a000b7c:	2b04      	cmp	r3, #4
1a000b7e:	d0fb      	beq.n	1a000b78 <Chip_I2C_EventHandler+0x10>
}
1a000b80:	4770      	bx	lr
1a000b82:	bf00      	nop
1a000b84:	10000004 	.word	0x10000004

1a000b88 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000b88:	b570      	push	{r4, r5, r6, lr}
1a000b8a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000b8c:	4e06      	ldr	r6, [pc, #24]	; (1a000ba8 <Chip_I2C_Init+0x20>)
1a000b8e:	00c4      	lsls	r4, r0, #3
1a000b90:	1a22      	subs	r2, r4, r0
1a000b92:	0093      	lsls	r3, r2, #2
1a000b94:	4433      	add	r3, r6
1a000b96:	8898      	ldrh	r0, [r3, #4]
1a000b98:	f000 fbce 	bl	1a001338 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000b9c:	1b64      	subs	r4, r4, r5
1a000b9e:	00a3      	lsls	r3, r4, #2
1a000ba0:	58f3      	ldr	r3, [r6, r3]
1a000ba2:	226c      	movs	r2, #108	; 0x6c
1a000ba4:	619a      	str	r2, [r3, #24]
}
1a000ba6:	bd70      	pop	{r4, r5, r6, pc}
1a000ba8:	10000004 	.word	0x10000004

1a000bac <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000bb0:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000bb2:	4e0b      	ldr	r6, [pc, #44]	; (1a000be0 <Chip_I2C_SetClockRate+0x34>)
1a000bb4:	00c5      	lsls	r5, r0, #3
1a000bb6:	1a2b      	subs	r3, r5, r0
1a000bb8:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000bbc:	eb06 0308 	add.w	r3, r6, r8
1a000bc0:	8898      	ldrh	r0, [r3, #4]
1a000bc2:	f000 fbd3 	bl	1a00136c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000bc6:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000bca:	f856 3008 	ldr.w	r3, [r6, r8]
1a000bce:	0842      	lsrs	r2, r0, #1
1a000bd0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000bd2:	f856 3008 	ldr.w	r3, [r6, r8]
1a000bd6:	691a      	ldr	r2, [r3, #16]
1a000bd8:	1a80      	subs	r0, r0, r2
1a000bda:	6158      	str	r0, [r3, #20]
}
1a000bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000be0:	10000004 	.word	0x10000004

1a000be4 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000be4:	4770      	bx	lr

1a000be6 <Chip_SCT_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize SCT */
void Chip_SCT_Init(LPC_SCT_T *pSCT)
{
1a000be6:	b508      	push	{r3, lr}
	Chip_Clock_EnableOpts(CLK_MX_SCT, true, true, 1);
1a000be8:	2301      	movs	r3, #1
1a000bea:	461a      	mov	r2, r3
1a000bec:	4619      	mov	r1, r3
1a000bee:	206d      	movs	r0, #109	; 0x6d
1a000bf0:	f000 fb84 	bl	1a0012fc <Chip_Clock_EnableOpts>
}
1a000bf4:	bd08      	pop	{r3, pc}
1a000bf6:	Address 0x1a000bf6 is out of bounds.


1a000bf8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000bf8:	4b03      	ldr	r3, [pc, #12]	; (1a000c08 <Chip_ADC_GetClockIndex+0x10>)
1a000bfa:	4298      	cmp	r0, r3
1a000bfc:	d001      	beq.n	1a000c02 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000bfe:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000c00:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000c02:	2004      	movs	r0, #4
1a000c04:	4770      	bx	lr
1a000c06:	bf00      	nop
1a000c08:	400e4000 	.word	0x400e4000

1a000c0c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000c0c:	b570      	push	{r4, r5, r6, lr}
1a000c0e:	460d      	mov	r5, r1
1a000c10:	4614      	mov	r4, r2
1a000c12:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000c14:	f7ff fff0 	bl	1a000bf8 <Chip_ADC_GetClockIndex>
1a000c18:	f000 fba8 	bl	1a00136c <Chip_Clock_GetRate>
	if (burstMode) {
1a000c1c:	b155      	cbz	r5, 1a000c34 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000c1e:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000c22:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000c26:	0064      	lsls	r4, r4, #1
1a000c28:	fbb0 f0f4 	udiv	r0, r0, r4
1a000c2c:	b2c0      	uxtb	r0, r0
1a000c2e:	3801      	subs	r0, #1
	return div;
}
1a000c30:	b2c0      	uxtb	r0, r0
1a000c32:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000c34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000c38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000c3c:	e7f1      	b.n	1a000c22 <getClkDiv+0x16>
1a000c3e:	Address 0x1a000c3e is out of bounds.


1a000c40 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000c40:	b538      	push	{r3, r4, r5, lr}
1a000c42:	4605      	mov	r5, r0
1a000c44:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000c46:	f7ff ffd7 	bl	1a000bf8 <Chip_ADC_GetClockIndex>
1a000c4a:	2301      	movs	r3, #1
1a000c4c:	461a      	mov	r2, r3
1a000c4e:	4619      	mov	r1, r3
1a000c50:	f000 fb54 	bl	1a0012fc <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000c54:	2100      	movs	r1, #0
1a000c56:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000c58:	4a08      	ldr	r2, [pc, #32]	; (1a000c7c <Chip_ADC_Init+0x3c>)
1a000c5a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000c5c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000c5e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000c60:	230b      	movs	r3, #11
1a000c62:	4628      	mov	r0, r5
1a000c64:	f7ff ffd2 	bl	1a000c0c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000c68:	0200      	lsls	r0, r0, #8
1a000c6a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000c6e:	7920      	ldrb	r0, [r4, #4]
1a000c70:	0440      	lsls	r0, r0, #17
1a000c72:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000c76:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000c78:	6028      	str	r0, [r5, #0]
}
1a000c7a:	bd38      	pop	{r3, r4, r5, pc}
1a000c7c:	00061a80 	.word	0x00061a80

1a000c80 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000c80:	b570      	push	{r4, r5, r6, lr}
1a000c82:	4605      	mov	r5, r0
1a000c84:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000c86:	6804      	ldr	r4, [r0, #0]
1a000c88:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000c8c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000c90:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000c92:	790b      	ldrb	r3, [r1, #4]
1a000c94:	f1c3 030b 	rsb	r3, r3, #11
1a000c98:	b2db      	uxtb	r3, r3
1a000c9a:	7949      	ldrb	r1, [r1, #5]
1a000c9c:	f7ff ffb6 	bl	1a000c0c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000ca0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000ca4:	7933      	ldrb	r3, [r6, #4]
1a000ca6:	045b      	lsls	r3, r3, #17
1a000ca8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000cac:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000cae:	602b      	str	r3, [r5, #0]
}
1a000cb0:	bd70      	pop	{r4, r5, r6, pc}

1a000cb2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000cb2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000cb4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000cb6:	680a      	ldr	r2, [r1, #0]
1a000cb8:	f7ff ffe2 	bl	1a000c80 <Chip_ADC_SetSampleRate>
}
1a000cbc:	bd08      	pop	{r3, pc}
1a000cbe:	Address 0x1a000cbe is out of bounds.


1a000cc0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000cc0:	b570      	push	{r4, r5, r6, lr}
1a000cc2:	b08a      	sub	sp, #40	; 0x28
1a000cc4:	4605      	mov	r5, r0
1a000cc6:	460e      	mov	r6, r1
1a000cc8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000cca:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000cce:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000cd0:	2806      	cmp	r0, #6
1a000cd2:	d018      	beq.n	1a000d06 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000cd4:	2300      	movs	r3, #0
1a000cd6:	2201      	movs	r2, #1
1a000cd8:	4629      	mov	r1, r5
1a000cda:	2004      	movs	r0, #4
1a000cdc:	f000 fac8 	bl	1a001270 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000ce0:	4a4a      	ldr	r2, [pc, #296]	; (1a000e0c <Chip_SetupCoreClock+0x14c>)
1a000ce2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000ce4:	f043 0301 	orr.w	r3, r3, #1
1a000ce8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000cea:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000cee:	a901      	add	r1, sp, #4
1a000cf0:	4630      	mov	r0, r6
1a000cf2:	f000 fa35 	bl	1a001160 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000cf6:	4b46      	ldr	r3, [pc, #280]	; (1a000e10 <Chip_SetupCoreClock+0x150>)
1a000cf8:	429e      	cmp	r6, r3
1a000cfa:	d916      	bls.n	1a000d2a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000cfc:	9b01      	ldr	r3, [sp, #4]
1a000cfe:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000d02:	d003      	beq.n	1a000d0c <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000d04:	e7fe      	b.n	1a000d04 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000d06:	f000 f98d 	bl	1a001024 <Chip_Clock_EnableCrystal>
1a000d0a:	e7e3      	b.n	1a000cd4 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000d0c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000d10:	d005      	beq.n	1a000d1e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000d16:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000d18:	2500      	movs	r5, #0
			direct = 1;
1a000d1a:	2601      	movs	r6, #1
1a000d1c:	e007      	b.n	1a000d2e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000d1e:	9b04      	ldr	r3, [sp, #16]
1a000d20:	3301      	adds	r3, #1
1a000d22:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000d24:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000d26:	2600      	movs	r6, #0
1a000d28:	e001      	b.n	1a000d2e <Chip_SetupCoreClock+0x6e>
1a000d2a:	2500      	movs	r5, #0
1a000d2c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000d2e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000d32:	9b01      	ldr	r3, [sp, #4]
1a000d34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000d38:	9a05      	ldr	r2, [sp, #20]
1a000d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000d3e:	9a03      	ldr	r2, [sp, #12]
1a000d40:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000d44:	9a04      	ldr	r2, [sp, #16]
1a000d46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000d4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000d4e:	4a2f      	ldr	r2, [pc, #188]	; (1a000e0c <Chip_SetupCoreClock+0x14c>)
1a000d50:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000d52:	4b2e      	ldr	r3, [pc, #184]	; (1a000e0c <Chip_SetupCoreClock+0x14c>)
1a000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000d56:	f013 0f01 	tst.w	r3, #1
1a000d5a:	d0fa      	beq.n	1a000d52 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000d5c:	2300      	movs	r3, #0
1a000d5e:	2201      	movs	r2, #1
1a000d60:	2109      	movs	r1, #9
1a000d62:	2004      	movs	r0, #4
1a000d64:	f000 fa84 	bl	1a001270 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000d68:	b306      	cbz	r6, 1a000dac <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000d6a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000d6e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000d72:	1e5a      	subs	r2, r3, #1
1a000d74:	9209      	str	r2, [sp, #36]	; 0x24
1a000d76:	2b00      	cmp	r3, #0
1a000d78:	d1fa      	bne.n	1a000d70 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000d7a:	9b01      	ldr	r3, [sp, #4]
1a000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000d80:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000d82:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000d86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000d8a:	9a05      	ldr	r2, [sp, #20]
1a000d8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000d90:	9a03      	ldr	r2, [sp, #12]
1a000d92:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000d96:	9a04      	ldr	r2, [sp, #16]
1a000d98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000d9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000da0:	4a1a      	ldr	r2, [pc, #104]	; (1a000e0c <Chip_SetupCoreClock+0x14c>)
1a000da2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000da4:	2c00      	cmp	r4, #0
1a000da6:	d12e      	bne.n	1a000e06 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000da8:	b00a      	add	sp, #40	; 0x28
1a000daa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000dac:	2d00      	cmp	r5, #0
1a000dae:	d0f9      	beq.n	1a000da4 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000db0:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000db4:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000db8:	1e5a      	subs	r2, r3, #1
1a000dba:	9209      	str	r2, [sp, #36]	; 0x24
1a000dbc:	2b00      	cmp	r3, #0
1a000dbe:	d1fa      	bne.n	1a000db6 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000dc0:	9b04      	ldr	r3, [sp, #16]
1a000dc2:	1e5a      	subs	r2, r3, #1
1a000dc4:	9204      	str	r2, [sp, #16]
1a000dc6:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000dca:	9b01      	ldr	r3, [sp, #4]
1a000dcc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000dd0:	9905      	ldr	r1, [sp, #20]
1a000dd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000dd6:	9903      	ldr	r1, [sp, #12]
1a000dd8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000ddc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000de4:	4a09      	ldr	r2, [pc, #36]	; (1a000e0c <Chip_SetupCoreClock+0x14c>)
1a000de6:	6453      	str	r3, [r2, #68]	; 0x44
1a000de8:	e7dc      	b.n	1a000da4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000dea:	480a      	ldr	r0, [pc, #40]	; (1a000e14 <Chip_SetupCoreClock+0x154>)
1a000dec:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000df0:	78cb      	ldrb	r3, [r1, #3]
1a000df2:	788a      	ldrb	r2, [r1, #2]
1a000df4:	7849      	ldrb	r1, [r1, #1]
1a000df6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000dfa:	f000 fa39 	bl	1a001270 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000dfe:	3401      	adds	r4, #1
1a000e00:	2c11      	cmp	r4, #17
1a000e02:	d9f2      	bls.n	1a000dea <Chip_SetupCoreClock+0x12a>
1a000e04:	e7d0      	b.n	1a000da8 <Chip_SetupCoreClock+0xe8>
1a000e06:	2400      	movs	r4, #0
1a000e08:	e7fa      	b.n	1a000e00 <Chip_SetupCoreClock+0x140>
1a000e0a:	bf00      	nop
1a000e0c:	40050000 	.word	0x40050000
1a000e10:	068e7780 	.word	0x068e7780
1a000e14:	1a004c9c 	.word	0x1a004c9c

1a000e18 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000e18:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000e1a:	2069      	movs	r0, #105	; 0x69
1a000e1c:	f000 faa6 	bl	1a00136c <Chip_Clock_GetRate>
1a000e20:	4b01      	ldr	r3, [pc, #4]	; (1a000e28 <SystemCoreClockUpdate+0x10>)
1a000e22:	6018      	str	r0, [r3, #0]
}
1a000e24:	bd08      	pop	{r3, pc}
1a000e26:	bf00      	nop
1a000e28:	100006f8 	.word	0x100006f8

1a000e2c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000e2c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000e2e:	680b      	ldr	r3, [r1, #0]
1a000e30:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000e34:	d002      	beq.n	1a000e3c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000e3a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000e3c:	4607      	mov	r7, r0
1a000e3e:	2501      	movs	r5, #1
1a000e40:	e03a      	b.n	1a000eb8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000e42:	694b      	ldr	r3, [r1, #20]
1a000e44:	fb03 f302 	mul.w	r3, r3, r2
1a000e48:	fbb3 f3f5 	udiv	r3, r3, r5
1a000e4c:	e01c      	b.n	1a000e88 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000e4e:	461c      	mov	r4, r3
	if (val < 0)
1a000e50:	ebb0 0c04 	subs.w	ip, r0, r4
1a000e54:	d427      	bmi.n	1a000ea6 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000e56:	4567      	cmp	r7, ip
1a000e58:	d906      	bls.n	1a000e68 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000e5a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000e5c:	1c77      	adds	r7, r6, #1
1a000e5e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000e60:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000e62:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000e64:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000e66:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000e68:	3201      	adds	r2, #1
1a000e6a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000e6e:	dc1d      	bgt.n	1a000eac <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000e70:	680c      	ldr	r4, [r1, #0]
1a000e72:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000e76:	d0e4      	beq.n	1a000e42 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000e78:	1c73      	adds	r3, r6, #1
1a000e7a:	fa02 fc03 	lsl.w	ip, r2, r3
1a000e7e:	694b      	ldr	r3, [r1, #20]
1a000e80:	fb03 f30c 	mul.w	r3, r3, ip
1a000e84:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000e88:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000ec4 <pll_calc_divs+0x98>
1a000e8c:	4563      	cmp	r3, ip
1a000e8e:	d9eb      	bls.n	1a000e68 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000e90:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000ec8 <pll_calc_divs+0x9c>
1a000e94:	4563      	cmp	r3, ip
1a000e96:	d809      	bhi.n	1a000eac <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000e98:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000e9c:	d1d7      	bne.n	1a000e4e <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000e9e:	1c74      	adds	r4, r6, #1
1a000ea0:	fa23 f404 	lsr.w	r4, r3, r4
1a000ea4:	e7d4      	b.n	1a000e50 <pll_calc_divs+0x24>
		return -val;
1a000ea6:	f1cc 0c00 	rsb	ip, ip, #0
1a000eaa:	e7d4      	b.n	1a000e56 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000eac:	3601      	adds	r6, #1
1a000eae:	2e03      	cmp	r6, #3
1a000eb0:	dc01      	bgt.n	1a000eb6 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000eb2:	2201      	movs	r2, #1
1a000eb4:	e7d9      	b.n	1a000e6a <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000eb6:	3501      	adds	r5, #1
1a000eb8:	2d04      	cmp	r5, #4
1a000eba:	dc01      	bgt.n	1a000ec0 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000ebc:	2600      	movs	r6, #0
1a000ebe:	e7f6      	b.n	1a000eae <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000ec0:	bcf0      	pop	{r4, r5, r6, r7}
1a000ec2:	4770      	bx	lr
1a000ec4:	094c5eff 	.word	0x094c5eff
1a000ec8:	1312d000 	.word	0x1312d000

1a000ecc <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ece:	b099      	sub	sp, #100	; 0x64
1a000ed0:	4605      	mov	r5, r0
1a000ed2:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000ed4:	225c      	movs	r2, #92	; 0x5c
1a000ed6:	2100      	movs	r1, #0
1a000ed8:	a801      	add	r0, sp, #4
1a000eda:	f001 ff87 	bl	1a002dec <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000ede:	2380      	movs	r3, #128	; 0x80
1a000ee0:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000ee2:	6963      	ldr	r3, [r4, #20]
1a000ee4:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000ee6:	7923      	ldrb	r3, [r4, #4]
1a000ee8:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000eec:	4669      	mov	r1, sp
1a000eee:	4628      	mov	r0, r5
1a000ef0:	f7ff ff9c 	bl	1a000e2c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000ef4:	9b06      	ldr	r3, [sp, #24]
1a000ef6:	42ab      	cmp	r3, r5
1a000ef8:	d027      	beq.n	1a000f4a <pll_get_frac+0x7e>
	if (val < 0)
1a000efa:	1aeb      	subs	r3, r5, r3
1a000efc:	d42e      	bmi.n	1a000f5c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000efe:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000f00:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000f06:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000f08:	6963      	ldr	r3, [r4, #20]
1a000f0a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000f0c:	7923      	ldrb	r3, [r4, #4]
1a000f0e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000f12:	a910      	add	r1, sp, #64	; 0x40
1a000f14:	4628      	mov	r0, r5
1a000f16:	f7ff ff89 	bl	1a000e2c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000f1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000f1c:	42ab      	cmp	r3, r5
1a000f1e:	d01f      	beq.n	1a000f60 <pll_get_frac+0x94>
	if (val < 0)
1a000f20:	1aeb      	subs	r3, r5, r3
1a000f22:	d425      	bmi.n	1a000f70 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000f24:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000f26:	4b2b      	ldr	r3, [pc, #172]	; (1a000fd4 <pll_get_frac+0x108>)
1a000f28:	429d      	cmp	r5, r3
1a000f2a:	d923      	bls.n	1a000f74 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000f2e:	1aed      	subs	r5, r5, r3
1a000f30:	d433      	bmi.n	1a000f9a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000f32:	42ae      	cmp	r6, r5
1a000f34:	dc3b      	bgt.n	1a000fae <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000f36:	42be      	cmp	r6, r7
1a000f38:	dc31      	bgt.n	1a000f9e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000f3a:	466d      	mov	r5, sp
1a000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000f48:	e006      	b.n	1a000f58 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000f4a:	466d      	mov	r5, sp
1a000f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000f58:	b019      	add	sp, #100	; 0x64
1a000f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000f5c:	425b      	negs	r3, r3
1a000f5e:	e7ce      	b.n	1a000efe <pll_get_frac+0x32>
		*ppll = pll[2];
1a000f60:	ad10      	add	r5, sp, #64	; 0x40
1a000f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000f6e:	e7f3      	b.n	1a000f58 <pll_get_frac+0x8c>
		return -val;
1a000f70:	425b      	negs	r3, r3
1a000f72:	e7d7      	b.n	1a000f24 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000f74:	2340      	movs	r3, #64	; 0x40
1a000f76:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000f78:	6963      	ldr	r3, [r4, #20]
1a000f7a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000f7c:	a908      	add	r1, sp, #32
1a000f7e:	4628      	mov	r0, r5
1a000f80:	f7ff ff54 	bl	1a000e2c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000f86:	42ab      	cmp	r3, r5
1a000f88:	d1d0      	bne.n	1a000f2c <pll_get_frac+0x60>
			*ppll = pll[1];
1a000f8a:	ad08      	add	r5, sp, #32
1a000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000f98:	e7de      	b.n	1a000f58 <pll_get_frac+0x8c>
		return -val;
1a000f9a:	426d      	negs	r5, r5
1a000f9c:	e7c9      	b.n	1a000f32 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000f9e:	ad10      	add	r5, sp, #64	; 0x40
1a000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fa4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000fac:	e7d4      	b.n	1a000f58 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000fae:	42af      	cmp	r7, r5
1a000fb0:	db07      	blt.n	1a000fc2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000fb2:	ad08      	add	r5, sp, #32
1a000fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000fc0:	e7ca      	b.n	1a000f58 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000fc2:	ad10      	add	r5, sp, #64	; 0x40
1a000fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000fd0:	e7c2      	b.n	1a000f58 <pll_get_frac+0x8c>
1a000fd2:	bf00      	nop
1a000fd4:	068e7780 	.word	0x068e7780

1a000fd8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000fd8:	b430      	push	{r4, r5}
1a000fda:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000fdc:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000fde:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000fe0:	e000      	b.n	1a000fe4 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000fe2:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000fe4:	281c      	cmp	r0, #28
1a000fe6:	d118      	bne.n	1a00101a <Chip_Clock_FindBaseClock+0x42>
1a000fe8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000fec:	0051      	lsls	r1, r2, #1
1a000fee:	4a0c      	ldr	r2, [pc, #48]	; (1a001020 <Chip_Clock_FindBaseClock+0x48>)
1a000ff0:	440a      	add	r2, r1
1a000ff2:	7914      	ldrb	r4, [r2, #4]
1a000ff4:	4284      	cmp	r4, r0
1a000ff6:	d010      	beq.n	1a00101a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000ff8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000ffc:	004a      	lsls	r2, r1, #1
1a000ffe:	4908      	ldr	r1, [pc, #32]	; (1a001020 <Chip_Clock_FindBaseClock+0x48>)
1a001000:	5a8a      	ldrh	r2, [r1, r2]
1a001002:	42aa      	cmp	r2, r5
1a001004:	d8ed      	bhi.n	1a000fe2 <Chip_Clock_FindBaseClock+0xa>
1a001006:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00100a:	0051      	lsls	r1, r2, #1
1a00100c:	4a04      	ldr	r2, [pc, #16]	; (1a001020 <Chip_Clock_FindBaseClock+0x48>)
1a00100e:	440a      	add	r2, r1
1a001010:	8852      	ldrh	r2, [r2, #2]
1a001012:	42aa      	cmp	r2, r5
1a001014:	d3e5      	bcc.n	1a000fe2 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001016:	4620      	mov	r0, r4
1a001018:	e7e4      	b.n	1a000fe4 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00101a:	bc30      	pop	{r4, r5}
1a00101c:	4770      	bx	lr
1a00101e:	bf00      	nop
1a001020:	1a004cf0 	.word	0x1a004cf0

1a001024 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001024:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00102a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a00102c:	4a0d      	ldr	r2, [pc, #52]	; (1a001064 <Chip_Clock_EnableCrystal+0x40>)
1a00102e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001030:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001034:	6992      	ldr	r2, [r2, #24]
1a001036:	428a      	cmp	r2, r1
1a001038:	d001      	beq.n	1a00103e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00103a:	4a0a      	ldr	r2, [pc, #40]	; (1a001064 <Chip_Clock_EnableCrystal+0x40>)
1a00103c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00103e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001042:	4a09      	ldr	r2, [pc, #36]	; (1a001068 <Chip_Clock_EnableCrystal+0x44>)
1a001044:	6811      	ldr	r1, [r2, #0]
1a001046:	4a09      	ldr	r2, [pc, #36]	; (1a00106c <Chip_Clock_EnableCrystal+0x48>)
1a001048:	4291      	cmp	r1, r2
1a00104a:	d901      	bls.n	1a001050 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a00104c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001050:	4a04      	ldr	r2, [pc, #16]	; (1a001064 <Chip_Clock_EnableCrystal+0x40>)
1a001052:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001054:	9b01      	ldr	r3, [sp, #4]
1a001056:	1e5a      	subs	r2, r3, #1
1a001058:	9201      	str	r2, [sp, #4]
1a00105a:	2b00      	cmp	r3, #0
1a00105c:	d1fa      	bne.n	1a001054 <Chip_Clock_EnableCrystal+0x30>
}
1a00105e:	b002      	add	sp, #8
1a001060:	4770      	bx	lr
1a001062:	bf00      	nop
1a001064:	40050000 	.word	0x40050000
1a001068:	1a004c98 	.word	0x1a004c98
1a00106c:	01312cff 	.word	0x01312cff

1a001070 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001070:	3012      	adds	r0, #18
1a001072:	4b05      	ldr	r3, [pc, #20]	; (1a001088 <Chip_Clock_GetDividerSource+0x18>)
1a001074:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001078:	f010 0f01 	tst.w	r0, #1
1a00107c:	d102      	bne.n	1a001084 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00107e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001082:	4770      	bx	lr
		return CLKINPUT_PD;
1a001084:	2011      	movs	r0, #17
}
1a001086:	4770      	bx	lr
1a001088:	40050000 	.word	0x40050000

1a00108c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00108c:	f100 0212 	add.w	r2, r0, #18
1a001090:	4b03      	ldr	r3, [pc, #12]	; (1a0010a0 <Chip_Clock_GetDividerDivisor+0x14>)
1a001092:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001096:	4b03      	ldr	r3, [pc, #12]	; (1a0010a4 <Chip_Clock_GetDividerDivisor+0x18>)
1a001098:	5c18      	ldrb	r0, [r3, r0]
}
1a00109a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00109e:	4770      	bx	lr
1a0010a0:	40050000 	.word	0x40050000
1a0010a4:	1a004ce8 	.word	0x1a004ce8

1a0010a8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0010a8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0010aa:	2810      	cmp	r0, #16
1a0010ac:	d80a      	bhi.n	1a0010c4 <Chip_Clock_GetClockInputHz+0x1c>
1a0010ae:	e8df f000 	tbb	[pc, r0]
1a0010b2:	0b44      	.short	0x0b44
1a0010b4:	0921180d 	.word	0x0921180d
1a0010b8:	2d2a2724 	.word	0x2d2a2724
1a0010bc:	34300909 	.word	0x34300909
1a0010c0:	3c38      	.short	0x3c38
1a0010c2:	40          	.byte	0x40
1a0010c3:	00          	.byte	0x00
	uint32_t rate = 0;
1a0010c4:	2000      	movs	r0, #0
1a0010c6:	e03a      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0010c8:	481e      	ldr	r0, [pc, #120]	; (1a001144 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0010ca:	e038      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0010cc:	4b1e      	ldr	r3, [pc, #120]	; (1a001148 <Chip_Clock_GetClockInputHz+0xa0>)
1a0010ce:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0010d2:	f003 0307 	and.w	r3, r3, #7
1a0010d6:	2b04      	cmp	r3, #4
1a0010d8:	d001      	beq.n	1a0010de <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0010da:	481c      	ldr	r0, [pc, #112]	; (1a00114c <Chip_Clock_GetClockInputHz+0xa4>)
1a0010dc:	e02f      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a0010de:	2000      	movs	r0, #0
1a0010e0:	e02d      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0010e2:	4b19      	ldr	r3, [pc, #100]	; (1a001148 <Chip_Clock_GetClockInputHz+0xa0>)
1a0010e4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0010e8:	f003 0307 	and.w	r3, r3, #7
1a0010ec:	2b04      	cmp	r3, #4
1a0010ee:	d027      	beq.n	1a001140 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0010f0:	4816      	ldr	r0, [pc, #88]	; (1a00114c <Chip_Clock_GetClockInputHz+0xa4>)
1a0010f2:	e024      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0010f4:	4b16      	ldr	r3, [pc, #88]	; (1a001150 <Chip_Clock_GetClockInputHz+0xa8>)
1a0010f6:	6818      	ldr	r0, [r3, #0]
		break;
1a0010f8:	e021      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0010fa:	4b16      	ldr	r3, [pc, #88]	; (1a001154 <Chip_Clock_GetClockInputHz+0xac>)
1a0010fc:	6818      	ldr	r0, [r3, #0]
		break;
1a0010fe:	e01e      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001100:	4b15      	ldr	r3, [pc, #84]	; (1a001158 <Chip_Clock_GetClockInputHz+0xb0>)
1a001102:	6818      	ldr	r0, [r3, #0]
		break;
1a001104:	e01b      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001106:	4b14      	ldr	r3, [pc, #80]	; (1a001158 <Chip_Clock_GetClockInputHz+0xb0>)
1a001108:	6858      	ldr	r0, [r3, #4]
		break;
1a00110a:	e018      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00110c:	f000 f868 	bl	1a0011e0 <Chip_Clock_GetMainPLLHz>
		break;
1a001110:	e015      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001112:	2100      	movs	r1, #0
1a001114:	f000 f89a 	bl	1a00124c <Chip_Clock_GetDivRate>
		break;
1a001118:	e011      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00111a:	2101      	movs	r1, #1
1a00111c:	f000 f896 	bl	1a00124c <Chip_Clock_GetDivRate>
		break;
1a001120:	e00d      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001122:	2102      	movs	r1, #2
1a001124:	f000 f892 	bl	1a00124c <Chip_Clock_GetDivRate>
		break;
1a001128:	e009      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00112a:	2103      	movs	r1, #3
1a00112c:	f000 f88e 	bl	1a00124c <Chip_Clock_GetDivRate>
		break;
1a001130:	e005      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001132:	2104      	movs	r1, #4
1a001134:	f000 f88a 	bl	1a00124c <Chip_Clock_GetDivRate>
		break;
1a001138:	e001      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a00113a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00113e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001140:	4806      	ldr	r0, [pc, #24]	; (1a00115c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001142:	e7fc      	b.n	1a00113e <Chip_Clock_GetClockInputHz+0x96>
1a001144:	00b71b00 	.word	0x00b71b00
1a001148:	40043000 	.word	0x40043000
1a00114c:	017d7840 	.word	0x017d7840
1a001150:	1a004c6c 	.word	0x1a004c6c
1a001154:	1a004c98 	.word	0x1a004c98
1a001158:	100002b8 	.word	0x100002b8
1a00115c:	02faf080 	.word	0x02faf080

1a001160 <Chip_Clock_CalcMainPLLValue>:
{
1a001160:	b538      	push	{r3, r4, r5, lr}
1a001162:	4605      	mov	r5, r0
1a001164:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001166:	7908      	ldrb	r0, [r1, #4]
1a001168:	f7ff ff9e 	bl	1a0010a8 <Chip_Clock_GetClockInputHz>
1a00116c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00116e:	4b19      	ldr	r3, [pc, #100]	; (1a0011d4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001170:	442b      	add	r3, r5
1a001172:	4a19      	ldr	r2, [pc, #100]	; (1a0011d8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001174:	4293      	cmp	r3, r2
1a001176:	d821      	bhi.n	1a0011bc <Chip_Clock_CalcMainPLLValue+0x5c>
1a001178:	b318      	cbz	r0, 1a0011c2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00117a:	2380      	movs	r3, #128	; 0x80
1a00117c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00117e:	2300      	movs	r3, #0
1a001180:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001182:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001184:	fbb5 f3f0 	udiv	r3, r5, r0
1a001188:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00118a:	4a14      	ldr	r2, [pc, #80]	; (1a0011dc <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00118c:	4295      	cmp	r5, r2
1a00118e:	d903      	bls.n	1a001198 <Chip_Clock_CalcMainPLLValue+0x38>
1a001190:	fb03 f000 	mul.w	r0, r3, r0
1a001194:	42a8      	cmp	r0, r5
1a001196:	d007      	beq.n	1a0011a8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001198:	4621      	mov	r1, r4
1a00119a:	4628      	mov	r0, r5
1a00119c:	f7ff fe96 	bl	1a000ecc <pll_get_frac>
		if (!ppll->nsel) {
1a0011a0:	68a3      	ldr	r3, [r4, #8]
1a0011a2:	b18b      	cbz	r3, 1a0011c8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0011a4:	3b01      	subs	r3, #1
1a0011a6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0011a8:	6923      	ldr	r3, [r4, #16]
1a0011aa:	b183      	cbz	r3, 1a0011ce <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0011ac:	68e2      	ldr	r2, [r4, #12]
1a0011ae:	b10a      	cbz	r2, 1a0011b4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0011b0:	3a01      	subs	r2, #1
1a0011b2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0011b4:	3b01      	subs	r3, #1
1a0011b6:	6123      	str	r3, [r4, #16]
	return 0;
1a0011b8:	2000      	movs	r0, #0
}
1a0011ba:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0011bc:	f04f 30ff 	mov.w	r0, #4294967295
1a0011c0:	e7fb      	b.n	1a0011ba <Chip_Clock_CalcMainPLLValue+0x5a>
1a0011c2:	f04f 30ff 	mov.w	r0, #4294967295
1a0011c6:	e7f8      	b.n	1a0011ba <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0011c8:	f04f 30ff 	mov.w	r0, #4294967295
1a0011cc:	e7f5      	b.n	1a0011ba <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0011ce:	f04f 30ff 	mov.w	r0, #4294967295
1a0011d2:	e7f2      	b.n	1a0011ba <Chip_Clock_CalcMainPLLValue+0x5a>
1a0011d4:	ff6b3a10 	.word	0xff6b3a10
1a0011d8:	0b940510 	.word	0x0b940510
1a0011dc:	094c5eff 	.word	0x094c5eff

1a0011e0 <Chip_Clock_GetMainPLLHz>:
{
1a0011e0:	b530      	push	{r4, r5, lr}
1a0011e2:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0011e4:	4d17      	ldr	r5, [pc, #92]	; (1a001244 <Chip_Clock_GetMainPLLHz+0x64>)
1a0011e6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0011e8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0011ec:	f7ff ff5c 	bl	1a0010a8 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0011f0:	4b15      	ldr	r3, [pc, #84]	; (1a001248 <Chip_Clock_GetMainPLLHz+0x68>)
1a0011f2:	681b      	ldr	r3, [r3, #0]
1a0011f4:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0011f6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0011f8:	f013 0f01 	tst.w	r3, #1
1a0011fc:	d020      	beq.n	1a001240 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0011fe:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001202:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001206:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00120a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00120e:	3301      	adds	r3, #1
	n = nsel + 1;
1a001210:	3201      	adds	r2, #1
	p = ptab[psel];
1a001212:	f10d 0c08 	add.w	ip, sp, #8
1a001216:	4461      	add	r1, ip
1a001218:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a00121c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001220:	d108      	bne.n	1a001234 <Chip_Clock_GetMainPLLHz+0x54>
1a001222:	b93d      	cbnz	r5, 1a001234 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001224:	0049      	lsls	r1, r1, #1
1a001226:	fbb3 f3f1 	udiv	r3, r3, r1
1a00122a:	fbb0 f0f2 	udiv	r0, r0, r2
1a00122e:	fb00 f003 	mul.w	r0, r0, r3
1a001232:	e003      	b.n	1a00123c <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001234:	fbb0 f0f2 	udiv	r0, r0, r2
1a001238:	fb03 f000 	mul.w	r0, r3, r0
}
1a00123c:	b003      	add	sp, #12
1a00123e:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001240:	2000      	movs	r0, #0
1a001242:	e7fb      	b.n	1a00123c <Chip_Clock_GetMainPLLHz+0x5c>
1a001244:	40050000 	.word	0x40050000
1a001248:	1a004ce4 	.word	0x1a004ce4

1a00124c <Chip_Clock_GetDivRate>:
{
1a00124c:	b538      	push	{r3, r4, r5, lr}
1a00124e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001250:	4608      	mov	r0, r1
1a001252:	f7ff ff0d 	bl	1a001070 <Chip_Clock_GetDividerSource>
1a001256:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001258:	4620      	mov	r0, r4
1a00125a:	f7ff ff17 	bl	1a00108c <Chip_Clock_GetDividerDivisor>
1a00125e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001260:	4628      	mov	r0, r5
1a001262:	f7ff ff21 	bl	1a0010a8 <Chip_Clock_GetClockInputHz>
1a001266:	3401      	adds	r4, #1
}
1a001268:	fbb0 f0f4 	udiv	r0, r0, r4
1a00126c:	bd38      	pop	{r3, r4, r5, pc}
1a00126e:	Address 0x1a00126e is out of bounds.


1a001270 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001270:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001272:	f100 0416 	add.w	r4, r0, #22
1a001276:	00a4      	lsls	r4, r4, #2
1a001278:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a00127c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001280:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001282:	281b      	cmp	r0, #27
1a001284:	d813      	bhi.n	1a0012ae <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001286:	2911      	cmp	r1, #17
1a001288:	d01a      	beq.n	1a0012c0 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00128a:	4d0e      	ldr	r5, [pc, #56]	; (1a0012c4 <Chip_Clock_SetBaseClock+0x54>)
1a00128c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00128e:	b10a      	cbz	r2, 1a001294 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001290:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001294:	b10b      	cbz	r3, 1a00129a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001296:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00129a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00129e:	3016      	adds	r0, #22
1a0012a0:	0080      	lsls	r0, r0, #2
1a0012a2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0012a6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0012aa:	6045      	str	r5, [r0, #4]
1a0012ac:	e008      	b.n	1a0012c0 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0012ae:	f044 0401 	orr.w	r4, r4, #1
1a0012b2:	3016      	adds	r0, #22
1a0012b4:	0080      	lsls	r0, r0, #2
1a0012b6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0012ba:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0012be:	6044      	str	r4, [r0, #4]
	}
}
1a0012c0:	bc30      	pop	{r4, r5}
1a0012c2:	4770      	bx	lr
1a0012c4:	e0fff7fe 	.word	0xe0fff7fe

1a0012c8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0012c8:	281b      	cmp	r0, #27
1a0012ca:	d80c      	bhi.n	1a0012e6 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0012cc:	3016      	adds	r0, #22
1a0012ce:	0080      	lsls	r0, r0, #2
1a0012d0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0012d4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0012d8:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0012da:	f010 0f01 	tst.w	r0, #1
1a0012de:	d104      	bne.n	1a0012ea <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0012e0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0012e4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0012e6:	2011      	movs	r0, #17
1a0012e8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0012ea:	2011      	movs	r0, #17
}
1a0012ec:	4770      	bx	lr

1a0012ee <Chip_Clock_GetBaseClocktHz>:
{
1a0012ee:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0012f0:	f7ff ffea 	bl	1a0012c8 <Chip_Clock_GetBaseClock>
1a0012f4:	f7ff fed8 	bl	1a0010a8 <Chip_Clock_GetClockInputHz>
}
1a0012f8:	bd08      	pop	{r3, pc}
1a0012fa:	Address 0x1a0012fa is out of bounds.


1a0012fc <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0012fc:	b971      	cbnz	r1, 1a00131c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0012fe:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001300:	b10a      	cbz	r2, 1a001306 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001302:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001306:	2b02      	cmp	r3, #2
1a001308:	d00a      	beq.n	1a001320 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00130a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00130e:	d30a      	bcc.n	1a001326 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001310:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001314:	4b06      	ldr	r3, [pc, #24]	; (1a001330 <Chip_Clock_EnableOpts+0x34>)
1a001316:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00131a:	4770      	bx	lr
		reg |= (1 << 1);
1a00131c:	2103      	movs	r1, #3
1a00131e:	e7ef      	b.n	1a001300 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001320:	f041 0120 	orr.w	r1, r1, #32
1a001324:	e7f1      	b.n	1a00130a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001326:	3020      	adds	r0, #32
1a001328:	4b02      	ldr	r3, [pc, #8]	; (1a001334 <Chip_Clock_EnableOpts+0x38>)
1a00132a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00132e:	4770      	bx	lr
1a001330:	40052000 	.word	0x40052000
1a001334:	40051000 	.word	0x40051000

1a001338 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001338:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00133c:	d309      	bcc.n	1a001352 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00133e:	4a09      	ldr	r2, [pc, #36]	; (1a001364 <Chip_Clock_Enable+0x2c>)
1a001340:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001344:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001348:	f043 0301 	orr.w	r3, r3, #1
1a00134c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001350:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001352:	4a05      	ldr	r2, [pc, #20]	; (1a001368 <Chip_Clock_Enable+0x30>)
1a001354:	3020      	adds	r0, #32
1a001356:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00135a:	f043 0301 	orr.w	r3, r3, #1
1a00135e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001362:	4770      	bx	lr
1a001364:	40052000 	.word	0x40052000
1a001368:	40051000 	.word	0x40051000

1a00136c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00136c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00136e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001372:	d309      	bcc.n	1a001388 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001374:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001378:	4a0d      	ldr	r2, [pc, #52]	; (1a0013b0 <Chip_Clock_GetRate+0x44>)
1a00137a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00137e:	f014 0f01 	tst.w	r4, #1
1a001382:	d107      	bne.n	1a001394 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001384:	2000      	movs	r0, #0
	}

	return rate;
}
1a001386:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001388:	f100 0320 	add.w	r3, r0, #32
1a00138c:	4a09      	ldr	r2, [pc, #36]	; (1a0013b4 <Chip_Clock_GetRate+0x48>)
1a00138e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001392:	e7f4      	b.n	1a00137e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001394:	f7ff fe20 	bl	1a000fd8 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001398:	f7ff ffa9 	bl	1a0012ee <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00139c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0013a0:	d103      	bne.n	1a0013aa <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0013a2:	2301      	movs	r3, #1
		rate = rate / div;
1a0013a4:	fbb0 f0f3 	udiv	r0, r0, r3
1a0013a8:	e7ed      	b.n	1a001386 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0013aa:	2302      	movs	r3, #2
1a0013ac:	e7fa      	b.n	1a0013a4 <Chip_Clock_GetRate+0x38>
1a0013ae:	bf00      	nop
1a0013b0:	40052000 	.word	0x40052000
1a0013b4:	40051000 	.word	0x40051000

1a0013b8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0013b8:	4b09      	ldr	r3, [pc, #36]	; (1a0013e0 <Chip_UART_GetIndex+0x28>)
1a0013ba:	4298      	cmp	r0, r3
1a0013bc:	d009      	beq.n	1a0013d2 <Chip_UART_GetIndex+0x1a>
1a0013be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0013c2:	4298      	cmp	r0, r3
1a0013c4:	d007      	beq.n	1a0013d6 <Chip_UART_GetIndex+0x1e>
1a0013c6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0013ca:	4298      	cmp	r0, r3
1a0013cc:	d005      	beq.n	1a0013da <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0013ce:	2000      	movs	r0, #0
1a0013d0:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0013d2:	2002      	movs	r0, #2
1a0013d4:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0013d6:	2003      	movs	r0, #3
1a0013d8:	4770      	bx	lr
			return 1;
1a0013da:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0013dc:	4770      	bx	lr
1a0013de:	bf00      	nop
1a0013e0:	400c1000 	.word	0x400c1000

1a0013e4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0013e4:	b530      	push	{r4, r5, lr}
1a0013e6:	b083      	sub	sp, #12
1a0013e8:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0013ea:	f7ff ffe5 	bl	1a0013b8 <Chip_UART_GetIndex>
1a0013ee:	2301      	movs	r3, #1
1a0013f0:	461a      	mov	r2, r3
1a0013f2:	4619      	mov	r1, r3
1a0013f4:	4d0e      	ldr	r5, [pc, #56]	; (1a001430 <Chip_UART_Init+0x4c>)
1a0013f6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0013fa:	f7ff ff7f 	bl	1a0012fc <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0013fe:	2307      	movs	r3, #7
1a001400:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001402:	2300      	movs	r3, #0
1a001404:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001406:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001408:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00140a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00140c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00140e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001410:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001412:	4b08      	ldr	r3, [pc, #32]	; (1a001434 <Chip_UART_Init+0x50>)
1a001414:	429c      	cmp	r4, r3
1a001416:	d006      	beq.n	1a001426 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001418:	2303      	movs	r3, #3
1a00141a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00141c:	2310      	movs	r3, #16
1a00141e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001420:	9b01      	ldr	r3, [sp, #4]
}
1a001422:	b003      	add	sp, #12
1a001424:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001426:	2300      	movs	r3, #0
1a001428:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00142a:	69a3      	ldr	r3, [r4, #24]
1a00142c:	9301      	str	r3, [sp, #4]
1a00142e:	e7f3      	b.n	1a001418 <Chip_UART_Init+0x34>
1a001430:	1a004d64 	.word	0x1a004d64
1a001434:	40082000 	.word	0x40082000

1a001438 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001438:	b538      	push	{r3, r4, r5, lr}
1a00143a:	4605      	mov	r5, r0
1a00143c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00143e:	f7ff ffbb 	bl	1a0013b8 <Chip_UART_GetIndex>
1a001442:	4b0c      	ldr	r3, [pc, #48]	; (1a001474 <Chip_UART_SetBaud+0x3c>)
1a001444:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001448:	f7ff ff90 	bl	1a00136c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a00144c:	0123      	lsls	r3, r4, #4
1a00144e:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a001452:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001454:	68ea      	ldr	r2, [r5, #12]
1a001456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00145a:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00145c:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00145e:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001462:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001464:	68ea      	ldr	r2, [r5, #12]
1a001466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00146a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00146c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001470:	0900      	lsrs	r0, r0, #4
1a001472:	bd38      	pop	{r3, r4, r5, pc}
1a001474:	1a004d5c 	.word	0x1a004d5c

1a001478 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00147c:	b083      	sub	sp, #12
1a00147e:	9001      	str	r0, [sp, #4]
1a001480:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001482:	f7ff ff99 	bl	1a0013b8 <Chip_UART_GetIndex>
1a001486:	4b32      	ldr	r3, [pc, #200]	; (1a001550 <Chip_UART_SetBaudFDR+0xd8>)
1a001488:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00148c:	f7ff ff6e 	bl	1a00136c <Chip_Clock_GetRate>
1a001490:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001492:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001496:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001498:	f04f 0b00 	mov.w	fp, #0
1a00149c:	46a2      	mov	sl, r4
1a00149e:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0014a0:	e02a      	b.n	1a0014f8 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0014a2:	4242      	negs	r2, r0
				div ++;
1a0014a4:	1c4b      	adds	r3, r1, #1
1a0014a6:	e017      	b.n	1a0014d8 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0014a8:	b30a      	cbz	r2, 1a0014ee <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0014aa:	4617      	mov	r7, r2
			sd = d;
1a0014ac:	46ab      	mov	fp, r5
			sm = m;
1a0014ae:	46a2      	mov	sl, r4
			sdiv = div;
1a0014b0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0014b2:	3501      	adds	r5, #1
1a0014b4:	42ac      	cmp	r4, r5
1a0014b6:	d91e      	bls.n	1a0014f6 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0014b8:	0933      	lsrs	r3, r6, #4
1a0014ba:	0730      	lsls	r0, r6, #28
1a0014bc:	fba4 0100 	umull	r0, r1, r4, r0
1a0014c0:	fb04 1103 	mla	r1, r4, r3, r1
1a0014c4:	1962      	adds	r2, r4, r5
1a0014c6:	fb08 f202 	mul.w	r2, r8, r2
1a0014ca:	2300      	movs	r3, #0
1a0014cc:	f001 fa9a 	bl	1a002a04 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0014d0:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0014d2:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0014d4:	2800      	cmp	r0, #0
1a0014d6:	dbe4      	blt.n	1a0014a2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0014d8:	4297      	cmp	r7, r2
1a0014da:	d3ea      	bcc.n	1a0014b2 <Chip_UART_SetBaudFDR+0x3a>
1a0014dc:	2b00      	cmp	r3, #0
1a0014de:	d0e8      	beq.n	1a0014b2 <Chip_UART_SetBaudFDR+0x3a>
1a0014e0:	0c19      	lsrs	r1, r3, #16
1a0014e2:	d1e6      	bne.n	1a0014b2 <Chip_UART_SetBaudFDR+0x3a>
1a0014e4:	2b02      	cmp	r3, #2
1a0014e6:	d8df      	bhi.n	1a0014a8 <Chip_UART_SetBaudFDR+0x30>
1a0014e8:	2d00      	cmp	r5, #0
1a0014ea:	d0dd      	beq.n	1a0014a8 <Chip_UART_SetBaudFDR+0x30>
1a0014ec:	e7e1      	b.n	1a0014b2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0014ee:	4617      	mov	r7, r2
			sd = d;
1a0014f0:	46ab      	mov	fp, r5
			sm = m;
1a0014f2:	46a2      	mov	sl, r4
			sdiv = div;
1a0014f4:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0014f6:	3401      	adds	r4, #1
1a0014f8:	b11f      	cbz	r7, 1a001502 <Chip_UART_SetBaudFDR+0x8a>
1a0014fa:	2c0f      	cmp	r4, #15
1a0014fc:	d801      	bhi.n	1a001502 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0014fe:	2500      	movs	r5, #0
1a001500:	e7d8      	b.n	1a0014b4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001502:	f1b9 0f00 	cmp.w	r9, #0
1a001506:	d01e      	beq.n	1a001546 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001508:	9a01      	ldr	r2, [sp, #4]
1a00150a:	4611      	mov	r1, r2
1a00150c:	68d3      	ldr	r3, [r2, #12]
1a00150e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001512:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a001514:	fa5f f389 	uxtb.w	r3, r9
1a001518:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a00151a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00151e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001520:	68d3      	ldr	r3, [r2, #12]
1a001522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001526:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001528:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00152c:	b2db      	uxtb	r3, r3
1a00152e:	f00b 020f 	and.w	r2, fp, #15
1a001532:	4313      	orrs	r3, r2
1a001534:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001536:	0933      	lsrs	r3, r6, #4
1a001538:	fb0a f303 	mul.w	r3, sl, r3
1a00153c:	44da      	add	sl, fp
1a00153e:	fb09 f90a 	mul.w	r9, r9, sl
1a001542:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001546:	4648      	mov	r0, r9
1a001548:	b003      	add	sp, #12
1a00154a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00154e:	bf00      	nop
1a001550:	1a004d5c 	.word	0x1a004d5c

1a001554 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001554:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001556:	4a0b      	ldr	r2, [pc, #44]	; (1a001584 <SystemInit+0x30>)
1a001558:	4b0b      	ldr	r3, [pc, #44]	; (1a001588 <SystemInit+0x34>)
1a00155a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00155c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001560:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001562:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001566:	2b20      	cmp	r3, #32
1a001568:	d004      	beq.n	1a001574 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00156a:	f7ff f97f 	bl	1a00086c <Board_SystemInit>
   Board_Init();
1a00156e:	f7ff fa3d 	bl	1a0009ec <Board_Init>
}
1a001572:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001574:	4a04      	ldr	r2, [pc, #16]	; (1a001588 <SystemInit+0x34>)
1a001576:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00157a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00157e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001582:	e7f2      	b.n	1a00156a <SystemInit+0x16>
1a001584:	1a000000 	.word	0x1a000000
1a001588:	e000ed00 	.word	0xe000ed00

1a00158c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00158c:	4b04      	ldr	r3, [pc, #16]	; (1a0015a0 <cyclesCounterInit+0x14>)
1a00158e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001590:	4a04      	ldr	r2, [pc, #16]	; (1a0015a4 <cyclesCounterInit+0x18>)
1a001592:	6813      	ldr	r3, [r2, #0]
1a001594:	f043 0301 	orr.w	r3, r3, #1
1a001598:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00159a:	2001      	movs	r0, #1
1a00159c:	4770      	bx	lr
1a00159e:	bf00      	nop
1a0015a0:	1000003c 	.word	0x1000003c
1a0015a4:	e0001000 	.word	0xe0001000

1a0015a8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0015a8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0015aa:	4d0b      	ldr	r5, [pc, #44]	; (1a0015d8 <gpioObtainPinInit+0x30>)
1a0015ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0015b0:	182c      	adds	r4, r5, r0
1a0015b2:	5628      	ldrsb	r0, [r5, r0]
1a0015b4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0015b6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0015ba:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0015bc:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0015c0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0015c2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0015c6:	9b02      	ldr	r3, [sp, #8]
1a0015c8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0015ca:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0015ce:	9b03      	ldr	r3, [sp, #12]
1a0015d0:	701a      	strb	r2, [r3, #0]
}
1a0015d2:	bc30      	pop	{r4, r5}
1a0015d4:	4770      	bx	lr
1a0015d6:	bf00      	nop
1a0015d8:	1a004d6c 	.word	0x1a004d6c

1a0015dc <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0015dc:	f110 0f02 	cmn.w	r0, #2
1a0015e0:	f000 80c7 	beq.w	1a001772 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0015e4:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0015e8:	f000 80c5 	beq.w	1a001776 <gpioInit+0x19a>
{
1a0015ec:	b570      	push	{r4, r5, r6, lr}
1a0015ee:	b084      	sub	sp, #16
1a0015f0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0015f2:	2300      	movs	r3, #0
1a0015f4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0015f8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0015fc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001600:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001604:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001608:	f10d 030b 	add.w	r3, sp, #11
1a00160c:	9301      	str	r3, [sp, #4]
1a00160e:	ab03      	add	r3, sp, #12
1a001610:	9300      	str	r3, [sp, #0]
1a001612:	f10d 030d 	add.w	r3, sp, #13
1a001616:	f10d 020e 	add.w	r2, sp, #14
1a00161a:	f10d 010f 	add.w	r1, sp, #15
1a00161e:	f7ff ffc3 	bl	1a0015a8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001622:	2c05      	cmp	r4, #5
1a001624:	f200 80a9 	bhi.w	1a00177a <gpioInit+0x19e>
1a001628:	e8df f004 	tbb	[pc, r4]
1a00162c:	45278109 	.word	0x45278109
1a001630:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001632:	4853      	ldr	r0, [pc, #332]	; (1a001780 <gpioInit+0x1a4>)
1a001634:	f7ff fad6 	bl	1a000be4 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001638:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00163a:	b004      	add	sp, #16
1a00163c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00163e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001642:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001646:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00164a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00164e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001652:	494c      	ldr	r1, [pc, #304]	; (1a001784 <gpioInit+0x1a8>)
1a001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001658:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00165c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001660:	2001      	movs	r0, #1
1a001662:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001666:	4c46      	ldr	r4, [pc, #280]	; (1a001780 <gpioInit+0x1a4>)
1a001668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00166c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001670:	ea22 0201 	bic.w	r2, r2, r1
1a001674:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001678:	e7df      	b.n	1a00163a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00167a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00167e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001682:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001686:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00168a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00168e:	493d      	ldr	r1, [pc, #244]	; (1a001784 <gpioInit+0x1a8>)
1a001690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001694:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001698:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00169c:	2001      	movs	r0, #1
1a00169e:	fa00 f102 	lsl.w	r1, r0, r2
1a0016a2:	4c37      	ldr	r4, [pc, #220]	; (1a001780 <gpioInit+0x1a4>)
1a0016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0016a8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0016ac:	ea22 0201 	bic.w	r2, r2, r1
1a0016b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0016b4:	e7c1      	b.n	1a00163a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0016b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0016ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0016be:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0016c2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0016c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0016ca:	492e      	ldr	r1, [pc, #184]	; (1a001784 <gpioInit+0x1a8>)
1a0016cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0016d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0016d4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0016d8:	2001      	movs	r0, #1
1a0016da:	fa00 f102 	lsl.w	r1, r0, r2
1a0016de:	4c28      	ldr	r4, [pc, #160]	; (1a001780 <gpioInit+0x1a4>)
1a0016e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0016e4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0016e8:	ea22 0201 	bic.w	r2, r2, r1
1a0016ec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0016f0:	e7a3      	b.n	1a00163a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0016f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0016f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0016fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0016fe:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001702:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001706:	491f      	ldr	r1, [pc, #124]	; (1a001784 <gpioInit+0x1a8>)
1a001708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00170c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001710:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001714:	2001      	movs	r0, #1
1a001716:	fa00 f102 	lsl.w	r1, r0, r2
1a00171a:	4c19      	ldr	r4, [pc, #100]	; (1a001780 <gpioInit+0x1a4>)
1a00171c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001720:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001724:	ea22 0201 	bic.w	r2, r2, r1
1a001728:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00172c:	e785      	b.n	1a00163a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00172e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001732:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001736:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00173a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00173e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001742:	4910      	ldr	r1, [pc, #64]	; (1a001784 <gpioInit+0x1a8>)
1a001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001748:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00174c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001750:	2001      	movs	r0, #1
1a001752:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001756:	4b0a      	ldr	r3, [pc, #40]	; (1a001780 <gpioInit+0x1a4>)
1a001758:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00175c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001760:	4331      	orrs	r1, r6
1a001762:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001766:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001768:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00176c:	2100      	movs	r1, #0
1a00176e:	5499      	strb	r1, [r3, r2]
1a001770:	e763      	b.n	1a00163a <gpioInit+0x5e>
	  return FALSE;
1a001772:	2000      	movs	r0, #0
1a001774:	4770      	bx	lr
	  return FALSE;
1a001776:	2000      	movs	r0, #0
}
1a001778:	4770      	bx	lr
      ret_val = 0;
1a00177a:	2000      	movs	r0, #0
1a00177c:	e75d      	b.n	1a00163a <gpioInit+0x5e>
1a00177e:	bf00      	nop
1a001780:	400f4000 	.word	0x400f4000
1a001784:	40086000 	.word	0x40086000

1a001788 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001788:	f110 0f02 	cmn.w	r0, #2
1a00178c:	d02d      	beq.n	1a0017ea <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00178e:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001792:	d02c      	beq.n	1a0017ee <gpioWrite+0x66>
{
1a001794:	b510      	push	{r4, lr}
1a001796:	b084      	sub	sp, #16
1a001798:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00179a:	2300      	movs	r3, #0
1a00179c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0017a0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0017a4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0017a8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0017ac:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0017b0:	f10d 030b 	add.w	r3, sp, #11
1a0017b4:	9301      	str	r3, [sp, #4]
1a0017b6:	ab03      	add	r3, sp, #12
1a0017b8:	9300      	str	r3, [sp, #0]
1a0017ba:	f10d 030d 	add.w	r3, sp, #13
1a0017be:	f10d 020e 	add.w	r2, sp, #14
1a0017c2:	f10d 010f 	add.w	r1, sp, #15
1a0017c6:	f7ff feef 	bl	1a0015a8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0017ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0017d2:	1c21      	adds	r1, r4, #0
1a0017d4:	bf18      	it	ne
1a0017d6:	2101      	movne	r1, #1
1a0017d8:	015b      	lsls	r3, r3, #5
1a0017da:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0017de:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0017e2:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0017e4:	2001      	movs	r0, #1
}
1a0017e6:	b004      	add	sp, #16
1a0017e8:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0017ea:	2000      	movs	r0, #0
1a0017ec:	4770      	bx	lr
	  return FALSE;
1a0017ee:	2000      	movs	r0, #0
}
1a0017f0:	4770      	bx	lr

1a0017f2 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0017f2:	e7fe      	b.n	1a0017f2 <errorOcurred>

1a0017f4 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a0017f4:	4770      	bx	lr
1a0017f6:	Address 0x1a0017f6 is out of bounds.


1a0017f8 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0017f8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0017fa:	2400      	movs	r4, #0
1a0017fc:	e001      	b.n	1a001802 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0017fe:	3401      	adds	r4, #1
1a001800:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001802:	2c03      	cmp	r4, #3
1a001804:	d812      	bhi.n	1a00182c <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a001806:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001808:	4b09      	ldr	r3, [pc, #36]	; (1a001830 <TIMER0_IRQHandler+0x38>)
1a00180a:	681a      	ldr	r2, [r3, #0]
1a00180c:	f004 010f 	and.w	r1, r4, #15
1a001810:	2301      	movs	r3, #1
1a001812:	408b      	lsls	r3, r1
1a001814:	421a      	tst	r2, r3
1a001816:	d0f2      	beq.n	1a0017fe <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001818:	4b06      	ldr	r3, [pc, #24]	; (1a001834 <TIMER0_IRQHandler+0x3c>)
1a00181a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00181e:	2000      	movs	r0, #0
1a001820:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001822:	2301      	movs	r3, #1
1a001824:	40ab      	lsls	r3, r5
1a001826:	4a02      	ldr	r2, [pc, #8]	; (1a001830 <TIMER0_IRQHandler+0x38>)
1a001828:	6013      	str	r3, [r2, #0]
1a00182a:	e7e8      	b.n	1a0017fe <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00182c:	bd38      	pop	{r3, r4, r5, pc}
1a00182e:	bf00      	nop
1a001830:	40084000 	.word	0x40084000
1a001834:	10000040 	.word	0x10000040

1a001838 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001838:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00183a:	2400      	movs	r4, #0
1a00183c:	e001      	b.n	1a001842 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00183e:	3401      	adds	r4, #1
1a001840:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001842:	2c03      	cmp	r4, #3
1a001844:	d813      	bhi.n	1a00186e <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a001846:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001848:	4b09      	ldr	r3, [pc, #36]	; (1a001870 <TIMER1_IRQHandler+0x38>)
1a00184a:	681a      	ldr	r2, [r3, #0]
1a00184c:	f004 010f 	and.w	r1, r4, #15
1a001850:	2301      	movs	r3, #1
1a001852:	408b      	lsls	r3, r1
1a001854:	421a      	tst	r2, r3
1a001856:	d0f2      	beq.n	1a00183e <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001858:	1d23      	adds	r3, r4, #4
1a00185a:	4a06      	ldr	r2, [pc, #24]	; (1a001874 <TIMER1_IRQHandler+0x3c>)
1a00185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001860:	2000      	movs	r0, #0
1a001862:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001864:	2301      	movs	r3, #1
1a001866:	40ab      	lsls	r3, r5
1a001868:	4a01      	ldr	r2, [pc, #4]	; (1a001870 <TIMER1_IRQHandler+0x38>)
1a00186a:	6013      	str	r3, [r2, #0]
1a00186c:	e7e7      	b.n	1a00183e <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00186e:	bd38      	pop	{r3, r4, r5, pc}
1a001870:	40085000 	.word	0x40085000
1a001874:	10000040 	.word	0x10000040

1a001878 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001878:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00187a:	2400      	movs	r4, #0
1a00187c:	e001      	b.n	1a001882 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00187e:	3401      	adds	r4, #1
1a001880:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001882:	2c03      	cmp	r4, #3
1a001884:	d814      	bhi.n	1a0018b0 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001886:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001888:	4b0a      	ldr	r3, [pc, #40]	; (1a0018b4 <TIMER2_IRQHandler+0x3c>)
1a00188a:	681a      	ldr	r2, [r3, #0]
1a00188c:	f004 010f 	and.w	r1, r4, #15
1a001890:	2301      	movs	r3, #1
1a001892:	408b      	lsls	r3, r1
1a001894:	421a      	tst	r2, r3
1a001896:	d0f2      	beq.n	1a00187e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001898:	f104 0308 	add.w	r3, r4, #8
1a00189c:	4a06      	ldr	r2, [pc, #24]	; (1a0018b8 <TIMER2_IRQHandler+0x40>)
1a00189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0018a2:	2000      	movs	r0, #0
1a0018a4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018a6:	2301      	movs	r3, #1
1a0018a8:	40ab      	lsls	r3, r5
1a0018aa:	4a02      	ldr	r2, [pc, #8]	; (1a0018b4 <TIMER2_IRQHandler+0x3c>)
1a0018ac:	6013      	str	r3, [r2, #0]
1a0018ae:	e7e6      	b.n	1a00187e <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0018b0:	bd38      	pop	{r3, r4, r5, pc}
1a0018b2:	bf00      	nop
1a0018b4:	400c3000 	.word	0x400c3000
1a0018b8:	10000040 	.word	0x10000040

1a0018bc <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0018bc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018be:	2400      	movs	r4, #0
1a0018c0:	e001      	b.n	1a0018c6 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0018c2:	3401      	adds	r4, #1
1a0018c4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018c6:	2c03      	cmp	r4, #3
1a0018c8:	d814      	bhi.n	1a0018f4 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0018ca:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0018cc:	4b0a      	ldr	r3, [pc, #40]	; (1a0018f8 <TIMER3_IRQHandler+0x3c>)
1a0018ce:	681a      	ldr	r2, [r3, #0]
1a0018d0:	f004 010f 	and.w	r1, r4, #15
1a0018d4:	2301      	movs	r3, #1
1a0018d6:	408b      	lsls	r3, r1
1a0018d8:	421a      	tst	r2, r3
1a0018da:	d0f2      	beq.n	1a0018c2 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0018dc:	f104 030c 	add.w	r3, r4, #12
1a0018e0:	4a06      	ldr	r2, [pc, #24]	; (1a0018fc <TIMER3_IRQHandler+0x40>)
1a0018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0018e6:	2000      	movs	r0, #0
1a0018e8:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018ea:	2301      	movs	r3, #1
1a0018ec:	40ab      	lsls	r3, r5
1a0018ee:	4a02      	ldr	r2, [pc, #8]	; (1a0018f8 <TIMER3_IRQHandler+0x3c>)
1a0018f0:	6013      	str	r3, [r2, #0]
1a0018f2:	e7e6      	b.n	1a0018c2 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0018f4:	bd38      	pop	{r3, r4, r5, pc}
1a0018f6:	bf00      	nop
1a0018f8:	400c4000 	.word	0x400c4000
1a0018fc:	10000040 	.word	0x10000040

1a001900 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001900:	4b01      	ldr	r3, [pc, #4]	; (1a001908 <tickRead+0x8>)
1a001902:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001906:	4770      	bx	lr
1a001908:	100002c8 	.word	0x100002c8

1a00190c <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a00190c:	b118      	cbz	r0, 1a001916 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00190e:	4b04      	ldr	r3, [pc, #16]	; (1a001920 <tickPowerSet+0x14>)
1a001910:	2207      	movs	r2, #7
1a001912:	601a      	str	r2, [r3, #0]
1a001914:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001916:	4b02      	ldr	r3, [pc, #8]	; (1a001920 <tickPowerSet+0x14>)
1a001918:	2200      	movs	r2, #0
1a00191a:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a00191c:	4770      	bx	lr
1a00191e:	bf00      	nop
1a001920:	e000e010 	.word	0xe000e010

1a001924 <tickInit>:
{
1a001924:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001926:	ea50 0401 	orrs.w	r4, r0, r1
1a00192a:	d02a      	beq.n	1a001982 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a00192c:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001930:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001934:	2b00      	cmp	r3, #0
1a001936:	bf08      	it	eq
1a001938:	2a32      	cmpeq	r2, #50	; 0x32
1a00193a:	d227      	bcs.n	1a00198c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a00193c:	4b14      	ldr	r3, [pc, #80]	; (1a001990 <tickInit+0x6c>)
1a00193e:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001942:	4b14      	ldr	r3, [pc, #80]	; (1a001994 <tickInit+0x70>)
1a001944:	681b      	ldr	r3, [r3, #0]
1a001946:	fba3 4500 	umull	r4, r5, r3, r0
1a00194a:	fb03 5501 	mla	r5, r3, r1, r5
1a00194e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001952:	2300      	movs	r3, #0
1a001954:	4620      	mov	r0, r4
1a001956:	4629      	mov	r1, r5
1a001958:	f001 f854 	bl	1a002a04 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a00195c:	3801      	subs	r0, #1
1a00195e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001962:	d209      	bcs.n	1a001978 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001964:	4b0c      	ldr	r3, [pc, #48]	; (1a001998 <tickInit+0x74>)
1a001966:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001968:	4a0c      	ldr	r2, [pc, #48]	; (1a00199c <tickInit+0x78>)
1a00196a:	21e0      	movs	r1, #224	; 0xe0
1a00196c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001970:	2200      	movs	r2, #0
1a001972:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001974:	2207      	movs	r2, #7
1a001976:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001978:	2001      	movs	r0, #1
1a00197a:	f7ff ffc7 	bl	1a00190c <tickPowerSet>
      bool_t ret_val = 1;
1a00197e:	2001      	movs	r0, #1
}
1a001980:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001982:	2000      	movs	r0, #0
1a001984:	f7ff ffc2 	bl	1a00190c <tickPowerSet>
         ret_val = 0;
1a001988:	2000      	movs	r0, #0
1a00198a:	e7f9      	b.n	1a001980 <tickInit+0x5c>
            ret_val = 0;
1a00198c:	2000      	movs	r0, #0
1a00198e:	e7f7      	b.n	1a001980 <tickInit+0x5c>
1a001990:	10000080 	.word	0x10000080
1a001994:	100006f8 	.word	0x100006f8
1a001998:	e000e010 	.word	0xe000e010
1a00199c:	e000ed00 	.word	0xe000ed00

1a0019a0 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0019a0:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0019a2:	4a07      	ldr	r2, [pc, #28]	; (1a0019c0 <SysTick_Handler+0x20>)
1a0019a4:	6813      	ldr	r3, [r2, #0]
1a0019a6:	6851      	ldr	r1, [r2, #4]
1a0019a8:	3301      	adds	r3, #1
1a0019aa:	f141 0100 	adc.w	r1, r1, #0
1a0019ae:	6013      	str	r3, [r2, #0]
1a0019b0:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0019b2:	4b04      	ldr	r3, [pc, #16]	; (1a0019c4 <SysTick_Handler+0x24>)
1a0019b4:	681b      	ldr	r3, [r3, #0]
1a0019b6:	b113      	cbz	r3, 1a0019be <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0019b8:	4a03      	ldr	r2, [pc, #12]	; (1a0019c8 <SysTick_Handler+0x28>)
1a0019ba:	6810      	ldr	r0, [r2, #0]
1a0019bc:	4798      	blx	r3
   }
}
1a0019be:	bd08      	pop	{r3, pc}
1a0019c0:	100002c8 	.word	0x100002c8
1a0019c4:	100002d0 	.word	0x100002d0
1a0019c8:	100002c0 	.word	0x100002c0

1a0019cc <pwmInitTimers>:
 * @Brief:   Initializes the pwm timers.
 * @param   none
 * @return   nothing
 */
static void pwmInitTimers(void)
{
1a0019cc:	b508      	push	{r3, lr}
   Sct_Init(PWM_FREC);
1a0019ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0019d2:	f000 f9f4 	bl	1a001dbe <Sct_Init>
}
1a0019d6:	bd08      	pop	{r3, pc}

1a0019d8 <pwmIsAttached>:
 * @param:   pwmNumber:   ID of the pwm, from 0 to 10
 * @return:   position (1 ~ PWM_TOTALNUMBER), 0 if the element was not found.
 */
uint8_t pwmIsAttached( pwmMap_t pwmNumber )
{
   uint8_t position = 0, positionInList = 0;
1a0019d8:	2300      	movs	r3, #0
   while ( (position < PWM_TOTALNUMBER) &&
1a0019da:	2b0a      	cmp	r3, #10
1a0019dc:	d806      	bhi.n	1a0019ec <pwmIsAttached+0x14>
           (pwmNumber != AttachedPWMList[position]) ) {
1a0019de:	4a07      	ldr	r2, [pc, #28]	; (1a0019fc <pwmIsAttached+0x24>)
1a0019e0:	5cd2      	ldrb	r2, [r2, r3]
   while ( (position < PWM_TOTALNUMBER) &&
1a0019e2:	4282      	cmp	r2, r0
1a0019e4:	d002      	beq.n	1a0019ec <pwmIsAttached+0x14>
      position++;
1a0019e6:	3301      	adds	r3, #1
1a0019e8:	b2db      	uxtb	r3, r3
1a0019ea:	e7f6      	b.n	1a0019da <pwmIsAttached+0x2>
   }

   if (position < PWM_TOTALNUMBER) {
1a0019ec:	2b0a      	cmp	r3, #10
1a0019ee:	d802      	bhi.n	1a0019f6 <pwmIsAttached+0x1e>
      positionInList = position + 1;
1a0019f0:	1c58      	adds	r0, r3, #1
1a0019f2:	b2c0      	uxtb	r0, r0
1a0019f4:	4770      	bx	lr
   } else {
      positionInList = 0;
1a0019f6:	2000      	movs	r0, #0
   }

   return positionInList;
}
1a0019f8:	4770      	bx	lr
1a0019fa:	bf00      	nop
1a0019fc:	10000088 	.word	0x10000088

1a001a00 <pwmWrite>:
{
1a001a00:	b538      	push	{r3, r4, r5, lr}
1a001a02:	4604      	mov	r4, r0
1a001a04:	460d      	mov	r5, r1
   position = pwmIsAttached(pwmNumber);
1a001a06:	f7ff ffe7 	bl	1a0019d8 <pwmIsAttached>
   if(position) {
1a001a0a:	b908      	cbnz	r0, 1a001a10 <pwmWrite+0x10>
   bool_t success = FALSE;
1a001a0c:	2000      	movs	r0, #0
}
1a001a0e:	bd38      	pop	{r3, r4, r5, pc}
      Sct_SetDutyCycle(pwmMap[pwmNumber], value);
1a001a10:	4629      	mov	r1, r5
1a001a12:	4b03      	ldr	r3, [pc, #12]	; (1a001a20 <pwmWrite+0x20>)
1a001a14:	5d18      	ldrb	r0, [r3, r4]
1a001a16:	f000 f9f3 	bl	1a001e00 <Sct_SetDutyCycle>
      success = TRUE;
1a001a1a:	2001      	movs	r0, #1
1a001a1c:	e7f7      	b.n	1a001a0e <pwmWrite+0xe>
1a001a1e:	bf00      	nop
1a001a20:	1a004e54 	.word	0x1a004e54

1a001a24 <pwmAttach>:
{
1a001a24:	b510      	push	{r4, lr}
1a001a26:	4604      	mov	r4, r0
   position = pwmIsAttached(pwmNumber);
1a001a28:	f7ff ffd6 	bl	1a0019d8 <pwmIsAttached>
   if(position==0) {
1a001a2c:	b970      	cbnz	r0, 1a001a4c <pwmAttach+0x28>
      position = pwmIsAttached(EMPTY_POSITION); /* Searches for the first empty position */
1a001a2e:	20ff      	movs	r0, #255	; 0xff
1a001a30:	f7ff ffd2 	bl	1a0019d8 <pwmIsAttached>
      if(position) { /* if position==0 => there is no room in the list for another pwm */
1a001a34:	b908      	cbnz	r0, 1a001a3a <pwmAttach+0x16>
   bool_t success = FALSE;
1a001a36:	2000      	movs	r0, #0
1a001a38:	e009      	b.n	1a001a4e <pwmAttach+0x2a>
         AttachedPWMList[position-1] = pwmNumber;
1a001a3a:	1e43      	subs	r3, r0, #1
1a001a3c:	4a04      	ldr	r2, [pc, #16]	; (1a001a50 <pwmAttach+0x2c>)
1a001a3e:	54d4      	strb	r4, [r2, r3]
         Sct_EnablePwmFor(pwmMap[pwmNumber]);
1a001a40:	4b04      	ldr	r3, [pc, #16]	; (1a001a54 <pwmAttach+0x30>)
1a001a42:	5d18      	ldrb	r0, [r3, r4]
1a001a44:	f000 f9e8 	bl	1a001e18 <Sct_EnablePwmFor>
         success = TRUE;
1a001a48:	2001      	movs	r0, #1
1a001a4a:	e000      	b.n	1a001a4e <pwmAttach+0x2a>
   bool_t success = FALSE;
1a001a4c:	2000      	movs	r0, #0
}
1a001a4e:	bd10      	pop	{r4, pc}
1a001a50:	10000088 	.word	0x10000088
1a001a54:	1a004e54 	.word	0x1a004e54

1a001a58 <pwmDetach>:
{
1a001a58:	b508      	push	{r3, lr}
   position = pwmIsAttached(pwmNumber);
1a001a5a:	f7ff ffbd 	bl	1a0019d8 <pwmIsAttached>
   if(position) {
1a001a5e:	b128      	cbz	r0, 1a001a6c <pwmDetach+0x14>
      AttachedPWMList[position-1] = EMPTY_POSITION;
1a001a60:	1e43      	subs	r3, r0, #1
1a001a62:	4a03      	ldr	r2, [pc, #12]	; (1a001a70 <pwmDetach+0x18>)
1a001a64:	21ff      	movs	r1, #255	; 0xff
1a001a66:	54d1      	strb	r1, [r2, r3]
      success = TRUE;
1a001a68:	2001      	movs	r0, #1
1a001a6a:	e000      	b.n	1a001a6e <pwmDetach+0x16>
   bool_t success = FALSE;
1a001a6c:	2000      	movs	r0, #0
}
1a001a6e:	bd08      	pop	{r3, pc}
1a001a70:	10000088 	.word	0x10000088

1a001a74 <pwmInit>:
{
1a001a74:	b508      	push	{r3, lr}
   switch(config) {
1a001a76:	2902      	cmp	r1, #2
1a001a78:	d008      	beq.n	1a001a8c <pwmInit+0x18>
1a001a7a:	2903      	cmp	r1, #3
1a001a7c:	d009      	beq.n	1a001a92 <pwmInit+0x1e>
1a001a7e:	b109      	cbz	r1, 1a001a84 <pwmInit+0x10>
      ret_val = 0;
1a001a80:	2000      	movs	r0, #0
}
1a001a82:	bd08      	pop	{r3, pc}
      pwmInitTimers();
1a001a84:	f7ff ffa2 	bl	1a0019cc <pwmInitTimers>
   bool_t ret_val = 1;
1a001a88:	2001      	movs	r0, #1
      break;
1a001a8a:	e7fa      	b.n	1a001a82 <pwmInit+0xe>
      ret_val = pwmAttach( pwmNumber );
1a001a8c:	f7ff ffca 	bl	1a001a24 <pwmAttach>
      break;
1a001a90:	e7f7      	b.n	1a001a82 <pwmInit+0xe>
      ret_val = pwmDetach( pwmNumber );
1a001a92:	f7ff ffe1 	bl	1a001a58 <pwmDetach>
      break;
1a001a96:	e7f4      	b.n	1a001a82 <pwmInit+0xe>

1a001a98 <uartProcessIRQ>:
{
1a001a98:	b570      	push	{r4, r5, r6, lr}
1a001a9a:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a001a9c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a001aa0:	0093      	lsls	r3, r2, #2
1a001aa2:	4a1f      	ldr	r2, [pc, #124]	; (1a001b20 <uartProcessIRQ+0x88>)
1a001aa4:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001aa6:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a001aa8:	b2ed      	uxtb	r5, r5
1a001aaa:	f015 0f01 	tst.w	r5, #1
1a001aae:	d009      	beq.n	1a001ac4 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a001ab0:	b920      	cbnz	r0, 1a001abc <uartProcessIRQ+0x24>
1a001ab2:	4b1c      	ldr	r3, [pc, #112]	; (1a001b24 <uartProcessIRQ+0x8c>)
1a001ab4:	681b      	ldr	r3, [r3, #0]
1a001ab6:	b10b      	cbz	r3, 1a001abc <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a001ab8:	2000      	movs	r0, #0
1a001aba:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001abc:	2c03      	cmp	r4, #3
1a001abe:	d013      	beq.n	1a001ae8 <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001ac0:	2c05      	cmp	r4, #5
1a001ac2:	d018      	beq.n	1a001af6 <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a001ac4:	f015 0f20 	tst.w	r5, #32
1a001ac8:	d00d      	beq.n	1a001ae6 <uartProcessIRQ+0x4e>
	return pUART->IER;
1a001aca:	6873      	ldr	r3, [r6, #4]
1a001acc:	f013 0f02 	tst.w	r3, #2
1a001ad0:	d009      	beq.n	1a001ae6 <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a001ad2:	b924      	cbnz	r4, 1a001ade <uartProcessIRQ+0x46>
1a001ad4:	4b14      	ldr	r3, [pc, #80]	; (1a001b28 <uartProcessIRQ+0x90>)
1a001ad6:	681b      	ldr	r3, [r3, #0]
1a001ad8:	b10b      	cbz	r3, 1a001ade <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a001ada:	2000      	movs	r0, #0
1a001adc:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001ade:	2c03      	cmp	r4, #3
1a001ae0:	d010      	beq.n	1a001b04 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001ae2:	2c05      	cmp	r4, #5
1a001ae4:	d015      	beq.n	1a001b12 <uartProcessIRQ+0x7a>
}
1a001ae6:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001ae8:	4b10      	ldr	r3, [pc, #64]	; (1a001b2c <uartProcessIRQ+0x94>)
1a001aea:	681b      	ldr	r3, [r3, #0]
1a001aec:	2b00      	cmp	r3, #0
1a001aee:	d0e7      	beq.n	1a001ac0 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a001af0:	2000      	movs	r0, #0
1a001af2:	4798      	blx	r3
1a001af4:	e7e4      	b.n	1a001ac0 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001af6:	4b0e      	ldr	r3, [pc, #56]	; (1a001b30 <uartProcessIRQ+0x98>)
1a001af8:	681b      	ldr	r3, [r3, #0]
1a001afa:	2b00      	cmp	r3, #0
1a001afc:	d0e2      	beq.n	1a001ac4 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a001afe:	2000      	movs	r0, #0
1a001b00:	4798      	blx	r3
1a001b02:	e7df      	b.n	1a001ac4 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001b04:	4b0b      	ldr	r3, [pc, #44]	; (1a001b34 <uartProcessIRQ+0x9c>)
1a001b06:	681b      	ldr	r3, [r3, #0]
1a001b08:	2b00      	cmp	r3, #0
1a001b0a:	d0ea      	beq.n	1a001ae2 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a001b0c:	2000      	movs	r0, #0
1a001b0e:	4798      	blx	r3
1a001b10:	e7e7      	b.n	1a001ae2 <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001b12:	4b09      	ldr	r3, [pc, #36]	; (1a001b38 <uartProcessIRQ+0xa0>)
1a001b14:	681b      	ldr	r3, [r3, #0]
1a001b16:	2b00      	cmp	r3, #0
1a001b18:	d0e5      	beq.n	1a001ae6 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a001b1a:	2000      	movs	r0, #0
1a001b1c:	4798      	blx	r3
}
1a001b1e:	e7e2      	b.n	1a001ae6 <uartProcessIRQ+0x4e>
1a001b20:	1a004e60 	.word	0x1a004e60
1a001b24:	100002d4 	.word	0x100002d4
1a001b28:	100002e0 	.word	0x100002e0
1a001b2c:	100002d8 	.word	0x100002d8
1a001b30:	100002dc 	.word	0x100002dc
1a001b34:	100002e4 	.word	0x100002e4
1a001b38:	100002e8 	.word	0x100002e8

1a001b3c <uartInterrupt>:
   if( enable ) {
1a001b3c:	b341      	cbz	r1, 1a001b90 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a001b3e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a001b42:	009a      	lsls	r2, r3, #2
1a001b44:	4b1e      	ldr	r3, [pc, #120]	; (1a001bc0 <uartInterrupt+0x84>)
1a001b46:	4413      	add	r3, r2
1a001b48:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001b4c:	2b00      	cmp	r3, #0
1a001b4e:	db18      	blt.n	1a001b82 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001b50:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a001b54:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a001b58:	22a0      	movs	r2, #160	; 0xa0
1a001b5a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a001b5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001b62:	0082      	lsls	r2, r0, #2
1a001b64:	4b16      	ldr	r3, [pc, #88]	; (1a001bc0 <uartInterrupt+0x84>)
1a001b66:	4413      	add	r3, r2
1a001b68:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001b6c:	2b00      	cmp	r3, #0
1a001b6e:	db25      	blt.n	1a001bbc <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001b70:	f003 011f 	and.w	r1, r3, #31
1a001b74:	095b      	lsrs	r3, r3, #5
1a001b76:	2201      	movs	r2, #1
1a001b78:	408a      	lsls	r2, r1
1a001b7a:	4912      	ldr	r1, [pc, #72]	; (1a001bc4 <uartInterrupt+0x88>)
1a001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001b80:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001b82:	f003 030f 	and.w	r3, r3, #15
1a001b86:	4a10      	ldr	r2, [pc, #64]	; (1a001bc8 <uartInterrupt+0x8c>)
1a001b88:	441a      	add	r2, r3
1a001b8a:	23a0      	movs	r3, #160	; 0xa0
1a001b8c:	7613      	strb	r3, [r2, #24]
1a001b8e:	e7e6      	b.n	1a001b5e <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a001b90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001b94:	0082      	lsls	r2, r0, #2
1a001b96:	4b0a      	ldr	r3, [pc, #40]	; (1a001bc0 <uartInterrupt+0x84>)
1a001b98:	4413      	add	r3, r2
1a001b9a:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001b9e:	2b00      	cmp	r3, #0
1a001ba0:	db0c      	blt.n	1a001bbc <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001ba2:	f003 011f 	and.w	r1, r3, #31
1a001ba6:	095b      	lsrs	r3, r3, #5
1a001ba8:	2201      	movs	r2, #1
1a001baa:	408a      	lsls	r2, r1
1a001bac:	3320      	adds	r3, #32
1a001bae:	4905      	ldr	r1, [pc, #20]	; (1a001bc4 <uartInterrupt+0x88>)
1a001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a001bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a001bb8:	f3bf 8f6f 	isb	sy
}
1a001bbc:	4770      	bx	lr
1a001bbe:	bf00      	nop
1a001bc0:	1a004e60 	.word	0x1a004e60
1a001bc4:	e000e100 	.word	0xe000e100
1a001bc8:	e000ecfc 	.word	0xe000ecfc

1a001bcc <uartCallbackSet>:
   switch(event){
1a001bcc:	b111      	cbz	r1, 1a001bd4 <uartCallbackSet+0x8>
1a001bce:	2901      	cmp	r1, #1
1a001bd0:	d01d      	beq.n	1a001c0e <uartCallbackSet+0x42>
1a001bd2:	4770      	bx	lr
         if( callbackFunc != 0 ) {
1a001bd4:	b182      	cbz	r2, 1a001bf8 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a001bd6:	2801      	cmp	r0, #1
1a001bd8:	d90f      	bls.n	1a001bfa <uartCallbackSet+0x2e>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a001bda:	1ec3      	subs	r3, r0, #3
1a001bdc:	b2db      	uxtb	r3, r3
1a001bde:	2b01      	cmp	r3, #1
1a001be0:	d90e      	bls.n	1a001c00 <uartCallbackSet+0x34>
            if( uart == UART_232 ){
1a001be2:	2805      	cmp	r0, #5
1a001be4:	d00f      	beq.n	1a001c06 <uartCallbackSet+0x3a>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a001be6:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a001be8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001bec:	0082      	lsls	r2, r0, #2
1a001bee:	4913      	ldr	r1, [pc, #76]	; (1a001c3c <uartCallbackSet+0x70>)
1a001bf0:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a001bf2:	6851      	ldr	r1, [r2, #4]
1a001bf4:	430b      	orrs	r3, r1
1a001bf6:	6053      	str	r3, [r2, #4]
}
1a001bf8:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a001bfa:	4b11      	ldr	r3, [pc, #68]	; (1a001c40 <uartCallbackSet+0x74>)
1a001bfc:	601a      	str	r2, [r3, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a001bfe:	e7ec      	b.n	1a001bda <uartCallbackSet+0xe>
               rxIsrCallbackUART2 = callbackFunc;
1a001c00:	4b10      	ldr	r3, [pc, #64]	; (1a001c44 <uartCallbackSet+0x78>)
1a001c02:	601a      	str	r2, [r3, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a001c04:	e7ed      	b.n	1a001be2 <uartCallbackSet+0x16>
               rxIsrCallbackUART3 = callbackFunc;
1a001c06:	4b10      	ldr	r3, [pc, #64]	; (1a001c48 <uartCallbackSet+0x7c>)
1a001c08:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a001c0a:	2305      	movs	r3, #5
1a001c0c:	e7ec      	b.n	1a001be8 <uartCallbackSet+0x1c>
         if( callbackFunc != 0 ) {
1a001c0e:	2a00      	cmp	r2, #0
1a001c10:	d0f2      	beq.n	1a001bf8 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a001c12:	2801      	cmp	r0, #1
1a001c14:	d907      	bls.n	1a001c26 <uartCallbackSet+0x5a>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a001c16:	1ec3      	subs	r3, r0, #3
1a001c18:	b2db      	uxtb	r3, r3
1a001c1a:	2b01      	cmp	r3, #1
1a001c1c:	d906      	bls.n	1a001c2c <uartCallbackSet+0x60>
            if( uart == UART_232 ){
1a001c1e:	2805      	cmp	r0, #5
1a001c20:	d007      	beq.n	1a001c32 <uartCallbackSet+0x66>
         intMask = UART_IER_THREINT;
1a001c22:	2302      	movs	r3, #2
1a001c24:	e7e0      	b.n	1a001be8 <uartCallbackSet+0x1c>
               txIsrCallbackUART0 = callbackFunc;
1a001c26:	4b09      	ldr	r3, [pc, #36]	; (1a001c4c <uartCallbackSet+0x80>)
1a001c28:	601a      	str	r2, [r3, #0]
               txIsrCallbackUART0Params = callbackParam;
1a001c2a:	e7f4      	b.n	1a001c16 <uartCallbackSet+0x4a>
               txIsrCallbackUART2 = callbackFunc;
1a001c2c:	4b08      	ldr	r3, [pc, #32]	; (1a001c50 <uartCallbackSet+0x84>)
1a001c2e:	601a      	str	r2, [r3, #0]
               txIsrCallbackUART2Params = callbackParam;
1a001c30:	e7f5      	b.n	1a001c1e <uartCallbackSet+0x52>
               txIsrCallbackUART3 = callbackFunc;
1a001c32:	4b08      	ldr	r3, [pc, #32]	; (1a001c54 <uartCallbackSet+0x88>)
1a001c34:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_THREINT;
1a001c36:	2302      	movs	r3, #2
1a001c38:	e7d6      	b.n	1a001be8 <uartCallbackSet+0x1c>
1a001c3a:	bf00      	nop
1a001c3c:	1a004e60 	.word	0x1a004e60
1a001c40:	100002d4 	.word	0x100002d4
1a001c44:	100002d8 	.word	0x100002d8
1a001c48:	100002dc 	.word	0x100002dc
1a001c4c:	100002e0 	.word	0x100002e0
1a001c50:	100002e4 	.word	0x100002e4
1a001c54:	100002e8 	.word	0x100002e8

1a001c58 <uartClearPendingInterrupt>:
   NVIC_ClearPendingIRQ(lpcUarts[uart].uartIrqAddr);
1a001c58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001c5c:	0082      	lsls	r2, r0, #2
1a001c5e:	4b08      	ldr	r3, [pc, #32]	; (1a001c80 <uartClearPendingInterrupt+0x28>)
1a001c60:	4413      	add	r3, r2
1a001c62:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001c66:	2b00      	cmp	r3, #0
1a001c68:	db08      	blt.n	1a001c7c <uartClearPendingInterrupt+0x24>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001c6a:	f003 011f 	and.w	r1, r3, #31
1a001c6e:	095b      	lsrs	r3, r3, #5
1a001c70:	2201      	movs	r2, #1
1a001c72:	408a      	lsls	r2, r1
1a001c74:	3360      	adds	r3, #96	; 0x60
1a001c76:	4903      	ldr	r1, [pc, #12]	; (1a001c84 <uartClearPendingInterrupt+0x2c>)
1a001c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
} 
1a001c7c:	4770      	bx	lr
1a001c7e:	bf00      	nop
1a001c80:	1a004e60 	.word	0x1a004e60
1a001c84:	e000e100 	.word	0xe000e100

1a001c88 <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a001c88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001c8c:	0083      	lsls	r3, r0, #2
1a001c8e:	4a03      	ldr	r2, [pc, #12]	; (1a001c9c <uartRxReady+0x14>)
1a001c90:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a001c92:	6958      	ldr	r0, [r3, #20]
}
1a001c94:	f000 0001 	and.w	r0, r0, #1
1a001c98:	4770      	bx	lr
1a001c9a:	bf00      	nop
1a001c9c:	1a004e60 	.word	0x1a004e60

1a001ca0 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001ca0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001ca4:	0083      	lsls	r3, r0, #2
1a001ca6:	4a03      	ldr	r2, [pc, #12]	; (1a001cb4 <uartTxReady+0x14>)
1a001ca8:	58d3      	ldr	r3, [r2, r3]
1a001caa:	6958      	ldr	r0, [r3, #20]
}
1a001cac:	f000 0020 	and.w	r0, r0, #32
1a001cb0:	4770      	bx	lr
1a001cb2:	bf00      	nop
1a001cb4:	1a004e60 	.word	0x1a004e60

1a001cb8 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001cb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001cbc:	0083      	lsls	r3, r0, #2
1a001cbe:	4a02      	ldr	r2, [pc, #8]	; (1a001cc8 <uartRxRead+0x10>)
1a001cc0:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001cc2:	6818      	ldr	r0, [r3, #0]
}
1a001cc4:	b2c0      	uxtb	r0, r0
1a001cc6:	4770      	bx	lr
1a001cc8:	1a004e60 	.word	0x1a004e60

1a001ccc <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001ccc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001cd0:	0083      	lsls	r3, r0, #2
1a001cd2:	4a02      	ldr	r2, [pc, #8]	; (1a001cdc <uartTxWrite+0x10>)
1a001cd4:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001cd6:	6019      	str	r1, [r3, #0]
}
1a001cd8:	4770      	bx	lr
1a001cda:	bf00      	nop
1a001cdc:	1a004e60 	.word	0x1a004e60

1a001ce0 <uartInit>:
{
1a001ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001ce4:	4680      	mov	r8, r0
1a001ce6:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001ce8:	4c19      	ldr	r4, [pc, #100]	; (1a001d50 <uartInit+0x70>)
1a001cea:	0045      	lsls	r5, r0, #1
1a001cec:	182a      	adds	r2, r5, r0
1a001cee:	0093      	lsls	r3, r2, #2
1a001cf0:	18e6      	adds	r6, r4, r3
1a001cf2:	58e7      	ldr	r7, [r4, r3]
1a001cf4:	4638      	mov	r0, r7
1a001cf6:	f7ff fb75 	bl	1a0013e4 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001cfa:	4649      	mov	r1, r9
1a001cfc:	4638      	mov	r0, r7
1a001cfe:	f7ff fb9b 	bl	1a001438 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001d02:	2307      	movs	r3, #7
1a001d04:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001d06:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001d08:	2301      	movs	r3, #1
1a001d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001d0c:	7930      	ldrb	r0, [r6, #4]
1a001d0e:	7973      	ldrb	r3, [r6, #5]
1a001d10:	79b2      	ldrb	r2, [r6, #6]
1a001d12:	f042 0218 	orr.w	r2, r2, #24
1a001d16:	490f      	ldr	r1, [pc, #60]	; (1a001d54 <uartInit+0x74>)
1a001d18:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001d20:	79f0      	ldrb	r0, [r6, #7]
1a001d22:	7a33      	ldrb	r3, [r6, #8]
1a001d24:	7a72      	ldrb	r2, [r6, #9]
1a001d26:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001d2a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a001d32:	f1b8 0f01 	cmp.w	r8, #1
1a001d36:	d001      	beq.n	1a001d3c <uartInit+0x5c>
}
1a001d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001d3c:	4a06      	ldr	r2, [pc, #24]	; (1a001d58 <uartInit+0x78>)
1a001d3e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001d40:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001d44:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001d46:	221a      	movs	r2, #26
1a001d48:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001d4c:	e7f4      	b.n	1a001d38 <uartInit+0x58>
1a001d4e:	bf00      	nop
1a001d50:	1a004e60 	.word	0x1a004e60
1a001d54:	40086000 	.word	0x40086000
1a001d58:	40081000 	.word	0x40081000

1a001d5c <uartReadByte>:
{
1a001d5c:	b538      	push	{r3, r4, r5, lr}
1a001d5e:	4605      	mov	r5, r0
1a001d60:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a001d62:	f7ff ff91 	bl	1a001c88 <uartRxReady>
1a001d66:	4603      	mov	r3, r0
1a001d68:	b908      	cbnz	r0, 1a001d6e <uartReadByte+0x12>
}
1a001d6a:	4618      	mov	r0, r3
1a001d6c:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a001d6e:	4628      	mov	r0, r5
1a001d70:	f7ff ffa2 	bl	1a001cb8 <uartRxRead>
1a001d74:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a001d76:	2301      	movs	r3, #1
1a001d78:	e7f7      	b.n	1a001d6a <uartReadByte+0xe>

1a001d7a <uartWriteByte>:
{
1a001d7a:	b538      	push	{r3, r4, r5, lr}
1a001d7c:	4604      	mov	r4, r0
1a001d7e:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a001d80:	4620      	mov	r0, r4
1a001d82:	f7ff ff8d 	bl	1a001ca0 <uartTxReady>
1a001d86:	2800      	cmp	r0, #0
1a001d88:	d0fa      	beq.n	1a001d80 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a001d8a:	4629      	mov	r1, r5
1a001d8c:	4620      	mov	r0, r4
1a001d8e:	f7ff ff9d 	bl	1a001ccc <uartTxWrite>
}
1a001d92:	bd38      	pop	{r3, r4, r5, pc}

1a001d94 <uartWriteString>:
{
1a001d94:	b538      	push	{r3, r4, r5, lr}
1a001d96:	4605      	mov	r5, r0
1a001d98:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001d9a:	7821      	ldrb	r1, [r4, #0]
1a001d9c:	b121      	cbz	r1, 1a001da8 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a001d9e:	4628      	mov	r0, r5
1a001da0:	f7ff ffeb 	bl	1a001d7a <uartWriteByte>
      str++;
1a001da4:	3401      	adds	r4, #1
1a001da6:	e7f8      	b.n	1a001d9a <uartWriteString+0x6>
}
1a001da8:	bd38      	pop	{r3, r4, r5, pc}

1a001daa <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001daa:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a001dac:	2003      	movs	r0, #3
1a001dae:	f7ff fe73 	bl	1a001a98 <uartProcessIRQ>
}
1a001db2:	bd08      	pop	{r3, pc}

1a001db4 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001db4:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001db6:	2005      	movs	r0, #5
1a001db8:	f7ff fe6e 	bl	1a001a98 <uartProcessIRQ>
}
1a001dbc:	bd08      	pop	{r3, pc}

1a001dbe <Sct_Init>:
 * @brief:   Initialize the SCT peripheral with the given frequency
 * @param:   frequency:   value in Hz
 * @note:   there can only be 1 frequency in all the SCT peripheral.
 */
void Sct_Init(uint32_t frequency)
{
1a001dbe:	b510      	push	{r4, lr}
1a001dc0:	4604      	mov	r4, r0
 * @param	pSCT	: The base of SCT peripheral on the chip
 * @return	None
 */
STATIC INLINE void Chip_SCTPWM_Init(LPC_SCT_T *pSCT)
{
	Chip_SCT_Init(pSCT);
1a001dc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a001dc6:	f7fe ff0e 	bl	1a000be6 <Chip_SCT_Init>
   /* Source: https://www.lpcware.com/content/faq/how-use-sct-standard-pwm-using-lpcopen */
   /* Initialize the SCT as PWM and set frequency */
   Chip_SCTPWM_Init(LPC_SCT);
   Chip_SCTPWM_SetRate(LPC_SCT, frequency);
1a001dca:	4621      	mov	r1, r4
1a001dcc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a001dd0:	f7fe fea4 	bl	1a000b1c <Chip_SCTPWM_SetRate>
	pSCT->CTRL_U &= ~(value);
1a001dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a001dd8:	6853      	ldr	r3, [r2, #4]
1a001dda:	f023 1304 	bic.w	r3, r3, #262148	; 0x40004
1a001dde:	6053      	str	r3, [r2, #4]

   Chip_SCTPWM_Start(LPC_SCT);
}
1a001de0:	bd10      	pop	{r4, pc}
1a001de2:	Address 0x1a001de2 is out of bounds.


1a001de4 <Sct_Uint8ToTicks>:
	return pSCT->MATCHREL[0].U;
1a001de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a001de8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 * @param   value:   8bit value, from 0 to 255
 * @return   Equivalent in Ticks for the LPC4337
 */
uint32_t Sct_Uint8ToTicks(uint8_t value)
{
   return ( (Chip_SCTPWM_GetTicksPerCycle(LPC_SCT) * value)/ 255 );
1a001dec:	fb03 f000 	mul.w	r0, r3, r0
1a001df0:	4b02      	ldr	r3, [pc, #8]	; (1a001dfc <Sct_Uint8ToTicks+0x18>)
1a001df2:	fba3 3000 	umull	r3, r0, r3, r0
}
1a001df6:	09c0      	lsrs	r0, r0, #7
1a001df8:	4770      	bx	lr
1a001dfa:	bf00      	nop
1a001dfc:	80808081 	.word	0x80808081

1a001e00 <Sct_SetDutyCycle>:
 * @param:	sctNumber:   pin where the pwm signal is generated
 * @param	value:   8bit value, from 0 to 255
 * @note   For the 'ticks' parameter, see function Sct_Uint8ToTicks
 */
void Sct_SetDutyCycle(uint8_t sctNumber, uint8_t value)
{
1a001e00:	b510      	push	{r4, lr}
   Chip_SCTPWM_SetDutyCycle(LPC_SCT, sctNumber+1, Sct_Uint8ToTicks(value));
1a001e02:	3001      	adds	r0, #1
1a001e04:	b2c4      	uxtb	r4, r0
1a001e06:	4608      	mov	r0, r1
1a001e08:	f7ff ffec 	bl	1a001de4 <Sct_Uint8ToTicks>
	pSCT->MATCHREL[n].U = value;
1a001e0c:	3480      	adds	r4, #128	; 0x80
1a001e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a001e12:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
}
1a001e16:	bd10      	pop	{r4, pc}

1a001e18 <Sct_EnablePwmFor>:
{
1a001e18:	b510      	push	{r4, lr}
1a001e1a:	4604      	mov	r4, r0
   Chip_SCU_PinMux(SCTdataList[sctNumber].port , SCTdataList[sctNumber].pin , SCU_MODE_INACT , CTOUT_FUNC);
1a001e1c:	4a0f      	ldr	r2, [pc, #60]	; (1a001e5c <Sct_EnablePwmFor+0x44>)
1a001e1e:	f912 3010 	ldrsb.w	r3, [r2, r0, lsl #1]
1a001e22:	b2db      	uxtb	r3, r3
1a001e24:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a001e28:	f992 2001 	ldrsb.w	r2, [r2, #1]
1a001e2c:	015b      	lsls	r3, r3, #5
1a001e2e:	fa53 f382 	uxtab	r3, r3, r2
1a001e32:	4a0b      	ldr	r2, [pc, #44]	; (1a001e60 <Sct_EnablePwmFor+0x48>)
1a001e34:	2111      	movs	r1, #17
1a001e36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   Chip_SCTPWM_SetOutPin(LPC_SCT, sctNumber+1, sctNumber);
1a001e3a:	1c41      	adds	r1, r0, #1
1a001e3c:	4602      	mov	r2, r0
1a001e3e:	b2c9      	uxtb	r1, r1
1a001e40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a001e44:	f7fe fe48 	bl	1a000ad8 <Chip_SCTPWM_SetOutPin>
1a001e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a001e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   Sct_SetDutyCycle(sctNumber, Chip_SCTPWM_PercentageToTicks(LPC_SCT,0));
1a001e50:	2100      	movs	r1, #0
1a001e52:	4620      	mov	r0, r4
1a001e54:	f7ff ffd4 	bl	1a001e00 <Sct_SetDutyCycle>
}
1a001e58:	bd10      	pop	{r4, pc}
1a001e5a:	bf00      	nop
1a001e5c:	1a004ea8 	.word	0x1a004ea8
1a001e60:	40086000 	.word	0x40086000

1a001e64 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001e64:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001e66:	4b04      	ldr	r3, [pc, #16]	; (1a001e78 <USB0_IRQHandler+0x14>)
1a001e68:	681b      	ldr	r3, [r3, #0]
1a001e6a:	681b      	ldr	r3, [r3, #0]
1a001e6c:	68db      	ldr	r3, [r3, #12]
1a001e6e:	4a03      	ldr	r2, [pc, #12]	; (1a001e7c <USB0_IRQHandler+0x18>)
1a001e70:	6810      	ldr	r0, [r2, #0]
1a001e72:	4798      	blx	r3
}
1a001e74:	bd08      	pop	{r3, pc}
1a001e76:	bf00      	nop
1a001e78:	100006fc 	.word	0x100006fc
1a001e7c:	100002ec 	.word	0x100002ec

1a001e80 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001e80:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001e82:	f7fe ffc9 	bl	1a000e18 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001e86:	4b1a      	ldr	r3, [pc, #104]	; (1a001ef0 <boardInit+0x70>)
1a001e88:	6818      	ldr	r0, [r3, #0]
1a001e8a:	f7ff fb7f 	bl	1a00158c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001e8e:	2001      	movs	r0, #1
1a001e90:	2100      	movs	r1, #0
1a001e92:	f7ff fd47 	bl	1a001924 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001e96:	2105      	movs	r1, #5
1a001e98:	2000      	movs	r0, #0
1a001e9a:	f7ff fb9f 	bl	1a0015dc <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001e9e:	2100      	movs	r1, #0
1a001ea0:	2024      	movs	r0, #36	; 0x24
1a001ea2:	f7ff fb9b 	bl	1a0015dc <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001ea6:	2100      	movs	r1, #0
1a001ea8:	2025      	movs	r0, #37	; 0x25
1a001eaa:	f7ff fb97 	bl	1a0015dc <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001eae:	2100      	movs	r1, #0
1a001eb0:	2026      	movs	r0, #38	; 0x26
1a001eb2:	f7ff fb93 	bl	1a0015dc <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001eb6:	2100      	movs	r1, #0
1a001eb8:	2027      	movs	r0, #39	; 0x27
1a001eba:	f7ff fb8f 	bl	1a0015dc <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001ebe:	2101      	movs	r1, #1
1a001ec0:	2028      	movs	r0, #40	; 0x28
1a001ec2:	f7ff fb8b 	bl	1a0015dc <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001ec6:	2101      	movs	r1, #1
1a001ec8:	2029      	movs	r0, #41	; 0x29
1a001eca:	f7ff fb87 	bl	1a0015dc <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001ece:	2101      	movs	r1, #1
1a001ed0:	202a      	movs	r0, #42	; 0x2a
1a001ed2:	f7ff fb83 	bl	1a0015dc <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001ed6:	2101      	movs	r1, #1
1a001ed8:	202b      	movs	r0, #43	; 0x2b
1a001eda:	f7ff fb7f 	bl	1a0015dc <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001ede:	2101      	movs	r1, #1
1a001ee0:	202c      	movs	r0, #44	; 0x2c
1a001ee2:	f7ff fb7b 	bl	1a0015dc <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001ee6:	2101      	movs	r1, #1
1a001ee8:	202d      	movs	r0, #45	; 0x2d
1a001eea:	f7ff fb77 	bl	1a0015dc <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001eee:	bd08      	pop	{r3, pc}
1a001ef0:	100006f8 	.word	0x100006f8

1a001ef4 <int64ToString>:
/*==================[external functions definition]==========================*/

// C++ version 0.4 char* style "itoa"
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a001ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001ef8:	4614      	mov	r4, r2
1a001efa:	469a      	mov	sl, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a001efc:	3b02      	subs	r3, #2
1a001efe:	b2db      	uxtb	r3, r3
1a001f00:	2b22      	cmp	r3, #34	; 0x22
1a001f02:	d803      	bhi.n	1a001f0c <int64ToString+0x18>
1a001f04:	4606      	mov	r6, r0
1a001f06:	460f      	mov	r7, r1
      *result = '\0';
      return FALSE;
   }

   char* ptr = result, *ptr1 = result, tmp_char;
1a001f08:	4615      	mov	r5, r2
1a001f0a:	e005      	b.n	1a001f18 <int64ToString+0x24>
      *result = '\0';
1a001f0c:	2000      	movs	r0, #0
1a001f0e:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a001f10:	e02f      	b.n	1a001f72 <int64ToString+0x7e>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a001f12:	461d      	mov	r5, r3
      value /= (int64_t)base;
1a001f14:	4606      	mov	r6, r0
1a001f16:	460f      	mov	r7, r1
1a001f18:	fa5f f88a 	uxtb.w	r8, sl
1a001f1c:	f04f 0900 	mov.w	r9, #0
1a001f20:	4642      	mov	r2, r8
1a001f22:	464b      	mov	r3, r9
1a001f24:	4630      	mov	r0, r6
1a001f26:	4639      	mov	r1, r7
1a001f28:	f000 fd1c 	bl	1a002964 <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a001f2c:	fba8 2300 	umull	r2, r3, r8, r0
1a001f30:	1ab2      	subs	r2, r6, r2
1a001f32:	3223      	adds	r2, #35	; 0x23
1a001f34:	462b      	mov	r3, r5
1a001f36:	f8df c040 	ldr.w	ip, [pc, #64]	; 1a001f78 <int64ToString+0x84>
1a001f3a:	4462      	add	r2, ip
1a001f3c:	7812      	ldrb	r2, [r2, #0]
1a001f3e:	f803 2b01 	strb.w	r2, [r3], #1
   } while ( value );
1a001f42:	ea50 0201 	orrs.w	r2, r0, r1
1a001f46:	d1e4      	bne.n	1a001f12 <int64ToString+0x1e>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a001f48:	2e00      	cmp	r6, #0
1a001f4a:	f177 0200 	sbcs.w	r2, r7, #0
1a001f4e:	db03      	blt.n	1a001f58 <int64ToString+0x64>
   *ptr-- = '\0';
1a001f50:	2200      	movs	r2, #0
1a001f52:	f803 2901 	strb.w	r2, [r3], #-1
   while(ptr1 < ptr) {
1a001f56:	e009      	b.n	1a001f6c <int64ToString+0x78>
   if (tmp_value < 0) *ptr++ = '-';
1a001f58:	222d      	movs	r2, #45	; 0x2d
1a001f5a:	701a      	strb	r2, [r3, #0]
1a001f5c:	1cab      	adds	r3, r5, #2
1a001f5e:	e7f7      	b.n	1a001f50 <int64ToString+0x5c>
      tmp_char = *ptr;
1a001f60:	781a      	ldrb	r2, [r3, #0]
      *ptr--= *ptr1;
1a001f62:	7821      	ldrb	r1, [r4, #0]
1a001f64:	f803 1901 	strb.w	r1, [r3], #-1
      *ptr1++ = tmp_char;
1a001f68:	f804 2b01 	strb.w	r2, [r4], #1
   while(ptr1 < ptr) {
1a001f6c:	42a3      	cmp	r3, r4
1a001f6e:	d8f7      	bhi.n	1a001f60 <int64ToString+0x6c>
   }
   return TRUE;
1a001f70:	2001      	movs	r0, #1
}
1a001f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f76:	bf00      	nop
1a001f78:	1a004ec4 	.word	0x1a004ec4

1a001f7c <intToStringGlobal>:
   return value;
}

// Funcion no reentrante. Cuidado con el RTOS!!!
char* intToStringGlobal( int64_t value )
{
1a001f7c:	b508      	push	{r3, lr}
   if( value == 0 ) {
1a001f7e:	ea50 0301 	orrs.w	r3, r0, r1
1a001f82:	d106      	bne.n	1a001f92 <intToStringGlobal+0x16>
      globalStrConvertBuff[0] = '0';
1a001f84:	4b06      	ldr	r3, [pc, #24]	; (1a001fa0 <intToStringGlobal+0x24>)
1a001f86:	2230      	movs	r2, #48	; 0x30
1a001f88:	701a      	strb	r2, [r3, #0]
      globalStrConvertBuff[1] = 0;
1a001f8a:	2200      	movs	r2, #0
1a001f8c:	705a      	strb	r2, [r3, #1]
   } else {
      globalStrConvertBuff[0] = 0;
      int64ToString( value, globalStrConvertBuff, 10 );
   }
   return globalStrConvertBuff;
}
1a001f8e:	4804      	ldr	r0, [pc, #16]	; (1a001fa0 <intToStringGlobal+0x24>)
1a001f90:	bd08      	pop	{r3, pc}
      globalStrConvertBuff[0] = 0;
1a001f92:	4a03      	ldr	r2, [pc, #12]	; (1a001fa0 <intToStringGlobal+0x24>)
1a001f94:	2300      	movs	r3, #0
1a001f96:	7013      	strb	r3, [r2, #0]
      int64ToString( value, globalStrConvertBuff, 10 );
1a001f98:	230a      	movs	r3, #10
1a001f9a:	f7ff ffab 	bl	1a001ef4 <int64ToString>
1a001f9e:	e7f6      	b.n	1a001f8e <intToStringGlobal+0x12>
1a001fa0:	10000700 	.word	0x10000700

1a001fa4 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001fa8:	4680      	mov	r8, r0
1a001faa:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001fac:	f7ff fca8 	bl	1a001900 <tickRead>
1a001fb0:	4606      	mov	r6, r0
1a001fb2:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001fb4:	f7ff fca4 	bl	1a001900 <tickRead>
1a001fb8:	1b84      	subs	r4, r0, r6
1a001fba:	eb61 0507 	sbc.w	r5, r1, r7
1a001fbe:	4b06      	ldr	r3, [pc, #24]	; (1a001fd8 <delay+0x34>)
1a001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001fc4:	4640      	mov	r0, r8
1a001fc6:	4649      	mov	r1, r9
1a001fc8:	f000 fd1c 	bl	1a002a04 <__aeabi_uldivmod>
1a001fcc:	428d      	cmp	r5, r1
1a001fce:	bf08      	it	eq
1a001fd0:	4284      	cmpeq	r4, r0
1a001fd2:	d3ef      	bcc.n	1a001fb4 <delay+0x10>
}
1a001fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001fd8:	10000080 	.word	0x10000080

1a001fdc <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001fdc:	2301      	movs	r3, #1
1a001fde:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a001fe2:	4b01      	ldr	r3, [pc, #4]	; (1a001fe8 <clearInterrupt+0xc>)
1a001fe4:	6258      	str	r0, [r3, #36]	; 0x24
}
1a001fe6:	4770      	bx	lr
1a001fe8:	40087000 	.word	0x40087000

1a001fec <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a001fee:	4b12      	ldr	r3, [pc, #72]	; (1a002038 <serveInterrupt+0x4c>)
1a001ff0:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a001ff2:	4b12      	ldr	r3, [pc, #72]	; (1a00203c <serveInterrupt+0x50>)
1a001ff4:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a001ff6:	2301      	movs	r3, #1
1a001ff8:	4083      	lsls	r3, r0
1a001ffa:	420b      	tst	r3, r1
1a001ffc:	d00c      	beq.n	1a002018 <serveInterrupt+0x2c>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a001ffe:	4910      	ldr	r1, [pc, #64]	; (1a002040 <serveInterrupt+0x54>)
1a002000:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002002:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a002006:	00d1      	lsls	r1, r2, #3
1a002008:	4a0e      	ldr	r2, [pc, #56]	; (1a002044 <serveInterrupt+0x58>)
1a00200a:	440a      	add	r2, r1
1a00200c:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00200e:	4a0b      	ldr	r2, [pc, #44]	; (1a00203c <serveInterrupt+0x50>)
1a002010:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002012:	f7ff ffe3 	bl	1a001fdc <clearInterrupt>
}
1a002016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002018:	4909      	ldr	r1, [pc, #36]	; (1a002040 <serveInterrupt+0x54>)
1a00201a:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00201c:	4d09      	ldr	r5, [pc, #36]	; (1a002044 <serveInterrupt+0x58>)
1a00201e:	0051      	lsls	r1, r2, #1
1a002020:	188f      	adds	r7, r1, r2
1a002022:	00fc      	lsls	r4, r7, #3
1a002024:	4627      	mov	r7, r4
1a002026:	442c      	add	r4, r5
1a002028:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a00202a:	6864      	ldr	r4, [r4, #4]
1a00202c:	1b36      	subs	r6, r6, r4
1a00202e:	443d      	add	r5, r7
1a002030:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a002032:	4a02      	ldr	r2, [pc, #8]	; (1a00203c <serveInterrupt+0x50>)
1a002034:	6213      	str	r3, [r2, #32]
1a002036:	e7ec      	b.n	1a002012 <serveInterrupt+0x26>
1a002038:	1a004f0c 	.word	0x1a004f0c
1a00203c:	40087000 	.word	0x40087000
1a002040:	40084000 	.word	0x40084000
1a002044:	10000094 	.word	0x10000094

1a002048 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a002048:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a00204a:	2000      	movs	r0, #0
1a00204c:	f7ff ffce 	bl	1a001fec <serveInterrupt>
}
1a002050:	bd08      	pop	{r3, pc}

1a002052 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a002052:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a002054:	2001      	movs	r0, #1
1a002056:	f7ff ffc9 	bl	1a001fec <serveInterrupt>
}
1a00205a:	bd08      	pop	{r3, pc}

1a00205c <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a00205c:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00205e:	2002      	movs	r0, #2
1a002060:	f7ff ffc4 	bl	1a001fec <serveInterrupt>
}
1a002064:	bd08      	pop	{r3, pc}
1a002066:	Address 0x1a002066 is out of bounds.


1a002068 <__aeabi_drsub>:
1a002068:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a00206c:	e002      	b.n	1a002074 <__adddf3>
1a00206e:	bf00      	nop

1a002070 <__aeabi_dsub>:
1a002070:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002074 <__adddf3>:
1a002074:	b530      	push	{r4, r5, lr}
1a002076:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00207a:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00207e:	ea94 0f05 	teq	r4, r5
1a002082:	bf08      	it	eq
1a002084:	ea90 0f02 	teqeq	r0, r2
1a002088:	bf1f      	itttt	ne
1a00208a:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00208e:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002092:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a002096:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00209a:	f000 80e2 	beq.w	1a002262 <__adddf3+0x1ee>
1a00209e:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a0020a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0020a6:	bfb8      	it	lt
1a0020a8:	426d      	neglt	r5, r5
1a0020aa:	dd0c      	ble.n	1a0020c6 <__adddf3+0x52>
1a0020ac:	442c      	add	r4, r5
1a0020ae:	ea80 0202 	eor.w	r2, r0, r2
1a0020b2:	ea81 0303 	eor.w	r3, r1, r3
1a0020b6:	ea82 0000 	eor.w	r0, r2, r0
1a0020ba:	ea83 0101 	eor.w	r1, r3, r1
1a0020be:	ea80 0202 	eor.w	r2, r0, r2
1a0020c2:	ea81 0303 	eor.w	r3, r1, r3
1a0020c6:	2d36      	cmp	r5, #54	; 0x36
1a0020c8:	bf88      	it	hi
1a0020ca:	bd30      	pophi	{r4, r5, pc}
1a0020cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0020d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0020d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0020d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0020dc:	d002      	beq.n	1a0020e4 <__adddf3+0x70>
1a0020de:	4240      	negs	r0, r0
1a0020e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0020e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0020e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0020ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0020f0:	d002      	beq.n	1a0020f8 <__adddf3+0x84>
1a0020f2:	4252      	negs	r2, r2
1a0020f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0020f8:	ea94 0f05 	teq	r4, r5
1a0020fc:	f000 80a7 	beq.w	1a00224e <__adddf3+0x1da>
1a002100:	f1a4 0401 	sub.w	r4, r4, #1
1a002104:	f1d5 0e20 	rsbs	lr, r5, #32
1a002108:	db0d      	blt.n	1a002126 <__adddf3+0xb2>
1a00210a:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00210e:	fa22 f205 	lsr.w	r2, r2, r5
1a002112:	1880      	adds	r0, r0, r2
1a002114:	f141 0100 	adc.w	r1, r1, #0
1a002118:	fa03 f20e 	lsl.w	r2, r3, lr
1a00211c:	1880      	adds	r0, r0, r2
1a00211e:	fa43 f305 	asr.w	r3, r3, r5
1a002122:	4159      	adcs	r1, r3
1a002124:	e00e      	b.n	1a002144 <__adddf3+0xd0>
1a002126:	f1a5 0520 	sub.w	r5, r5, #32
1a00212a:	f10e 0e20 	add.w	lr, lr, #32
1a00212e:	2a01      	cmp	r2, #1
1a002130:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002134:	bf28      	it	cs
1a002136:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00213a:	fa43 f305 	asr.w	r3, r3, r5
1a00213e:	18c0      	adds	r0, r0, r3
1a002140:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002144:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002148:	d507      	bpl.n	1a00215a <__adddf3+0xe6>
1a00214a:	f04f 0e00 	mov.w	lr, #0
1a00214e:	f1dc 0c00 	rsbs	ip, ip, #0
1a002152:	eb7e 0000 	sbcs.w	r0, lr, r0
1a002156:	eb6e 0101 	sbc.w	r1, lr, r1
1a00215a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00215e:	d31b      	bcc.n	1a002198 <__adddf3+0x124>
1a002160:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002164:	d30c      	bcc.n	1a002180 <__adddf3+0x10c>
1a002166:	0849      	lsrs	r1, r1, #1
1a002168:	ea5f 0030 	movs.w	r0, r0, rrx
1a00216c:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002170:	f104 0401 	add.w	r4, r4, #1
1a002174:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a002178:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a00217c:	f080 809a 	bcs.w	1a0022b4 <__adddf3+0x240>
1a002180:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002184:	bf08      	it	eq
1a002186:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00218a:	f150 0000 	adcs.w	r0, r0, #0
1a00218e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002192:	ea41 0105 	orr.w	r1, r1, r5
1a002196:	bd30      	pop	{r4, r5, pc}
1a002198:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a00219c:	4140      	adcs	r0, r0
1a00219e:	eb41 0101 	adc.w	r1, r1, r1
1a0021a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0021a6:	f1a4 0401 	sub.w	r4, r4, #1
1a0021aa:	d1e9      	bne.n	1a002180 <__adddf3+0x10c>
1a0021ac:	f091 0f00 	teq	r1, #0
1a0021b0:	bf04      	itt	eq
1a0021b2:	4601      	moveq	r1, r0
1a0021b4:	2000      	moveq	r0, #0
1a0021b6:	fab1 f381 	clz	r3, r1
1a0021ba:	bf08      	it	eq
1a0021bc:	3320      	addeq	r3, #32
1a0021be:	f1a3 030b 	sub.w	r3, r3, #11
1a0021c2:	f1b3 0220 	subs.w	r2, r3, #32
1a0021c6:	da0c      	bge.n	1a0021e2 <__adddf3+0x16e>
1a0021c8:	320c      	adds	r2, #12
1a0021ca:	dd08      	ble.n	1a0021de <__adddf3+0x16a>
1a0021cc:	f102 0c14 	add.w	ip, r2, #20
1a0021d0:	f1c2 020c 	rsb	r2, r2, #12
1a0021d4:	fa01 f00c 	lsl.w	r0, r1, ip
1a0021d8:	fa21 f102 	lsr.w	r1, r1, r2
1a0021dc:	e00c      	b.n	1a0021f8 <__adddf3+0x184>
1a0021de:	f102 0214 	add.w	r2, r2, #20
1a0021e2:	bfd8      	it	le
1a0021e4:	f1c2 0c20 	rsble	ip, r2, #32
1a0021e8:	fa01 f102 	lsl.w	r1, r1, r2
1a0021ec:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0021f0:	bfdc      	itt	le
1a0021f2:	ea41 010c 	orrle.w	r1, r1, ip
1a0021f6:	4090      	lslle	r0, r2
1a0021f8:	1ae4      	subs	r4, r4, r3
1a0021fa:	bfa2      	ittt	ge
1a0021fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002200:	4329      	orrge	r1, r5
1a002202:	bd30      	popge	{r4, r5, pc}
1a002204:	ea6f 0404 	mvn.w	r4, r4
1a002208:	3c1f      	subs	r4, #31
1a00220a:	da1c      	bge.n	1a002246 <__adddf3+0x1d2>
1a00220c:	340c      	adds	r4, #12
1a00220e:	dc0e      	bgt.n	1a00222e <__adddf3+0x1ba>
1a002210:	f104 0414 	add.w	r4, r4, #20
1a002214:	f1c4 0220 	rsb	r2, r4, #32
1a002218:	fa20 f004 	lsr.w	r0, r0, r4
1a00221c:	fa01 f302 	lsl.w	r3, r1, r2
1a002220:	ea40 0003 	orr.w	r0, r0, r3
1a002224:	fa21 f304 	lsr.w	r3, r1, r4
1a002228:	ea45 0103 	orr.w	r1, r5, r3
1a00222c:	bd30      	pop	{r4, r5, pc}
1a00222e:	f1c4 040c 	rsb	r4, r4, #12
1a002232:	f1c4 0220 	rsb	r2, r4, #32
1a002236:	fa20 f002 	lsr.w	r0, r0, r2
1a00223a:	fa01 f304 	lsl.w	r3, r1, r4
1a00223e:	ea40 0003 	orr.w	r0, r0, r3
1a002242:	4629      	mov	r1, r5
1a002244:	bd30      	pop	{r4, r5, pc}
1a002246:	fa21 f004 	lsr.w	r0, r1, r4
1a00224a:	4629      	mov	r1, r5
1a00224c:	bd30      	pop	{r4, r5, pc}
1a00224e:	f094 0f00 	teq	r4, #0
1a002252:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a002256:	bf06      	itte	eq
1a002258:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a00225c:	3401      	addeq	r4, #1
1a00225e:	3d01      	subne	r5, #1
1a002260:	e74e      	b.n	1a002100 <__adddf3+0x8c>
1a002262:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002266:	bf18      	it	ne
1a002268:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00226c:	d029      	beq.n	1a0022c2 <__adddf3+0x24e>
1a00226e:	ea94 0f05 	teq	r4, r5
1a002272:	bf08      	it	eq
1a002274:	ea90 0f02 	teqeq	r0, r2
1a002278:	d005      	beq.n	1a002286 <__adddf3+0x212>
1a00227a:	ea54 0c00 	orrs.w	ip, r4, r0
1a00227e:	bf04      	itt	eq
1a002280:	4619      	moveq	r1, r3
1a002282:	4610      	moveq	r0, r2
1a002284:	bd30      	pop	{r4, r5, pc}
1a002286:	ea91 0f03 	teq	r1, r3
1a00228a:	bf1e      	ittt	ne
1a00228c:	2100      	movne	r1, #0
1a00228e:	2000      	movne	r0, #0
1a002290:	bd30      	popne	{r4, r5, pc}
1a002292:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002296:	d105      	bne.n	1a0022a4 <__adddf3+0x230>
1a002298:	0040      	lsls	r0, r0, #1
1a00229a:	4149      	adcs	r1, r1
1a00229c:	bf28      	it	cs
1a00229e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0022a2:	bd30      	pop	{r4, r5, pc}
1a0022a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0022a8:	bf3c      	itt	cc
1a0022aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0022ae:	bd30      	popcc	{r4, r5, pc}
1a0022b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0022b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0022b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0022bc:	f04f 0000 	mov.w	r0, #0
1a0022c0:	bd30      	pop	{r4, r5, pc}
1a0022c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0022c6:	bf1a      	itte	ne
1a0022c8:	4619      	movne	r1, r3
1a0022ca:	4610      	movne	r0, r2
1a0022cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0022d0:	bf1c      	itt	ne
1a0022d2:	460b      	movne	r3, r1
1a0022d4:	4602      	movne	r2, r0
1a0022d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0022da:	bf06      	itte	eq
1a0022dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0022e0:	ea91 0f03 	teqeq	r1, r3
1a0022e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0022e8:	bd30      	pop	{r4, r5, pc}
1a0022ea:	bf00      	nop

1a0022ec <__aeabi_ui2d>:
1a0022ec:	f090 0f00 	teq	r0, #0
1a0022f0:	bf04      	itt	eq
1a0022f2:	2100      	moveq	r1, #0
1a0022f4:	4770      	bxeq	lr
1a0022f6:	b530      	push	{r4, r5, lr}
1a0022f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0022fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002300:	f04f 0500 	mov.w	r5, #0
1a002304:	f04f 0100 	mov.w	r1, #0
1a002308:	e750      	b.n	1a0021ac <__adddf3+0x138>
1a00230a:	bf00      	nop

1a00230c <__aeabi_i2d>:
1a00230c:	f090 0f00 	teq	r0, #0
1a002310:	bf04      	itt	eq
1a002312:	2100      	moveq	r1, #0
1a002314:	4770      	bxeq	lr
1a002316:	b530      	push	{r4, r5, lr}
1a002318:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00231c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002320:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002324:	bf48      	it	mi
1a002326:	4240      	negmi	r0, r0
1a002328:	f04f 0100 	mov.w	r1, #0
1a00232c:	e73e      	b.n	1a0021ac <__adddf3+0x138>
1a00232e:	bf00      	nop

1a002330 <__aeabi_f2d>:
1a002330:	0042      	lsls	r2, r0, #1
1a002332:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002336:	ea4f 0131 	mov.w	r1, r1, rrx
1a00233a:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00233e:	bf1f      	itttt	ne
1a002340:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002344:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002348:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a00234c:	4770      	bxne	lr
1a00234e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a002352:	bf08      	it	eq
1a002354:	4770      	bxeq	lr
1a002356:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00235a:	bf04      	itt	eq
1a00235c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a002360:	4770      	bxeq	lr
1a002362:	b530      	push	{r4, r5, lr}
1a002364:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002368:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00236c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002370:	e71c      	b.n	1a0021ac <__adddf3+0x138>
1a002372:	bf00      	nop

1a002374 <__aeabi_ul2d>:
1a002374:	ea50 0201 	orrs.w	r2, r0, r1
1a002378:	bf08      	it	eq
1a00237a:	4770      	bxeq	lr
1a00237c:	b530      	push	{r4, r5, lr}
1a00237e:	f04f 0500 	mov.w	r5, #0
1a002382:	e00a      	b.n	1a00239a <__aeabi_l2d+0x16>

1a002384 <__aeabi_l2d>:
1a002384:	ea50 0201 	orrs.w	r2, r0, r1
1a002388:	bf08      	it	eq
1a00238a:	4770      	bxeq	lr
1a00238c:	b530      	push	{r4, r5, lr}
1a00238e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002392:	d502      	bpl.n	1a00239a <__aeabi_l2d+0x16>
1a002394:	4240      	negs	r0, r0
1a002396:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00239a:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00239e:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0023a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0023a6:	f43f aed8 	beq.w	1a00215a <__adddf3+0xe6>
1a0023aa:	f04f 0203 	mov.w	r2, #3
1a0023ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0023b2:	bf18      	it	ne
1a0023b4:	3203      	addne	r2, #3
1a0023b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0023ba:	bf18      	it	ne
1a0023bc:	3203      	addne	r2, #3
1a0023be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0023c2:	f1c2 0320 	rsb	r3, r2, #32
1a0023c6:	fa00 fc03 	lsl.w	ip, r0, r3
1a0023ca:	fa20 f002 	lsr.w	r0, r0, r2
1a0023ce:	fa01 fe03 	lsl.w	lr, r1, r3
1a0023d2:	ea40 000e 	orr.w	r0, r0, lr
1a0023d6:	fa21 f102 	lsr.w	r1, r1, r2
1a0023da:	4414      	add	r4, r2
1a0023dc:	e6bd      	b.n	1a00215a <__adddf3+0xe6>
1a0023de:	bf00      	nop

1a0023e0 <__aeabi_dmul>:
1a0023e0:	b570      	push	{r4, r5, r6, lr}
1a0023e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0023e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0023ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0023ee:	bf1d      	ittte	ne
1a0023f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0023f4:	ea94 0f0c 	teqne	r4, ip
1a0023f8:	ea95 0f0c 	teqne	r5, ip
1a0023fc:	f000 f8de 	bleq	1a0025bc <__aeabi_dmul+0x1dc>
1a002400:	442c      	add	r4, r5
1a002402:	ea81 0603 	eor.w	r6, r1, r3
1a002406:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a00240a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a00240e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002412:	bf18      	it	ne
1a002414:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00241c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002420:	d038      	beq.n	1a002494 <__aeabi_dmul+0xb4>
1a002422:	fba0 ce02 	umull	ip, lr, r0, r2
1a002426:	f04f 0500 	mov.w	r5, #0
1a00242a:	fbe1 e502 	umlal	lr, r5, r1, r2
1a00242e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002432:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002436:	f04f 0600 	mov.w	r6, #0
1a00243a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a00243e:	f09c 0f00 	teq	ip, #0
1a002442:	bf18      	it	ne
1a002444:	f04e 0e01 	orrne.w	lr, lr, #1
1a002448:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a00244c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002450:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002454:	d204      	bcs.n	1a002460 <__aeabi_dmul+0x80>
1a002456:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00245a:	416d      	adcs	r5, r5
1a00245c:	eb46 0606 	adc.w	r6, r6, r6
1a002460:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002464:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002468:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a00246c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002470:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002474:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002478:	bf88      	it	hi
1a00247a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a00247e:	d81e      	bhi.n	1a0024be <__aeabi_dmul+0xde>
1a002480:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002484:	bf08      	it	eq
1a002486:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a00248a:	f150 0000 	adcs.w	r0, r0, #0
1a00248e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002492:	bd70      	pop	{r4, r5, r6, pc}
1a002494:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002498:	ea46 0101 	orr.w	r1, r6, r1
1a00249c:	ea40 0002 	orr.w	r0, r0, r2
1a0024a0:	ea81 0103 	eor.w	r1, r1, r3
1a0024a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a0024a8:	bfc2      	ittt	gt
1a0024aa:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0024ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0024b2:	bd70      	popgt	{r4, r5, r6, pc}
1a0024b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0024b8:	f04f 0e00 	mov.w	lr, #0
1a0024bc:	3c01      	subs	r4, #1
1a0024be:	f300 80ab 	bgt.w	1a002618 <__aeabi_dmul+0x238>
1a0024c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a0024c6:	bfde      	ittt	le
1a0024c8:	2000      	movle	r0, #0
1a0024ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a0024ce:	bd70      	pople	{r4, r5, r6, pc}
1a0024d0:	f1c4 0400 	rsb	r4, r4, #0
1a0024d4:	3c20      	subs	r4, #32
1a0024d6:	da35      	bge.n	1a002544 <__aeabi_dmul+0x164>
1a0024d8:	340c      	adds	r4, #12
1a0024da:	dc1b      	bgt.n	1a002514 <__aeabi_dmul+0x134>
1a0024dc:	f104 0414 	add.w	r4, r4, #20
1a0024e0:	f1c4 0520 	rsb	r5, r4, #32
1a0024e4:	fa00 f305 	lsl.w	r3, r0, r5
1a0024e8:	fa20 f004 	lsr.w	r0, r0, r4
1a0024ec:	fa01 f205 	lsl.w	r2, r1, r5
1a0024f0:	ea40 0002 	orr.w	r0, r0, r2
1a0024f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a0024f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0024fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002500:	fa21 f604 	lsr.w	r6, r1, r4
1a002504:	eb42 0106 	adc.w	r1, r2, r6
1a002508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00250c:	bf08      	it	eq
1a00250e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002512:	bd70      	pop	{r4, r5, r6, pc}
1a002514:	f1c4 040c 	rsb	r4, r4, #12
1a002518:	f1c4 0520 	rsb	r5, r4, #32
1a00251c:	fa00 f304 	lsl.w	r3, r0, r4
1a002520:	fa20 f005 	lsr.w	r0, r0, r5
1a002524:	fa01 f204 	lsl.w	r2, r1, r4
1a002528:	ea40 0002 	orr.w	r0, r0, r2
1a00252c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002530:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002534:	f141 0100 	adc.w	r1, r1, #0
1a002538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00253c:	bf08      	it	eq
1a00253e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002542:	bd70      	pop	{r4, r5, r6, pc}
1a002544:	f1c4 0520 	rsb	r5, r4, #32
1a002548:	fa00 f205 	lsl.w	r2, r0, r5
1a00254c:	ea4e 0e02 	orr.w	lr, lr, r2
1a002550:	fa20 f304 	lsr.w	r3, r0, r4
1a002554:	fa01 f205 	lsl.w	r2, r1, r5
1a002558:	ea43 0302 	orr.w	r3, r3, r2
1a00255c:	fa21 f004 	lsr.w	r0, r1, r4
1a002560:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002564:	fa21 f204 	lsr.w	r2, r1, r4
1a002568:	ea20 0002 	bic.w	r0, r0, r2
1a00256c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002570:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002574:	bf08      	it	eq
1a002576:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00257a:	bd70      	pop	{r4, r5, r6, pc}
1a00257c:	f094 0f00 	teq	r4, #0
1a002580:	d10f      	bne.n	1a0025a2 <__aeabi_dmul+0x1c2>
1a002582:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002586:	0040      	lsls	r0, r0, #1
1a002588:	eb41 0101 	adc.w	r1, r1, r1
1a00258c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002590:	bf08      	it	eq
1a002592:	3c01      	subeq	r4, #1
1a002594:	d0f7      	beq.n	1a002586 <__aeabi_dmul+0x1a6>
1a002596:	ea41 0106 	orr.w	r1, r1, r6
1a00259a:	f095 0f00 	teq	r5, #0
1a00259e:	bf18      	it	ne
1a0025a0:	4770      	bxne	lr
1a0025a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a0025a6:	0052      	lsls	r2, r2, #1
1a0025a8:	eb43 0303 	adc.w	r3, r3, r3
1a0025ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a0025b0:	bf08      	it	eq
1a0025b2:	3d01      	subeq	r5, #1
1a0025b4:	d0f7      	beq.n	1a0025a6 <__aeabi_dmul+0x1c6>
1a0025b6:	ea43 0306 	orr.w	r3, r3, r6
1a0025ba:	4770      	bx	lr
1a0025bc:	ea94 0f0c 	teq	r4, ip
1a0025c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0025c4:	bf18      	it	ne
1a0025c6:	ea95 0f0c 	teqne	r5, ip
1a0025ca:	d00c      	beq.n	1a0025e6 <__aeabi_dmul+0x206>
1a0025cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0025d0:	bf18      	it	ne
1a0025d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0025d6:	d1d1      	bne.n	1a00257c <__aeabi_dmul+0x19c>
1a0025d8:	ea81 0103 	eor.w	r1, r1, r3
1a0025dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0025e0:	f04f 0000 	mov.w	r0, #0
1a0025e4:	bd70      	pop	{r4, r5, r6, pc}
1a0025e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0025ea:	bf06      	itte	eq
1a0025ec:	4610      	moveq	r0, r2
1a0025ee:	4619      	moveq	r1, r3
1a0025f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0025f4:	d019      	beq.n	1a00262a <__aeabi_dmul+0x24a>
1a0025f6:	ea94 0f0c 	teq	r4, ip
1a0025fa:	d102      	bne.n	1a002602 <__aeabi_dmul+0x222>
1a0025fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002600:	d113      	bne.n	1a00262a <__aeabi_dmul+0x24a>
1a002602:	ea95 0f0c 	teq	r5, ip
1a002606:	d105      	bne.n	1a002614 <__aeabi_dmul+0x234>
1a002608:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a00260c:	bf1c      	itt	ne
1a00260e:	4610      	movne	r0, r2
1a002610:	4619      	movne	r1, r3
1a002612:	d10a      	bne.n	1a00262a <__aeabi_dmul+0x24a>
1a002614:	ea81 0103 	eor.w	r1, r1, r3
1a002618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a00261c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002620:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002624:	f04f 0000 	mov.w	r0, #0
1a002628:	bd70      	pop	{r4, r5, r6, pc}
1a00262a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a00262e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002632:	bd70      	pop	{r4, r5, r6, pc}

1a002634 <__aeabi_ddiv>:
1a002634:	b570      	push	{r4, r5, r6, lr}
1a002636:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00263a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00263e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002642:	bf1d      	ittte	ne
1a002644:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002648:	ea94 0f0c 	teqne	r4, ip
1a00264c:	ea95 0f0c 	teqne	r5, ip
1a002650:	f000 f8a7 	bleq	1a0027a2 <__aeabi_ddiv+0x16e>
1a002654:	eba4 0405 	sub.w	r4, r4, r5
1a002658:	ea81 0e03 	eor.w	lr, r1, r3
1a00265c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002660:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002664:	f000 8088 	beq.w	1a002778 <__aeabi_ddiv+0x144>
1a002668:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00266c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002670:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002674:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002678:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a00267c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002680:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002684:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002688:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a00268c:	429d      	cmp	r5, r3
1a00268e:	bf08      	it	eq
1a002690:	4296      	cmpeq	r6, r2
1a002692:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002696:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a00269a:	d202      	bcs.n	1a0026a2 <__aeabi_ddiv+0x6e>
1a00269c:	085b      	lsrs	r3, r3, #1
1a00269e:	ea4f 0232 	mov.w	r2, r2, rrx
1a0026a2:	1ab6      	subs	r6, r6, r2
1a0026a4:	eb65 0503 	sbc.w	r5, r5, r3
1a0026a8:	085b      	lsrs	r3, r3, #1
1a0026aa:	ea4f 0232 	mov.w	r2, r2, rrx
1a0026ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a0026b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a0026b6:	ebb6 0e02 	subs.w	lr, r6, r2
1a0026ba:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0026be:	bf22      	ittt	cs
1a0026c0:	1ab6      	subcs	r6, r6, r2
1a0026c2:	4675      	movcs	r5, lr
1a0026c4:	ea40 000c 	orrcs.w	r0, r0, ip
1a0026c8:	085b      	lsrs	r3, r3, #1
1a0026ca:	ea4f 0232 	mov.w	r2, r2, rrx
1a0026ce:	ebb6 0e02 	subs.w	lr, r6, r2
1a0026d2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0026d6:	bf22      	ittt	cs
1a0026d8:	1ab6      	subcs	r6, r6, r2
1a0026da:	4675      	movcs	r5, lr
1a0026dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a0026e0:	085b      	lsrs	r3, r3, #1
1a0026e2:	ea4f 0232 	mov.w	r2, r2, rrx
1a0026e6:	ebb6 0e02 	subs.w	lr, r6, r2
1a0026ea:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0026ee:	bf22      	ittt	cs
1a0026f0:	1ab6      	subcs	r6, r6, r2
1a0026f2:	4675      	movcs	r5, lr
1a0026f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a0026f8:	085b      	lsrs	r3, r3, #1
1a0026fa:	ea4f 0232 	mov.w	r2, r2, rrx
1a0026fe:	ebb6 0e02 	subs.w	lr, r6, r2
1a002702:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002706:	bf22      	ittt	cs
1a002708:	1ab6      	subcs	r6, r6, r2
1a00270a:	4675      	movcs	r5, lr
1a00270c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002710:	ea55 0e06 	orrs.w	lr, r5, r6
1a002714:	d018      	beq.n	1a002748 <__aeabi_ddiv+0x114>
1a002716:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a00271a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a00271e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002722:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002726:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a00272a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a00272e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002732:	d1c0      	bne.n	1a0026b6 <__aeabi_ddiv+0x82>
1a002734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002738:	d10b      	bne.n	1a002752 <__aeabi_ddiv+0x11e>
1a00273a:	ea41 0100 	orr.w	r1, r1, r0
1a00273e:	f04f 0000 	mov.w	r0, #0
1a002742:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002746:	e7b6      	b.n	1a0026b6 <__aeabi_ddiv+0x82>
1a002748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00274c:	bf04      	itt	eq
1a00274e:	4301      	orreq	r1, r0
1a002750:	2000      	moveq	r0, #0
1a002752:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002756:	bf88      	it	hi
1a002758:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a00275c:	f63f aeaf 	bhi.w	1a0024be <__aeabi_dmul+0xde>
1a002760:	ebb5 0c03 	subs.w	ip, r5, r3
1a002764:	bf04      	itt	eq
1a002766:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00276a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00276e:	f150 0000 	adcs.w	r0, r0, #0
1a002772:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002776:	bd70      	pop	{r4, r5, r6, pc}
1a002778:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a00277c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002780:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002784:	bfc2      	ittt	gt
1a002786:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00278a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00278e:	bd70      	popgt	{r4, r5, r6, pc}
1a002790:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002794:	f04f 0e00 	mov.w	lr, #0
1a002798:	3c01      	subs	r4, #1
1a00279a:	e690      	b.n	1a0024be <__aeabi_dmul+0xde>
1a00279c:	ea45 0e06 	orr.w	lr, r5, r6
1a0027a0:	e68d      	b.n	1a0024be <__aeabi_dmul+0xde>
1a0027a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0027a6:	ea94 0f0c 	teq	r4, ip
1a0027aa:	bf08      	it	eq
1a0027ac:	ea95 0f0c 	teqeq	r5, ip
1a0027b0:	f43f af3b 	beq.w	1a00262a <__aeabi_dmul+0x24a>
1a0027b4:	ea94 0f0c 	teq	r4, ip
1a0027b8:	d10a      	bne.n	1a0027d0 <__aeabi_ddiv+0x19c>
1a0027ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0027be:	f47f af34 	bne.w	1a00262a <__aeabi_dmul+0x24a>
1a0027c2:	ea95 0f0c 	teq	r5, ip
1a0027c6:	f47f af25 	bne.w	1a002614 <__aeabi_dmul+0x234>
1a0027ca:	4610      	mov	r0, r2
1a0027cc:	4619      	mov	r1, r3
1a0027ce:	e72c      	b.n	1a00262a <__aeabi_dmul+0x24a>
1a0027d0:	ea95 0f0c 	teq	r5, ip
1a0027d4:	d106      	bne.n	1a0027e4 <__aeabi_ddiv+0x1b0>
1a0027d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0027da:	f43f aefd 	beq.w	1a0025d8 <__aeabi_dmul+0x1f8>
1a0027de:	4610      	mov	r0, r2
1a0027e0:	4619      	mov	r1, r3
1a0027e2:	e722      	b.n	1a00262a <__aeabi_dmul+0x24a>
1a0027e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0027e8:	bf18      	it	ne
1a0027ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0027ee:	f47f aec5 	bne.w	1a00257c <__aeabi_dmul+0x19c>
1a0027f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0027f6:	f47f af0d 	bne.w	1a002614 <__aeabi_dmul+0x234>
1a0027fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0027fe:	f47f aeeb 	bne.w	1a0025d8 <__aeabi_dmul+0x1f8>
1a002802:	e712      	b.n	1a00262a <__aeabi_dmul+0x24a>

1a002804 <__gedf2>:
1a002804:	f04f 3cff 	mov.w	ip, #4294967295
1a002808:	e006      	b.n	1a002818 <__cmpdf2+0x4>
1a00280a:	bf00      	nop

1a00280c <__ledf2>:
1a00280c:	f04f 0c01 	mov.w	ip, #1
1a002810:	e002      	b.n	1a002818 <__cmpdf2+0x4>
1a002812:	bf00      	nop

1a002814 <__cmpdf2>:
1a002814:	f04f 0c01 	mov.w	ip, #1
1a002818:	f84d cd04 	str.w	ip, [sp, #-4]!
1a00281c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002824:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002828:	bf18      	it	ne
1a00282a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a00282e:	d01b      	beq.n	1a002868 <__cmpdf2+0x54>
1a002830:	b001      	add	sp, #4
1a002832:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a002836:	bf0c      	ite	eq
1a002838:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a00283c:	ea91 0f03 	teqne	r1, r3
1a002840:	bf02      	ittt	eq
1a002842:	ea90 0f02 	teqeq	r0, r2
1a002846:	2000      	moveq	r0, #0
1a002848:	4770      	bxeq	lr
1a00284a:	f110 0f00 	cmn.w	r0, #0
1a00284e:	ea91 0f03 	teq	r1, r3
1a002852:	bf58      	it	pl
1a002854:	4299      	cmppl	r1, r3
1a002856:	bf08      	it	eq
1a002858:	4290      	cmpeq	r0, r2
1a00285a:	bf2c      	ite	cs
1a00285c:	17d8      	asrcs	r0, r3, #31
1a00285e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a002862:	f040 0001 	orr.w	r0, r0, #1
1a002866:	4770      	bx	lr
1a002868:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00286c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002870:	d102      	bne.n	1a002878 <__cmpdf2+0x64>
1a002872:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a002876:	d107      	bne.n	1a002888 <__cmpdf2+0x74>
1a002878:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00287c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002880:	d1d6      	bne.n	1a002830 <__cmpdf2+0x1c>
1a002882:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a002886:	d0d3      	beq.n	1a002830 <__cmpdf2+0x1c>
1a002888:	f85d 0b04 	ldr.w	r0, [sp], #4
1a00288c:	4770      	bx	lr
1a00288e:	bf00      	nop

1a002890 <__aeabi_cdrcmple>:
1a002890:	4684      	mov	ip, r0
1a002892:	4610      	mov	r0, r2
1a002894:	4662      	mov	r2, ip
1a002896:	468c      	mov	ip, r1
1a002898:	4619      	mov	r1, r3
1a00289a:	4663      	mov	r3, ip
1a00289c:	e000      	b.n	1a0028a0 <__aeabi_cdcmpeq>
1a00289e:	bf00      	nop

1a0028a0 <__aeabi_cdcmpeq>:
1a0028a0:	b501      	push	{r0, lr}
1a0028a2:	f7ff ffb7 	bl	1a002814 <__cmpdf2>
1a0028a6:	2800      	cmp	r0, #0
1a0028a8:	bf48      	it	mi
1a0028aa:	f110 0f00 	cmnmi.w	r0, #0
1a0028ae:	bd01      	pop	{r0, pc}

1a0028b0 <__aeabi_dcmpeq>:
1a0028b0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0028b4:	f7ff fff4 	bl	1a0028a0 <__aeabi_cdcmpeq>
1a0028b8:	bf0c      	ite	eq
1a0028ba:	2001      	moveq	r0, #1
1a0028bc:	2000      	movne	r0, #0
1a0028be:	f85d fb08 	ldr.w	pc, [sp], #8
1a0028c2:	bf00      	nop

1a0028c4 <__aeabi_dcmplt>:
1a0028c4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0028c8:	f7ff ffea 	bl	1a0028a0 <__aeabi_cdcmpeq>
1a0028cc:	bf34      	ite	cc
1a0028ce:	2001      	movcc	r0, #1
1a0028d0:	2000      	movcs	r0, #0
1a0028d2:	f85d fb08 	ldr.w	pc, [sp], #8
1a0028d6:	bf00      	nop

1a0028d8 <__aeabi_dcmple>:
1a0028d8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0028dc:	f7ff ffe0 	bl	1a0028a0 <__aeabi_cdcmpeq>
1a0028e0:	bf94      	ite	ls
1a0028e2:	2001      	movls	r0, #1
1a0028e4:	2000      	movhi	r0, #0
1a0028e6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0028ea:	bf00      	nop

1a0028ec <__aeabi_dcmpge>:
1a0028ec:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0028f0:	f7ff ffce 	bl	1a002890 <__aeabi_cdrcmple>
1a0028f4:	bf94      	ite	ls
1a0028f6:	2001      	movls	r0, #1
1a0028f8:	2000      	movhi	r0, #0
1a0028fa:	f85d fb08 	ldr.w	pc, [sp], #8
1a0028fe:	bf00      	nop

1a002900 <__aeabi_dcmpgt>:
1a002900:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002904:	f7ff ffc4 	bl	1a002890 <__aeabi_cdrcmple>
1a002908:	bf34      	ite	cc
1a00290a:	2001      	movcc	r0, #1
1a00290c:	2000      	movcs	r0, #0
1a00290e:	f85d fb08 	ldr.w	pc, [sp], #8
1a002912:	bf00      	nop

1a002914 <__aeabi_d2iz>:
1a002914:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002918:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00291c:	d215      	bcs.n	1a00294a <__aeabi_d2iz+0x36>
1a00291e:	d511      	bpl.n	1a002944 <__aeabi_d2iz+0x30>
1a002920:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a002924:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a002928:	d912      	bls.n	1a002950 <__aeabi_d2iz+0x3c>
1a00292a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00292e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a002932:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a002936:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00293a:	fa23 f002 	lsr.w	r0, r3, r2
1a00293e:	bf18      	it	ne
1a002940:	4240      	negne	r0, r0
1a002942:	4770      	bx	lr
1a002944:	f04f 0000 	mov.w	r0, #0
1a002948:	4770      	bx	lr
1a00294a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00294e:	d105      	bne.n	1a00295c <__aeabi_d2iz+0x48>
1a002950:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a002954:	bf08      	it	eq
1a002956:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00295a:	4770      	bx	lr
1a00295c:	f04f 0000 	mov.w	r0, #0
1a002960:	4770      	bx	lr
1a002962:	bf00      	nop

1a002964 <__aeabi_ldivmod>:
1a002964:	b97b      	cbnz	r3, 1a002986 <__aeabi_ldivmod+0x22>
1a002966:	b972      	cbnz	r2, 1a002986 <__aeabi_ldivmod+0x22>
1a002968:	2900      	cmp	r1, #0
1a00296a:	bfbe      	ittt	lt
1a00296c:	2000      	movlt	r0, #0
1a00296e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a002972:	e006      	blt.n	1a002982 <__aeabi_ldivmod+0x1e>
1a002974:	bf08      	it	eq
1a002976:	2800      	cmpeq	r0, #0
1a002978:	bf1c      	itt	ne
1a00297a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a00297e:	f04f 30ff 	movne.w	r0, #4294967295
1a002982:	f000 b9dd 	b.w	1a002d40 <__aeabi_idiv0>
1a002986:	f1ad 0c08 	sub.w	ip, sp, #8
1a00298a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00298e:	2900      	cmp	r1, #0
1a002990:	db09      	blt.n	1a0029a6 <__aeabi_ldivmod+0x42>
1a002992:	2b00      	cmp	r3, #0
1a002994:	db1a      	blt.n	1a0029cc <__aeabi_ldivmod+0x68>
1a002996:	f000 f86b 	bl	1a002a70 <__udivmoddi4>
1a00299a:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00299e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0029a2:	b004      	add	sp, #16
1a0029a4:	4770      	bx	lr
1a0029a6:	4240      	negs	r0, r0
1a0029a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0029ac:	2b00      	cmp	r3, #0
1a0029ae:	db1b      	blt.n	1a0029e8 <__aeabi_ldivmod+0x84>
1a0029b0:	f000 f85e 	bl	1a002a70 <__udivmoddi4>
1a0029b4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0029b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0029bc:	b004      	add	sp, #16
1a0029be:	4240      	negs	r0, r0
1a0029c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0029c4:	4252      	negs	r2, r2
1a0029c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0029ca:	4770      	bx	lr
1a0029cc:	4252      	negs	r2, r2
1a0029ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0029d2:	f000 f84d 	bl	1a002a70 <__udivmoddi4>
1a0029d6:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0029da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0029de:	b004      	add	sp, #16
1a0029e0:	4240      	negs	r0, r0
1a0029e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0029e6:	4770      	bx	lr
1a0029e8:	4252      	negs	r2, r2
1a0029ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0029ee:	f000 f83f 	bl	1a002a70 <__udivmoddi4>
1a0029f2:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0029f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0029fa:	b004      	add	sp, #16
1a0029fc:	4252      	negs	r2, r2
1a0029fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002a02:	4770      	bx	lr

1a002a04 <__aeabi_uldivmod>:
1a002a04:	b953      	cbnz	r3, 1a002a1c <__aeabi_uldivmod+0x18>
1a002a06:	b94a      	cbnz	r2, 1a002a1c <__aeabi_uldivmod+0x18>
1a002a08:	2900      	cmp	r1, #0
1a002a0a:	bf08      	it	eq
1a002a0c:	2800      	cmpeq	r0, #0
1a002a0e:	bf1c      	itt	ne
1a002a10:	f04f 31ff 	movne.w	r1, #4294967295
1a002a14:	f04f 30ff 	movne.w	r0, #4294967295
1a002a18:	f000 b992 	b.w	1a002d40 <__aeabi_idiv0>
1a002a1c:	f1ad 0c08 	sub.w	ip, sp, #8
1a002a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002a24:	f000 f824 	bl	1a002a70 <__udivmoddi4>
1a002a28:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002a30:	b004      	add	sp, #16
1a002a32:	4770      	bx	lr

1a002a34 <__aeabi_d2ulz>:
1a002a34:	b5d0      	push	{r4, r6, r7, lr}
1a002a36:	2200      	movs	r2, #0
1a002a38:	4b0b      	ldr	r3, [pc, #44]	; (1a002a68 <__aeabi_d2ulz+0x34>)
1a002a3a:	4606      	mov	r6, r0
1a002a3c:	460f      	mov	r7, r1
1a002a3e:	f7ff fccf 	bl	1a0023e0 <__aeabi_dmul>
1a002a42:	f000 f97f 	bl	1a002d44 <__aeabi_d2uiz>
1a002a46:	4604      	mov	r4, r0
1a002a48:	f7ff fc50 	bl	1a0022ec <__aeabi_ui2d>
1a002a4c:	2200      	movs	r2, #0
1a002a4e:	4b07      	ldr	r3, [pc, #28]	; (1a002a6c <__aeabi_d2ulz+0x38>)
1a002a50:	f7ff fcc6 	bl	1a0023e0 <__aeabi_dmul>
1a002a54:	4602      	mov	r2, r0
1a002a56:	460b      	mov	r3, r1
1a002a58:	4630      	mov	r0, r6
1a002a5a:	4639      	mov	r1, r7
1a002a5c:	f7ff fb08 	bl	1a002070 <__aeabi_dsub>
1a002a60:	f000 f970 	bl	1a002d44 <__aeabi_d2uiz>
1a002a64:	4621      	mov	r1, r4
1a002a66:	bdd0      	pop	{r4, r6, r7, pc}
1a002a68:	3df00000 	.word	0x3df00000
1a002a6c:	41f00000 	.word	0x41f00000

1a002a70 <__udivmoddi4>:
1a002a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002a74:	9e08      	ldr	r6, [sp, #32]
1a002a76:	4604      	mov	r4, r0
1a002a78:	4688      	mov	r8, r1
1a002a7a:	2b00      	cmp	r3, #0
1a002a7c:	f040 8085 	bne.w	1a002b8a <__udivmoddi4+0x11a>
1a002a80:	428a      	cmp	r2, r1
1a002a82:	4615      	mov	r5, r2
1a002a84:	d948      	bls.n	1a002b18 <__udivmoddi4+0xa8>
1a002a86:	fab2 f282 	clz	r2, r2
1a002a8a:	b14a      	cbz	r2, 1a002aa0 <__udivmoddi4+0x30>
1a002a8c:	f1c2 0720 	rsb	r7, r2, #32
1a002a90:	fa01 f302 	lsl.w	r3, r1, r2
1a002a94:	fa20 f707 	lsr.w	r7, r0, r7
1a002a98:	4095      	lsls	r5, r2
1a002a9a:	ea47 0803 	orr.w	r8, r7, r3
1a002a9e:	4094      	lsls	r4, r2
1a002aa0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002aa4:	0c23      	lsrs	r3, r4, #16
1a002aa6:	fbb8 f7fe 	udiv	r7, r8, lr
1a002aaa:	fa1f fc85 	uxth.w	ip, r5
1a002aae:	fb0e 8817 	mls	r8, lr, r7, r8
1a002ab2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002ab6:	fb07 f10c 	mul.w	r1, r7, ip
1a002aba:	4299      	cmp	r1, r3
1a002abc:	d909      	bls.n	1a002ad2 <__udivmoddi4+0x62>
1a002abe:	18eb      	adds	r3, r5, r3
1a002ac0:	f107 30ff 	add.w	r0, r7, #4294967295
1a002ac4:	f080 80e3 	bcs.w	1a002c8e <__udivmoddi4+0x21e>
1a002ac8:	4299      	cmp	r1, r3
1a002aca:	f240 80e0 	bls.w	1a002c8e <__udivmoddi4+0x21e>
1a002ace:	3f02      	subs	r7, #2
1a002ad0:	442b      	add	r3, r5
1a002ad2:	1a5b      	subs	r3, r3, r1
1a002ad4:	b2a4      	uxth	r4, r4
1a002ad6:	fbb3 f0fe 	udiv	r0, r3, lr
1a002ada:	fb0e 3310 	mls	r3, lr, r0, r3
1a002ade:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002ae2:	fb00 fc0c 	mul.w	ip, r0, ip
1a002ae6:	45a4      	cmp	ip, r4
1a002ae8:	d909      	bls.n	1a002afe <__udivmoddi4+0x8e>
1a002aea:	192c      	adds	r4, r5, r4
1a002aec:	f100 33ff 	add.w	r3, r0, #4294967295
1a002af0:	f080 80cb 	bcs.w	1a002c8a <__udivmoddi4+0x21a>
1a002af4:	45a4      	cmp	ip, r4
1a002af6:	f240 80c8 	bls.w	1a002c8a <__udivmoddi4+0x21a>
1a002afa:	3802      	subs	r0, #2
1a002afc:	442c      	add	r4, r5
1a002afe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002b02:	eba4 040c 	sub.w	r4, r4, ip
1a002b06:	2700      	movs	r7, #0
1a002b08:	b11e      	cbz	r6, 1a002b12 <__udivmoddi4+0xa2>
1a002b0a:	40d4      	lsrs	r4, r2
1a002b0c:	2300      	movs	r3, #0
1a002b0e:	e9c6 4300 	strd	r4, r3, [r6]
1a002b12:	4639      	mov	r1, r7
1a002b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002b18:	2a00      	cmp	r2, #0
1a002b1a:	d053      	beq.n	1a002bc4 <__udivmoddi4+0x154>
1a002b1c:	fab2 f282 	clz	r2, r2
1a002b20:	2a00      	cmp	r2, #0
1a002b22:	f040 80b6 	bne.w	1a002c92 <__udivmoddi4+0x222>
1a002b26:	1b49      	subs	r1, r1, r5
1a002b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002b2c:	fa1f f885 	uxth.w	r8, r5
1a002b30:	2701      	movs	r7, #1
1a002b32:	fbb1 fcfe 	udiv	ip, r1, lr
1a002b36:	0c23      	lsrs	r3, r4, #16
1a002b38:	fb0e 111c 	mls	r1, lr, ip, r1
1a002b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002b40:	fb08 f10c 	mul.w	r1, r8, ip
1a002b44:	4299      	cmp	r1, r3
1a002b46:	d907      	bls.n	1a002b58 <__udivmoddi4+0xe8>
1a002b48:	18eb      	adds	r3, r5, r3
1a002b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
1a002b4e:	d202      	bcs.n	1a002b56 <__udivmoddi4+0xe6>
1a002b50:	4299      	cmp	r1, r3
1a002b52:	f200 80ec 	bhi.w	1a002d2e <__udivmoddi4+0x2be>
1a002b56:	4684      	mov	ip, r0
1a002b58:	1a59      	subs	r1, r3, r1
1a002b5a:	b2a3      	uxth	r3, r4
1a002b5c:	fbb1 f0fe 	udiv	r0, r1, lr
1a002b60:	fb0e 1410 	mls	r4, lr, r0, r1
1a002b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002b68:	fb08 f800 	mul.w	r8, r8, r0
1a002b6c:	45a0      	cmp	r8, r4
1a002b6e:	d907      	bls.n	1a002b80 <__udivmoddi4+0x110>
1a002b70:	192c      	adds	r4, r5, r4
1a002b72:	f100 33ff 	add.w	r3, r0, #4294967295
1a002b76:	d202      	bcs.n	1a002b7e <__udivmoddi4+0x10e>
1a002b78:	45a0      	cmp	r8, r4
1a002b7a:	f200 80dc 	bhi.w	1a002d36 <__udivmoddi4+0x2c6>
1a002b7e:	4618      	mov	r0, r3
1a002b80:	eba4 0408 	sub.w	r4, r4, r8
1a002b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002b88:	e7be      	b.n	1a002b08 <__udivmoddi4+0x98>
1a002b8a:	428b      	cmp	r3, r1
1a002b8c:	d908      	bls.n	1a002ba0 <__udivmoddi4+0x130>
1a002b8e:	2e00      	cmp	r6, #0
1a002b90:	d078      	beq.n	1a002c84 <__udivmoddi4+0x214>
1a002b92:	2700      	movs	r7, #0
1a002b94:	e9c6 0100 	strd	r0, r1, [r6]
1a002b98:	4638      	mov	r0, r7
1a002b9a:	4639      	mov	r1, r7
1a002b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002ba0:	fab3 f783 	clz	r7, r3
1a002ba4:	b97f      	cbnz	r7, 1a002bc6 <__udivmoddi4+0x156>
1a002ba6:	428b      	cmp	r3, r1
1a002ba8:	d302      	bcc.n	1a002bb0 <__udivmoddi4+0x140>
1a002baa:	4282      	cmp	r2, r0
1a002bac:	f200 80bd 	bhi.w	1a002d2a <__udivmoddi4+0x2ba>
1a002bb0:	1a84      	subs	r4, r0, r2
1a002bb2:	eb61 0303 	sbc.w	r3, r1, r3
1a002bb6:	2001      	movs	r0, #1
1a002bb8:	4698      	mov	r8, r3
1a002bba:	2e00      	cmp	r6, #0
1a002bbc:	d0a9      	beq.n	1a002b12 <__udivmoddi4+0xa2>
1a002bbe:	e9c6 4800 	strd	r4, r8, [r6]
1a002bc2:	e7a6      	b.n	1a002b12 <__udivmoddi4+0xa2>
1a002bc4:	deff      	udf	#255	; 0xff
1a002bc6:	f1c7 0520 	rsb	r5, r7, #32
1a002bca:	40bb      	lsls	r3, r7
1a002bcc:	fa22 fc05 	lsr.w	ip, r2, r5
1a002bd0:	ea4c 0c03 	orr.w	ip, ip, r3
1a002bd4:	fa01 f407 	lsl.w	r4, r1, r7
1a002bd8:	fa20 f805 	lsr.w	r8, r0, r5
1a002bdc:	fa21 f305 	lsr.w	r3, r1, r5
1a002be0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002be4:	ea48 0404 	orr.w	r4, r8, r4
1a002be8:	fbb3 f9fe 	udiv	r9, r3, lr
1a002bec:	0c21      	lsrs	r1, r4, #16
1a002bee:	fb0e 3319 	mls	r3, lr, r9, r3
1a002bf2:	fa1f f88c 	uxth.w	r8, ip
1a002bf6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002bfa:	fb09 fa08 	mul.w	sl, r9, r8
1a002bfe:	459a      	cmp	sl, r3
1a002c00:	fa02 f207 	lsl.w	r2, r2, r7
1a002c04:	fa00 f107 	lsl.w	r1, r0, r7
1a002c08:	d90b      	bls.n	1a002c22 <__udivmoddi4+0x1b2>
1a002c0a:	eb1c 0303 	adds.w	r3, ip, r3
1a002c0e:	f109 30ff 	add.w	r0, r9, #4294967295
1a002c12:	f080 8088 	bcs.w	1a002d26 <__udivmoddi4+0x2b6>
1a002c16:	459a      	cmp	sl, r3
1a002c18:	f240 8085 	bls.w	1a002d26 <__udivmoddi4+0x2b6>
1a002c1c:	f1a9 0902 	sub.w	r9, r9, #2
1a002c20:	4463      	add	r3, ip
1a002c22:	eba3 030a 	sub.w	r3, r3, sl
1a002c26:	b2a4      	uxth	r4, r4
1a002c28:	fbb3 f0fe 	udiv	r0, r3, lr
1a002c2c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002c34:	fb00 f808 	mul.w	r8, r0, r8
1a002c38:	45a0      	cmp	r8, r4
1a002c3a:	d908      	bls.n	1a002c4e <__udivmoddi4+0x1de>
1a002c3c:	eb1c 0404 	adds.w	r4, ip, r4
1a002c40:	f100 33ff 	add.w	r3, r0, #4294967295
1a002c44:	d26b      	bcs.n	1a002d1e <__udivmoddi4+0x2ae>
1a002c46:	45a0      	cmp	r8, r4
1a002c48:	d969      	bls.n	1a002d1e <__udivmoddi4+0x2ae>
1a002c4a:	3802      	subs	r0, #2
1a002c4c:	4464      	add	r4, ip
1a002c4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002c52:	eba4 0408 	sub.w	r4, r4, r8
1a002c56:	fba0 8902 	umull	r8, r9, r0, r2
1a002c5a:	454c      	cmp	r4, r9
1a002c5c:	46c6      	mov	lr, r8
1a002c5e:	464b      	mov	r3, r9
1a002c60:	d354      	bcc.n	1a002d0c <__udivmoddi4+0x29c>
1a002c62:	d051      	beq.n	1a002d08 <__udivmoddi4+0x298>
1a002c64:	2e00      	cmp	r6, #0
1a002c66:	d069      	beq.n	1a002d3c <__udivmoddi4+0x2cc>
1a002c68:	ebb1 020e 	subs.w	r2, r1, lr
1a002c6c:	eb64 0403 	sbc.w	r4, r4, r3
1a002c70:	fa04 f505 	lsl.w	r5, r4, r5
1a002c74:	fa22 f307 	lsr.w	r3, r2, r7
1a002c78:	40fc      	lsrs	r4, r7
1a002c7a:	431d      	orrs	r5, r3
1a002c7c:	e9c6 5400 	strd	r5, r4, [r6]
1a002c80:	2700      	movs	r7, #0
1a002c82:	e746      	b.n	1a002b12 <__udivmoddi4+0xa2>
1a002c84:	4637      	mov	r7, r6
1a002c86:	4630      	mov	r0, r6
1a002c88:	e743      	b.n	1a002b12 <__udivmoddi4+0xa2>
1a002c8a:	4618      	mov	r0, r3
1a002c8c:	e737      	b.n	1a002afe <__udivmoddi4+0x8e>
1a002c8e:	4607      	mov	r7, r0
1a002c90:	e71f      	b.n	1a002ad2 <__udivmoddi4+0x62>
1a002c92:	f1c2 0320 	rsb	r3, r2, #32
1a002c96:	fa20 f703 	lsr.w	r7, r0, r3
1a002c9a:	4095      	lsls	r5, r2
1a002c9c:	fa01 f002 	lsl.w	r0, r1, r2
1a002ca0:	fa21 f303 	lsr.w	r3, r1, r3
1a002ca4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002ca8:	4338      	orrs	r0, r7
1a002caa:	0c01      	lsrs	r1, r0, #16
1a002cac:	fbb3 f7fe 	udiv	r7, r3, lr
1a002cb0:	fa1f f885 	uxth.w	r8, r5
1a002cb4:	fb0e 3317 	mls	r3, lr, r7, r3
1a002cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002cbc:	fb07 f308 	mul.w	r3, r7, r8
1a002cc0:	428b      	cmp	r3, r1
1a002cc2:	fa04 f402 	lsl.w	r4, r4, r2
1a002cc6:	d907      	bls.n	1a002cd8 <__udivmoddi4+0x268>
1a002cc8:	1869      	adds	r1, r5, r1
1a002cca:	f107 3cff 	add.w	ip, r7, #4294967295
1a002cce:	d228      	bcs.n	1a002d22 <__udivmoddi4+0x2b2>
1a002cd0:	428b      	cmp	r3, r1
1a002cd2:	d926      	bls.n	1a002d22 <__udivmoddi4+0x2b2>
1a002cd4:	3f02      	subs	r7, #2
1a002cd6:	4429      	add	r1, r5
1a002cd8:	1acb      	subs	r3, r1, r3
1a002cda:	b281      	uxth	r1, r0
1a002cdc:	fbb3 f0fe 	udiv	r0, r3, lr
1a002ce0:	fb0e 3310 	mls	r3, lr, r0, r3
1a002ce4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002ce8:	fb00 f308 	mul.w	r3, r0, r8
1a002cec:	428b      	cmp	r3, r1
1a002cee:	d907      	bls.n	1a002d00 <__udivmoddi4+0x290>
1a002cf0:	1869      	adds	r1, r5, r1
1a002cf2:	f100 3cff 	add.w	ip, r0, #4294967295
1a002cf6:	d210      	bcs.n	1a002d1a <__udivmoddi4+0x2aa>
1a002cf8:	428b      	cmp	r3, r1
1a002cfa:	d90e      	bls.n	1a002d1a <__udivmoddi4+0x2aa>
1a002cfc:	3802      	subs	r0, #2
1a002cfe:	4429      	add	r1, r5
1a002d00:	1ac9      	subs	r1, r1, r3
1a002d02:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002d06:	e714      	b.n	1a002b32 <__udivmoddi4+0xc2>
1a002d08:	4541      	cmp	r1, r8
1a002d0a:	d2ab      	bcs.n	1a002c64 <__udivmoddi4+0x1f4>
1a002d0c:	ebb8 0e02 	subs.w	lr, r8, r2
1a002d10:	eb69 020c 	sbc.w	r2, r9, ip
1a002d14:	3801      	subs	r0, #1
1a002d16:	4613      	mov	r3, r2
1a002d18:	e7a4      	b.n	1a002c64 <__udivmoddi4+0x1f4>
1a002d1a:	4660      	mov	r0, ip
1a002d1c:	e7f0      	b.n	1a002d00 <__udivmoddi4+0x290>
1a002d1e:	4618      	mov	r0, r3
1a002d20:	e795      	b.n	1a002c4e <__udivmoddi4+0x1de>
1a002d22:	4667      	mov	r7, ip
1a002d24:	e7d8      	b.n	1a002cd8 <__udivmoddi4+0x268>
1a002d26:	4681      	mov	r9, r0
1a002d28:	e77b      	b.n	1a002c22 <__udivmoddi4+0x1b2>
1a002d2a:	4638      	mov	r0, r7
1a002d2c:	e745      	b.n	1a002bba <__udivmoddi4+0x14a>
1a002d2e:	f1ac 0c02 	sub.w	ip, ip, #2
1a002d32:	442b      	add	r3, r5
1a002d34:	e710      	b.n	1a002b58 <__udivmoddi4+0xe8>
1a002d36:	3802      	subs	r0, #2
1a002d38:	442c      	add	r4, r5
1a002d3a:	e721      	b.n	1a002b80 <__udivmoddi4+0x110>
1a002d3c:	4637      	mov	r7, r6
1a002d3e:	e6e8      	b.n	1a002b12 <__udivmoddi4+0xa2>

1a002d40 <__aeabi_idiv0>:
1a002d40:	4770      	bx	lr
1a002d42:	bf00      	nop

1a002d44 <__aeabi_d2uiz>:
1a002d44:	004a      	lsls	r2, r1, #1
1a002d46:	d211      	bcs.n	1a002d6c <__aeabi_d2uiz+0x28>
1a002d48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a002d4c:	d211      	bcs.n	1a002d72 <__aeabi_d2uiz+0x2e>
1a002d4e:	d50d      	bpl.n	1a002d6c <__aeabi_d2uiz+0x28>
1a002d50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a002d54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a002d58:	d40e      	bmi.n	1a002d78 <__aeabi_d2uiz+0x34>
1a002d5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a002d62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a002d66:	fa23 f002 	lsr.w	r0, r3, r2
1a002d6a:	4770      	bx	lr
1a002d6c:	f04f 0000 	mov.w	r0, #0
1a002d70:	4770      	bx	lr
1a002d72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a002d76:	d102      	bne.n	1a002d7e <__aeabi_d2uiz+0x3a>
1a002d78:	f04f 30ff 	mov.w	r0, #4294967295
1a002d7c:	4770      	bx	lr
1a002d7e:	f04f 0000 	mov.w	r0, #0
1a002d82:	4770      	bx	lr

1a002d84 <__libc_init_array>:
1a002d84:	b570      	push	{r4, r5, r6, lr}
1a002d86:	4d0d      	ldr	r5, [pc, #52]	; (1a002dbc <__libc_init_array+0x38>)
1a002d88:	4c0d      	ldr	r4, [pc, #52]	; (1a002dc0 <__libc_init_array+0x3c>)
1a002d8a:	1b64      	subs	r4, r4, r5
1a002d8c:	10a4      	asrs	r4, r4, #2
1a002d8e:	2600      	movs	r6, #0
1a002d90:	42a6      	cmp	r6, r4
1a002d92:	d109      	bne.n	1a002da8 <__libc_init_array+0x24>
1a002d94:	4d0b      	ldr	r5, [pc, #44]	; (1a002dc4 <__libc_init_array+0x40>)
1a002d96:	4c0c      	ldr	r4, [pc, #48]	; (1a002dc8 <__libc_init_array+0x44>)
1a002d98:	f7fd fd05 	bl	1a0007a6 <_init>
1a002d9c:	1b64      	subs	r4, r4, r5
1a002d9e:	10a4      	asrs	r4, r4, #2
1a002da0:	2600      	movs	r6, #0
1a002da2:	42a6      	cmp	r6, r4
1a002da4:	d105      	bne.n	1a002db2 <__libc_init_array+0x2e>
1a002da6:	bd70      	pop	{r4, r5, r6, pc}
1a002da8:	f855 3b04 	ldr.w	r3, [r5], #4
1a002dac:	4798      	blx	r3
1a002dae:	3601      	adds	r6, #1
1a002db0:	e7ee      	b.n	1a002d90 <__libc_init_array+0xc>
1a002db2:	f855 3b04 	ldr.w	r3, [r5], #4
1a002db6:	4798      	blx	r3
1a002db8:	3601      	adds	r6, #1
1a002dba:	e7f2      	b.n	1a002da2 <__libc_init_array+0x1e>
1a002dbc:	1a0051e4 	.word	0x1a0051e4
1a002dc0:	1a0051e4 	.word	0x1a0051e4
1a002dc4:	1a0051e4 	.word	0x1a0051e4
1a002dc8:	1a0051e8 	.word	0x1a0051e8

1a002dcc <__retarget_lock_acquire_recursive>:
1a002dcc:	4770      	bx	lr

1a002dce <__retarget_lock_release_recursive>:
1a002dce:	4770      	bx	lr

1a002dd0 <memcpy>:
1a002dd0:	440a      	add	r2, r1
1a002dd2:	4291      	cmp	r1, r2
1a002dd4:	f100 33ff 	add.w	r3, r0, #4294967295
1a002dd8:	d100      	bne.n	1a002ddc <memcpy+0xc>
1a002dda:	4770      	bx	lr
1a002ddc:	b510      	push	{r4, lr}
1a002dde:	f811 4b01 	ldrb.w	r4, [r1], #1
1a002de2:	f803 4f01 	strb.w	r4, [r3, #1]!
1a002de6:	4291      	cmp	r1, r2
1a002de8:	d1f9      	bne.n	1a002dde <memcpy+0xe>
1a002dea:	bd10      	pop	{r4, pc}

1a002dec <memset>:
1a002dec:	4402      	add	r2, r0
1a002dee:	4603      	mov	r3, r0
1a002df0:	4293      	cmp	r3, r2
1a002df2:	d100      	bne.n	1a002df6 <memset+0xa>
1a002df4:	4770      	bx	lr
1a002df6:	f803 1b01 	strb.w	r1, [r3], #1
1a002dfa:	e7f9      	b.n	1a002df0 <memset+0x4>

1a002dfc <_malloc_r>:
1a002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002dfe:	1ccd      	adds	r5, r1, #3
1a002e00:	f025 0503 	bic.w	r5, r5, #3
1a002e04:	3508      	adds	r5, #8
1a002e06:	2d0c      	cmp	r5, #12
1a002e08:	bf38      	it	cc
1a002e0a:	250c      	movcc	r5, #12
1a002e0c:	2d00      	cmp	r5, #0
1a002e0e:	4606      	mov	r6, r0
1a002e10:	db01      	blt.n	1a002e16 <_malloc_r+0x1a>
1a002e12:	42a9      	cmp	r1, r5
1a002e14:	d903      	bls.n	1a002e1e <_malloc_r+0x22>
1a002e16:	230c      	movs	r3, #12
1a002e18:	6033      	str	r3, [r6, #0]
1a002e1a:	2000      	movs	r0, #0
1a002e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002e1e:	f001 f9e1 	bl	1a0041e4 <__malloc_lock>
1a002e22:	4921      	ldr	r1, [pc, #132]	; (1a002ea8 <_malloc_r+0xac>)
1a002e24:	680a      	ldr	r2, [r1, #0]
1a002e26:	4614      	mov	r4, r2
1a002e28:	b99c      	cbnz	r4, 1a002e52 <_malloc_r+0x56>
1a002e2a:	4f20      	ldr	r7, [pc, #128]	; (1a002eac <_malloc_r+0xb0>)
1a002e2c:	683b      	ldr	r3, [r7, #0]
1a002e2e:	b923      	cbnz	r3, 1a002e3a <_malloc_r+0x3e>
1a002e30:	4621      	mov	r1, r4
1a002e32:	4630      	mov	r0, r6
1a002e34:	f7fd fcb8 	bl	1a0007a8 <_sbrk_r>
1a002e38:	6038      	str	r0, [r7, #0]
1a002e3a:	4629      	mov	r1, r5
1a002e3c:	4630      	mov	r0, r6
1a002e3e:	f7fd fcb3 	bl	1a0007a8 <_sbrk_r>
1a002e42:	1c43      	adds	r3, r0, #1
1a002e44:	d123      	bne.n	1a002e8e <_malloc_r+0x92>
1a002e46:	230c      	movs	r3, #12
1a002e48:	6033      	str	r3, [r6, #0]
1a002e4a:	4630      	mov	r0, r6
1a002e4c:	f001 f9d0 	bl	1a0041f0 <__malloc_unlock>
1a002e50:	e7e3      	b.n	1a002e1a <_malloc_r+0x1e>
1a002e52:	6823      	ldr	r3, [r4, #0]
1a002e54:	1b5b      	subs	r3, r3, r5
1a002e56:	d417      	bmi.n	1a002e88 <_malloc_r+0x8c>
1a002e58:	2b0b      	cmp	r3, #11
1a002e5a:	d903      	bls.n	1a002e64 <_malloc_r+0x68>
1a002e5c:	6023      	str	r3, [r4, #0]
1a002e5e:	441c      	add	r4, r3
1a002e60:	6025      	str	r5, [r4, #0]
1a002e62:	e004      	b.n	1a002e6e <_malloc_r+0x72>
1a002e64:	6863      	ldr	r3, [r4, #4]
1a002e66:	42a2      	cmp	r2, r4
1a002e68:	bf0c      	ite	eq
1a002e6a:	600b      	streq	r3, [r1, #0]
1a002e6c:	6053      	strne	r3, [r2, #4]
1a002e6e:	4630      	mov	r0, r6
1a002e70:	f001 f9be 	bl	1a0041f0 <__malloc_unlock>
1a002e74:	f104 000b 	add.w	r0, r4, #11
1a002e78:	1d23      	adds	r3, r4, #4
1a002e7a:	f020 0007 	bic.w	r0, r0, #7
1a002e7e:	1ac2      	subs	r2, r0, r3
1a002e80:	d0cc      	beq.n	1a002e1c <_malloc_r+0x20>
1a002e82:	1a1b      	subs	r3, r3, r0
1a002e84:	50a3      	str	r3, [r4, r2]
1a002e86:	e7c9      	b.n	1a002e1c <_malloc_r+0x20>
1a002e88:	4622      	mov	r2, r4
1a002e8a:	6864      	ldr	r4, [r4, #4]
1a002e8c:	e7cc      	b.n	1a002e28 <_malloc_r+0x2c>
1a002e8e:	1cc4      	adds	r4, r0, #3
1a002e90:	f024 0403 	bic.w	r4, r4, #3
1a002e94:	42a0      	cmp	r0, r4
1a002e96:	d0e3      	beq.n	1a002e60 <_malloc_r+0x64>
1a002e98:	1a21      	subs	r1, r4, r0
1a002e9a:	4630      	mov	r0, r6
1a002e9c:	f7fd fc84 	bl	1a0007a8 <_sbrk_r>
1a002ea0:	3001      	adds	r0, #1
1a002ea2:	d1dd      	bne.n	1a002e60 <_malloc_r+0x64>
1a002ea4:	e7cf      	b.n	1a002e46 <_malloc_r+0x4a>
1a002ea6:	bf00      	nop
1a002ea8:	100002f0 	.word	0x100002f0
1a002eac:	100002f4 	.word	0x100002f4

1a002eb0 <strcpy>:
1a002eb0:	4603      	mov	r3, r0
1a002eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
1a002eb6:	f803 2b01 	strb.w	r2, [r3], #1
1a002eba:	2a00      	cmp	r2, #0
1a002ebc:	d1f9      	bne.n	1a002eb2 <strcpy+0x2>
1a002ebe:	4770      	bx	lr

1a002ec0 <strlen>:
1a002ec0:	4603      	mov	r3, r0
1a002ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
1a002ec6:	2a00      	cmp	r2, #0
1a002ec8:	d1fb      	bne.n	1a002ec2 <strlen+0x2>
1a002eca:	1a18      	subs	r0, r3, r0
1a002ecc:	3801      	subs	r0, #1
1a002ece:	4770      	bx	lr

1a002ed0 <sulp>:
1a002ed0:	b570      	push	{r4, r5, r6, lr}
1a002ed2:	4604      	mov	r4, r0
1a002ed4:	460d      	mov	r5, r1
1a002ed6:	ec45 4b10 	vmov	d0, r4, r5
1a002eda:	4616      	mov	r6, r2
1a002edc:	f001 fc54 	bl	1a004788 <__ulp>
1a002ee0:	ec51 0b10 	vmov	r0, r1, d0
1a002ee4:	b17e      	cbz	r6, 1a002f06 <sulp+0x36>
1a002ee6:	f3c5 530a 	ubfx	r3, r5, #20, #11
1a002eea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
1a002eee:	2b00      	cmp	r3, #0
1a002ef0:	dd09      	ble.n	1a002f06 <sulp+0x36>
1a002ef2:	051b      	lsls	r3, r3, #20
1a002ef4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
1a002ef8:	2400      	movs	r4, #0
1a002efa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
1a002efe:	4622      	mov	r2, r4
1a002f00:	462b      	mov	r3, r5
1a002f02:	f7ff fa6d 	bl	1a0023e0 <__aeabi_dmul>
1a002f06:	bd70      	pop	{r4, r5, r6, pc}

1a002f08 <_strtod_l>:
1a002f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002f0c:	b0a1      	sub	sp, #132	; 0x84
1a002f0e:	461f      	mov	r7, r3
1a002f10:	2300      	movs	r3, #0
1a002f12:	931c      	str	r3, [sp, #112]	; 0x70
1a002f14:	4b9b      	ldr	r3, [pc, #620]	; (1a003184 <_strtod_l+0x27c>)
1a002f16:	9004      	str	r0, [sp, #16]
1a002f18:	681b      	ldr	r3, [r3, #0]
1a002f1a:	9217      	str	r2, [sp, #92]	; 0x5c
1a002f1c:	4618      	mov	r0, r3
1a002f1e:	460e      	mov	r6, r1
1a002f20:	9305      	str	r3, [sp, #20]
1a002f22:	f7ff ffcd 	bl	1a002ec0 <strlen>
1a002f26:	f04f 0a00 	mov.w	sl, #0
1a002f2a:	4604      	mov	r4, r0
1a002f2c:	f04f 0b00 	mov.w	fp, #0
1a002f30:	961b      	str	r6, [sp, #108]	; 0x6c
1a002f32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
1a002f34:	7813      	ldrb	r3, [r2, #0]
1a002f36:	2b0d      	cmp	r3, #13
1a002f38:	d832      	bhi.n	1a002fa0 <_strtod_l+0x98>
1a002f3a:	2b09      	cmp	r3, #9
1a002f3c:	d236      	bcs.n	1a002fac <_strtod_l+0xa4>
1a002f3e:	2b00      	cmp	r3, #0
1a002f40:	d03e      	beq.n	1a002fc0 <_strtod_l+0xb8>
1a002f42:	2300      	movs	r3, #0
1a002f44:	930c      	str	r3, [sp, #48]	; 0x30
1a002f46:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1a002f48:	782b      	ldrb	r3, [r5, #0]
1a002f4a:	2b30      	cmp	r3, #48	; 0x30
1a002f4c:	f040 80a9 	bne.w	1a0030a2 <_strtod_l+0x19a>
1a002f50:	786b      	ldrb	r3, [r5, #1]
1a002f52:	2b58      	cmp	r3, #88	; 0x58
1a002f54:	d001      	beq.n	1a002f5a <_strtod_l+0x52>
1a002f56:	2b78      	cmp	r3, #120	; 0x78
1a002f58:	d167      	bne.n	1a00302a <_strtod_l+0x122>
1a002f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a002f5c:	9301      	str	r3, [sp, #4]
1a002f5e:	ab1c      	add	r3, sp, #112	; 0x70
1a002f60:	9300      	str	r3, [sp, #0]
1a002f62:	9702      	str	r7, [sp, #8]
1a002f64:	ab1d      	add	r3, sp, #116	; 0x74
1a002f66:	4a88      	ldr	r2, [pc, #544]	; (1a003188 <_strtod_l+0x280>)
1a002f68:	9804      	ldr	r0, [sp, #16]
1a002f6a:	a91b      	add	r1, sp, #108	; 0x6c
1a002f6c:	f000 fe46 	bl	1a003bfc <__gethex>
1a002f70:	f010 0407 	ands.w	r4, r0, #7
1a002f74:	4606      	mov	r6, r0
1a002f76:	d005      	beq.n	1a002f84 <_strtod_l+0x7c>
1a002f78:	2c06      	cmp	r4, #6
1a002f7a:	d12b      	bne.n	1a002fd4 <_strtod_l+0xcc>
1a002f7c:	3501      	adds	r5, #1
1a002f7e:	2300      	movs	r3, #0
1a002f80:	951b      	str	r5, [sp, #108]	; 0x6c
1a002f82:	930c      	str	r3, [sp, #48]	; 0x30
1a002f84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a002f86:	2b00      	cmp	r3, #0
1a002f88:	f040 8576 	bne.w	1a003a78 <_strtod_l+0xb70>
1a002f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a002f8e:	b1e3      	cbz	r3, 1a002fca <_strtod_l+0xc2>
1a002f90:	4652      	mov	r2, sl
1a002f92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
1a002f96:	ec43 2b10 	vmov	d0, r2, r3
1a002f9a:	b021      	add	sp, #132	; 0x84
1a002f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002fa0:	2b2b      	cmp	r3, #43	; 0x2b
1a002fa2:	d006      	beq.n	1a002fb2 <_strtod_l+0xaa>
1a002fa4:	2b2d      	cmp	r3, #45	; 0x2d
1a002fa6:	d013      	beq.n	1a002fd0 <_strtod_l+0xc8>
1a002fa8:	2b20      	cmp	r3, #32
1a002faa:	d1ca      	bne.n	1a002f42 <_strtod_l+0x3a>
1a002fac:	3201      	adds	r2, #1
1a002fae:	921b      	str	r2, [sp, #108]	; 0x6c
1a002fb0:	e7bf      	b.n	1a002f32 <_strtod_l+0x2a>
1a002fb2:	2300      	movs	r3, #0
1a002fb4:	930c      	str	r3, [sp, #48]	; 0x30
1a002fb6:	1c53      	adds	r3, r2, #1
1a002fb8:	931b      	str	r3, [sp, #108]	; 0x6c
1a002fba:	7853      	ldrb	r3, [r2, #1]
1a002fbc:	2b00      	cmp	r3, #0
1a002fbe:	d1c2      	bne.n	1a002f46 <_strtod_l+0x3e>
1a002fc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a002fc2:	961b      	str	r6, [sp, #108]	; 0x6c
1a002fc4:	2b00      	cmp	r3, #0
1a002fc6:	f040 8555 	bne.w	1a003a74 <_strtod_l+0xb6c>
1a002fca:	4652      	mov	r2, sl
1a002fcc:	465b      	mov	r3, fp
1a002fce:	e7e2      	b.n	1a002f96 <_strtod_l+0x8e>
1a002fd0:	2301      	movs	r3, #1
1a002fd2:	e7ef      	b.n	1a002fb4 <_strtod_l+0xac>
1a002fd4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
1a002fd6:	b13a      	cbz	r2, 1a002fe8 <_strtod_l+0xe0>
1a002fd8:	2135      	movs	r1, #53	; 0x35
1a002fda:	a81e      	add	r0, sp, #120	; 0x78
1a002fdc:	f001 fccb 	bl	1a004976 <__copybits>
1a002fe0:	991c      	ldr	r1, [sp, #112]	; 0x70
1a002fe2:	9804      	ldr	r0, [sp, #16]
1a002fe4:	f001 f93e 	bl	1a004264 <_Bfree>
1a002fe8:	3c01      	subs	r4, #1
1a002fea:	2c04      	cmp	r4, #4
1a002fec:	d806      	bhi.n	1a002ffc <_strtod_l+0xf4>
1a002fee:	e8df f004 	tbb	[pc, r4]
1a002ff2:	030a      	.short	0x030a
1a002ff4:	1714      	.short	0x1714
1a002ff6:	0a          	.byte	0x0a
1a002ff7:	00          	.byte	0x00
1a002ff8:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
1a002ffc:	0731      	lsls	r1, r6, #28
1a002ffe:	d5c1      	bpl.n	1a002f84 <_strtod_l+0x7c>
1a003000:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
1a003004:	e7be      	b.n	1a002f84 <_strtod_l+0x7c>
1a003006:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
1a00300a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
1a00300c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
1a003010:	f202 4233 	addw	r2, r2, #1075	; 0x433
1a003014:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
1a003018:	e7f0      	b.n	1a002ffc <_strtod_l+0xf4>
1a00301a:	f8df b170 	ldr.w	fp, [pc, #368]	; 1a00318c <_strtod_l+0x284>
1a00301e:	e7ed      	b.n	1a002ffc <_strtod_l+0xf4>
1a003020:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
1a003024:	f04f 3aff 	mov.w	sl, #4294967295
1a003028:	e7e8      	b.n	1a002ffc <_strtod_l+0xf4>
1a00302a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a00302c:	1c5a      	adds	r2, r3, #1
1a00302e:	921b      	str	r2, [sp, #108]	; 0x6c
1a003030:	785b      	ldrb	r3, [r3, #1]
1a003032:	2b30      	cmp	r3, #48	; 0x30
1a003034:	d0f9      	beq.n	1a00302a <_strtod_l+0x122>
1a003036:	2b00      	cmp	r3, #0
1a003038:	d0a4      	beq.n	1a002f84 <_strtod_l+0x7c>
1a00303a:	2301      	movs	r3, #1
1a00303c:	f04f 0900 	mov.w	r9, #0
1a003040:	9306      	str	r3, [sp, #24]
1a003042:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a003044:	9309      	str	r3, [sp, #36]	; 0x24
1a003046:	f8cd 901c 	str.w	r9, [sp, #28]
1a00304a:	46c8      	mov	r8, r9
1a00304c:	220a      	movs	r2, #10
1a00304e:	981b      	ldr	r0, [sp, #108]	; 0x6c
1a003050:	7805      	ldrb	r5, [r0, #0]
1a003052:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
1a003056:	b2d9      	uxtb	r1, r3
1a003058:	2909      	cmp	r1, #9
1a00305a:	d924      	bls.n	1a0030a6 <_strtod_l+0x19e>
1a00305c:	4622      	mov	r2, r4
1a00305e:	9905      	ldr	r1, [sp, #20]
1a003060:	f001 fcda 	bl	1a004a18 <strncmp>
1a003064:	b378      	cbz	r0, 1a0030c6 <_strtod_l+0x1be>
1a003066:	2000      	movs	r0, #0
1a003068:	462b      	mov	r3, r5
1a00306a:	4644      	mov	r4, r8
1a00306c:	9005      	str	r0, [sp, #20]
1a00306e:	4602      	mov	r2, r0
1a003070:	2b65      	cmp	r3, #101	; 0x65
1a003072:	d001      	beq.n	1a003078 <_strtod_l+0x170>
1a003074:	2b45      	cmp	r3, #69	; 0x45
1a003076:	d112      	bne.n	1a00309e <_strtod_l+0x196>
1a003078:	b91c      	cbnz	r4, 1a003082 <_strtod_l+0x17a>
1a00307a:	9b06      	ldr	r3, [sp, #24]
1a00307c:	4303      	orrs	r3, r0
1a00307e:	d09f      	beq.n	1a002fc0 <_strtod_l+0xb8>
1a003080:	2400      	movs	r4, #0
1a003082:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
1a003084:	1c73      	adds	r3, r6, #1
1a003086:	931b      	str	r3, [sp, #108]	; 0x6c
1a003088:	7873      	ldrb	r3, [r6, #1]
1a00308a:	2b2b      	cmp	r3, #43	; 0x2b
1a00308c:	d072      	beq.n	1a003174 <_strtod_l+0x26c>
1a00308e:	2b2d      	cmp	r3, #45	; 0x2d
1a003090:	d075      	beq.n	1a00317e <_strtod_l+0x276>
1a003092:	2700      	movs	r7, #0
1a003094:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
1a003098:	2909      	cmp	r1, #9
1a00309a:	d97d      	bls.n	1a003198 <_strtod_l+0x290>
1a00309c:	961b      	str	r6, [sp, #108]	; 0x6c
1a00309e:	2500      	movs	r5, #0
1a0030a0:	e09a      	b.n	1a0031d8 <_strtod_l+0x2d0>
1a0030a2:	2300      	movs	r3, #0
1a0030a4:	e7ca      	b.n	1a00303c <_strtod_l+0x134>
1a0030a6:	f1b8 0f08 	cmp.w	r8, #8
1a0030aa:	bfd8      	it	le
1a0030ac:	9907      	ldrle	r1, [sp, #28]
1a0030ae:	f100 0001 	add.w	r0, r0, #1
1a0030b2:	bfda      	itte	le
1a0030b4:	fb02 3301 	mlale	r3, r2, r1, r3
1a0030b8:	9307      	strle	r3, [sp, #28]
1a0030ba:	fb02 3909 	mlagt	r9, r2, r9, r3
1a0030be:	f108 0801 	add.w	r8, r8, #1
1a0030c2:	901b      	str	r0, [sp, #108]	; 0x6c
1a0030c4:	e7c3      	b.n	1a00304e <_strtod_l+0x146>
1a0030c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0030c8:	191a      	adds	r2, r3, r4
1a0030ca:	921b      	str	r2, [sp, #108]	; 0x6c
1a0030cc:	5d1b      	ldrb	r3, [r3, r4]
1a0030ce:	f1b8 0f00 	cmp.w	r8, #0
1a0030d2:	d036      	beq.n	1a003142 <_strtod_l+0x23a>
1a0030d4:	9005      	str	r0, [sp, #20]
1a0030d6:	4644      	mov	r4, r8
1a0030d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a0030dc:	2a09      	cmp	r2, #9
1a0030de:	d912      	bls.n	1a003106 <_strtod_l+0x1fe>
1a0030e0:	2201      	movs	r2, #1
1a0030e2:	e7c5      	b.n	1a003070 <_strtod_l+0x168>
1a0030e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0030e6:	1c5a      	adds	r2, r3, #1
1a0030e8:	921b      	str	r2, [sp, #108]	; 0x6c
1a0030ea:	785b      	ldrb	r3, [r3, #1]
1a0030ec:	3001      	adds	r0, #1
1a0030ee:	2b30      	cmp	r3, #48	; 0x30
1a0030f0:	d0f8      	beq.n	1a0030e4 <_strtod_l+0x1dc>
1a0030f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
1a0030f6:	2a08      	cmp	r2, #8
1a0030f8:	f200 84c3 	bhi.w	1a003a82 <_strtod_l+0xb7a>
1a0030fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
1a0030fe:	9005      	str	r0, [sp, #20]
1a003100:	2000      	movs	r0, #0
1a003102:	9209      	str	r2, [sp, #36]	; 0x24
1a003104:	4604      	mov	r4, r0
1a003106:	3b30      	subs	r3, #48	; 0x30
1a003108:	f100 0201 	add.w	r2, r0, #1
1a00310c:	d013      	beq.n	1a003136 <_strtod_l+0x22e>
1a00310e:	9905      	ldr	r1, [sp, #20]
1a003110:	4411      	add	r1, r2
1a003112:	9105      	str	r1, [sp, #20]
1a003114:	4622      	mov	r2, r4
1a003116:	1905      	adds	r5, r0, r4
1a003118:	210a      	movs	r1, #10
1a00311a:	42aa      	cmp	r2, r5
1a00311c:	d113      	bne.n	1a003146 <_strtod_l+0x23e>
1a00311e:	1822      	adds	r2, r4, r0
1a003120:	2a08      	cmp	r2, #8
1a003122:	f104 0401 	add.w	r4, r4, #1
1a003126:	4404      	add	r4, r0
1a003128:	dc1a      	bgt.n	1a003160 <_strtod_l+0x258>
1a00312a:	9907      	ldr	r1, [sp, #28]
1a00312c:	220a      	movs	r2, #10
1a00312e:	fb02 3301 	mla	r3, r2, r1, r3
1a003132:	9307      	str	r3, [sp, #28]
1a003134:	2200      	movs	r2, #0
1a003136:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a003138:	1c59      	adds	r1, r3, #1
1a00313a:	911b      	str	r1, [sp, #108]	; 0x6c
1a00313c:	785b      	ldrb	r3, [r3, #1]
1a00313e:	4610      	mov	r0, r2
1a003140:	e7ca      	b.n	1a0030d8 <_strtod_l+0x1d0>
1a003142:	4640      	mov	r0, r8
1a003144:	e7d3      	b.n	1a0030ee <_strtod_l+0x1e6>
1a003146:	2a08      	cmp	r2, #8
1a003148:	dc04      	bgt.n	1a003154 <_strtod_l+0x24c>
1a00314a:	9f07      	ldr	r7, [sp, #28]
1a00314c:	434f      	muls	r7, r1
1a00314e:	9707      	str	r7, [sp, #28]
1a003150:	3201      	adds	r2, #1
1a003152:	e7e2      	b.n	1a00311a <_strtod_l+0x212>
1a003154:	1c57      	adds	r7, r2, #1
1a003156:	2f10      	cmp	r7, #16
1a003158:	bfd8      	it	le
1a00315a:	fb01 f909 	mulle.w	r9, r1, r9
1a00315e:	e7f7      	b.n	1a003150 <_strtod_l+0x248>
1a003160:	2c10      	cmp	r4, #16
1a003162:	bfdc      	itt	le
1a003164:	220a      	movle	r2, #10
1a003166:	fb02 3909 	mlale	r9, r2, r9, r3
1a00316a:	e7e3      	b.n	1a003134 <_strtod_l+0x22c>
1a00316c:	2300      	movs	r3, #0
1a00316e:	9305      	str	r3, [sp, #20]
1a003170:	2201      	movs	r2, #1
1a003172:	e782      	b.n	1a00307a <_strtod_l+0x172>
1a003174:	2700      	movs	r7, #0
1a003176:	1cb3      	adds	r3, r6, #2
1a003178:	931b      	str	r3, [sp, #108]	; 0x6c
1a00317a:	78b3      	ldrb	r3, [r6, #2]
1a00317c:	e78a      	b.n	1a003094 <_strtod_l+0x18c>
1a00317e:	2701      	movs	r7, #1
1a003180:	e7f9      	b.n	1a003176 <_strtod_l+0x26e>
1a003182:	bf00      	nop
1a003184:	1a0050d0 	.word	0x1a0050d0
1a003188:	1a00507c 	.word	0x1a00507c
1a00318c:	7ff00000 	.word	0x7ff00000
1a003190:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a003192:	1c59      	adds	r1, r3, #1
1a003194:	911b      	str	r1, [sp, #108]	; 0x6c
1a003196:	785b      	ldrb	r3, [r3, #1]
1a003198:	2b30      	cmp	r3, #48	; 0x30
1a00319a:	d0f9      	beq.n	1a003190 <_strtod_l+0x288>
1a00319c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
1a0031a0:	2908      	cmp	r1, #8
1a0031a2:	f63f af7c 	bhi.w	1a00309e <_strtod_l+0x196>
1a0031a6:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
1a0031aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0031ac:	9308      	str	r3, [sp, #32]
1a0031ae:	f04f 0e0a 	mov.w	lr, #10
1a0031b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0031b4:	1c59      	adds	r1, r3, #1
1a0031b6:	911b      	str	r1, [sp, #108]	; 0x6c
1a0031b8:	785b      	ldrb	r3, [r3, #1]
1a0031ba:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
1a0031be:	2d09      	cmp	r5, #9
1a0031c0:	d92e      	bls.n	1a003220 <_strtod_l+0x318>
1a0031c2:	9d08      	ldr	r5, [sp, #32]
1a0031c4:	1b49      	subs	r1, r1, r5
1a0031c6:	2908      	cmp	r1, #8
1a0031c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
1a0031cc:	dc02      	bgt.n	1a0031d4 <_strtod_l+0x2cc>
1a0031ce:	4565      	cmp	r5, ip
1a0031d0:	bfa8      	it	ge
1a0031d2:	4665      	movge	r5, ip
1a0031d4:	b107      	cbz	r7, 1a0031d8 <_strtod_l+0x2d0>
1a0031d6:	426d      	negs	r5, r5
1a0031d8:	2c00      	cmp	r4, #0
1a0031da:	d14b      	bne.n	1a003274 <_strtod_l+0x36c>
1a0031dc:	9906      	ldr	r1, [sp, #24]
1a0031de:	4301      	orrs	r1, r0
1a0031e0:	f47f aed0 	bne.w	1a002f84 <_strtod_l+0x7c>
1a0031e4:	2a00      	cmp	r2, #0
1a0031e6:	f47f aeeb 	bne.w	1a002fc0 <_strtod_l+0xb8>
1a0031ea:	2b4e      	cmp	r3, #78	; 0x4e
1a0031ec:	d022      	beq.n	1a003234 <_strtod_l+0x32c>
1a0031ee:	dc1c      	bgt.n	1a00322a <_strtod_l+0x322>
1a0031f0:	2b49      	cmp	r3, #73	; 0x49
1a0031f2:	f47f aee5 	bne.w	1a002fc0 <_strtod_l+0xb8>
1a0031f6:	499a      	ldr	r1, [pc, #616]	; (1a003460 <_strtod_l+0x558>)
1a0031f8:	a81b      	add	r0, sp, #108	; 0x6c
1a0031fa:	f000 ff35 	bl	1a004068 <__match>
1a0031fe:	2800      	cmp	r0, #0
1a003200:	f43f aede 	beq.w	1a002fc0 <_strtod_l+0xb8>
1a003204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a003206:	4997      	ldr	r1, [pc, #604]	; (1a003464 <_strtod_l+0x55c>)
1a003208:	3b01      	subs	r3, #1
1a00320a:	a81b      	add	r0, sp, #108	; 0x6c
1a00320c:	931b      	str	r3, [sp, #108]	; 0x6c
1a00320e:	f000 ff2b 	bl	1a004068 <__match>
1a003212:	b910      	cbnz	r0, 1a00321a <_strtod_l+0x312>
1a003214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a003216:	3301      	adds	r3, #1
1a003218:	931b      	str	r3, [sp, #108]	; 0x6c
1a00321a:	f8df b260 	ldr.w	fp, [pc, #608]	; 1a00347c <_strtod_l+0x574>
1a00321e:	e6b1      	b.n	1a002f84 <_strtod_l+0x7c>
1a003220:	fb0e 3c0c 	mla	ip, lr, ip, r3
1a003224:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
1a003228:	e7c3      	b.n	1a0031b2 <_strtod_l+0x2aa>
1a00322a:	2b69      	cmp	r3, #105	; 0x69
1a00322c:	d0e3      	beq.n	1a0031f6 <_strtod_l+0x2ee>
1a00322e:	2b6e      	cmp	r3, #110	; 0x6e
1a003230:	f47f aec6 	bne.w	1a002fc0 <_strtod_l+0xb8>
1a003234:	498c      	ldr	r1, [pc, #560]	; (1a003468 <_strtod_l+0x560>)
1a003236:	a81b      	add	r0, sp, #108	; 0x6c
1a003238:	f000 ff16 	bl	1a004068 <__match>
1a00323c:	2800      	cmp	r0, #0
1a00323e:	f43f aebf 	beq.w	1a002fc0 <_strtod_l+0xb8>
1a003242:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a003244:	781b      	ldrb	r3, [r3, #0]
1a003246:	2b28      	cmp	r3, #40	; 0x28
1a003248:	d10e      	bne.n	1a003268 <_strtod_l+0x360>
1a00324a:	aa1e      	add	r2, sp, #120	; 0x78
1a00324c:	4987      	ldr	r1, [pc, #540]	; (1a00346c <_strtod_l+0x564>)
1a00324e:	a81b      	add	r0, sp, #108	; 0x6c
1a003250:	f000 ff1e 	bl	1a004090 <__hexnan>
1a003254:	2805      	cmp	r0, #5
1a003256:	d107      	bne.n	1a003268 <_strtod_l+0x360>
1a003258:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a00325a:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
1a00325e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
1a003262:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
1a003266:	e68d      	b.n	1a002f84 <_strtod_l+0x7c>
1a003268:	4881      	ldr	r0, [pc, #516]	; (1a003470 <_strtod_l+0x568>)
1a00326a:	f001 fbcd 	bl	1a004a08 <nan>
1a00326e:	ec5b ab10 	vmov	sl, fp, d0
1a003272:	e687      	b.n	1a002f84 <_strtod_l+0x7c>
1a003274:	9b05      	ldr	r3, [sp, #20]
1a003276:	9807      	ldr	r0, [sp, #28]
1a003278:	1aeb      	subs	r3, r5, r3
1a00327a:	f1b8 0f00 	cmp.w	r8, #0
1a00327e:	bf08      	it	eq
1a003280:	46a0      	moveq	r8, r4
1a003282:	2c10      	cmp	r4, #16
1a003284:	9308      	str	r3, [sp, #32]
1a003286:	4626      	mov	r6, r4
1a003288:	bfa8      	it	ge
1a00328a:	2610      	movge	r6, #16
1a00328c:	f7ff f82e 	bl	1a0022ec <__aeabi_ui2d>
1a003290:	2c09      	cmp	r4, #9
1a003292:	4682      	mov	sl, r0
1a003294:	468b      	mov	fp, r1
1a003296:	dd13      	ble.n	1a0032c0 <_strtod_l+0x3b8>
1a003298:	4b76      	ldr	r3, [pc, #472]	; (1a003474 <_strtod_l+0x56c>)
1a00329a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a00329e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
1a0032a2:	f7ff f89d 	bl	1a0023e0 <__aeabi_dmul>
1a0032a6:	4682      	mov	sl, r0
1a0032a8:	4648      	mov	r0, r9
1a0032aa:	468b      	mov	fp, r1
1a0032ac:	f7ff f81e 	bl	1a0022ec <__aeabi_ui2d>
1a0032b0:	4602      	mov	r2, r0
1a0032b2:	460b      	mov	r3, r1
1a0032b4:	4650      	mov	r0, sl
1a0032b6:	4659      	mov	r1, fp
1a0032b8:	f7fe fedc 	bl	1a002074 <__adddf3>
1a0032bc:	4682      	mov	sl, r0
1a0032be:	468b      	mov	fp, r1
1a0032c0:	2c0f      	cmp	r4, #15
1a0032c2:	dc38      	bgt.n	1a003336 <_strtod_l+0x42e>
1a0032c4:	9b08      	ldr	r3, [sp, #32]
1a0032c6:	2b00      	cmp	r3, #0
1a0032c8:	f43f ae5c 	beq.w	1a002f84 <_strtod_l+0x7c>
1a0032cc:	dd24      	ble.n	1a003318 <_strtod_l+0x410>
1a0032ce:	2b16      	cmp	r3, #22
1a0032d0:	dc0b      	bgt.n	1a0032ea <_strtod_l+0x3e2>
1a0032d2:	4c68      	ldr	r4, [pc, #416]	; (1a003474 <_strtod_l+0x56c>)
1a0032d4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
1a0032d8:	e9d4 0100 	ldrd	r0, r1, [r4]
1a0032dc:	4652      	mov	r2, sl
1a0032de:	465b      	mov	r3, fp
1a0032e0:	f7ff f87e 	bl	1a0023e0 <__aeabi_dmul>
1a0032e4:	4682      	mov	sl, r0
1a0032e6:	468b      	mov	fp, r1
1a0032e8:	e64c      	b.n	1a002f84 <_strtod_l+0x7c>
1a0032ea:	9a08      	ldr	r2, [sp, #32]
1a0032ec:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
1a0032f0:	4293      	cmp	r3, r2
1a0032f2:	db20      	blt.n	1a003336 <_strtod_l+0x42e>
1a0032f4:	4d5f      	ldr	r5, [pc, #380]	; (1a003474 <_strtod_l+0x56c>)
1a0032f6:	f1c4 040f 	rsb	r4, r4, #15
1a0032fa:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
1a0032fe:	4652      	mov	r2, sl
1a003300:	465b      	mov	r3, fp
1a003302:	e9d1 0100 	ldrd	r0, r1, [r1]
1a003306:	f7ff f86b 	bl	1a0023e0 <__aeabi_dmul>
1a00330a:	9b08      	ldr	r3, [sp, #32]
1a00330c:	1b1c      	subs	r4, r3, r4
1a00330e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
1a003312:	e9d5 2300 	ldrd	r2, r3, [r5]
1a003316:	e7e3      	b.n	1a0032e0 <_strtod_l+0x3d8>
1a003318:	9b08      	ldr	r3, [sp, #32]
1a00331a:	3316      	adds	r3, #22
1a00331c:	db0b      	blt.n	1a003336 <_strtod_l+0x42e>
1a00331e:	9b05      	ldr	r3, [sp, #20]
1a003320:	4a54      	ldr	r2, [pc, #336]	; (1a003474 <_strtod_l+0x56c>)
1a003322:	1b5d      	subs	r5, r3, r5
1a003324:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
1a003328:	e9d5 2300 	ldrd	r2, r3, [r5]
1a00332c:	4650      	mov	r0, sl
1a00332e:	4659      	mov	r1, fp
1a003330:	f7ff f980 	bl	1a002634 <__aeabi_ddiv>
1a003334:	e7d6      	b.n	1a0032e4 <_strtod_l+0x3dc>
1a003336:	9b08      	ldr	r3, [sp, #32]
1a003338:	1ba6      	subs	r6, r4, r6
1a00333a:	441e      	add	r6, r3
1a00333c:	2e00      	cmp	r6, #0
1a00333e:	dd6e      	ble.n	1a00341e <_strtod_l+0x516>
1a003340:	f016 030f 	ands.w	r3, r6, #15
1a003344:	d00a      	beq.n	1a00335c <_strtod_l+0x454>
1a003346:	494b      	ldr	r1, [pc, #300]	; (1a003474 <_strtod_l+0x56c>)
1a003348:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
1a00334c:	4652      	mov	r2, sl
1a00334e:	465b      	mov	r3, fp
1a003350:	e9d1 0100 	ldrd	r0, r1, [r1]
1a003354:	f7ff f844 	bl	1a0023e0 <__aeabi_dmul>
1a003358:	4682      	mov	sl, r0
1a00335a:	468b      	mov	fp, r1
1a00335c:	f036 060f 	bics.w	r6, r6, #15
1a003360:	d04e      	beq.n	1a003400 <_strtod_l+0x4f8>
1a003362:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
1a003366:	dd23      	ble.n	1a0033b0 <_strtod_l+0x4a8>
1a003368:	2400      	movs	r4, #0
1a00336a:	9405      	str	r4, [sp, #20]
1a00336c:	9409      	str	r4, [sp, #36]	; 0x24
1a00336e:	9407      	str	r4, [sp, #28]
1a003370:	9a04      	ldr	r2, [sp, #16]
1a003372:	f8df b108 	ldr.w	fp, [pc, #264]	; 1a00347c <_strtod_l+0x574>
1a003376:	2322      	movs	r3, #34	; 0x22
1a003378:	6013      	str	r3, [r2, #0]
1a00337a:	f04f 0a00 	mov.w	sl, #0
1a00337e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003380:	2b00      	cmp	r3, #0
1a003382:	f43f adff 	beq.w	1a002f84 <_strtod_l+0x7c>
1a003386:	991c      	ldr	r1, [sp, #112]	; 0x70
1a003388:	9804      	ldr	r0, [sp, #16]
1a00338a:	f000 ff6b 	bl	1a004264 <_Bfree>
1a00338e:	9907      	ldr	r1, [sp, #28]
1a003390:	9804      	ldr	r0, [sp, #16]
1a003392:	f000 ff67 	bl	1a004264 <_Bfree>
1a003396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00339a:	f000 ff63 	bl	1a004264 <_Bfree>
1a00339e:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0033a0:	9804      	ldr	r0, [sp, #16]
1a0033a2:	f000 ff5f 	bl	1a004264 <_Bfree>
1a0033a6:	4621      	mov	r1, r4
1a0033a8:	9804      	ldr	r0, [sp, #16]
1a0033aa:	f000 ff5b 	bl	1a004264 <_Bfree>
1a0033ae:	e5e9      	b.n	1a002f84 <_strtod_l+0x7c>
1a0033b0:	2300      	movs	r3, #0
1a0033b2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 1a003478 <_strtod_l+0x570>
1a0033b6:	1136      	asrs	r6, r6, #4
1a0033b8:	4650      	mov	r0, sl
1a0033ba:	4659      	mov	r1, fp
1a0033bc:	461f      	mov	r7, r3
1a0033be:	2e01      	cmp	r6, #1
1a0033c0:	dc21      	bgt.n	1a003406 <_strtod_l+0x4fe>
1a0033c2:	b10b      	cbz	r3, 1a0033c8 <_strtod_l+0x4c0>
1a0033c4:	4682      	mov	sl, r0
1a0033c6:	468b      	mov	fp, r1
1a0033c8:	4b2b      	ldr	r3, [pc, #172]	; (1a003478 <_strtod_l+0x570>)
1a0033ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
1a0033ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
1a0033d2:	4652      	mov	r2, sl
1a0033d4:	465b      	mov	r3, fp
1a0033d6:	e9d7 0100 	ldrd	r0, r1, [r7]
1a0033da:	f7ff f801 	bl	1a0023e0 <__aeabi_dmul>
1a0033de:	4b27      	ldr	r3, [pc, #156]	; (1a00347c <_strtod_l+0x574>)
1a0033e0:	460a      	mov	r2, r1
1a0033e2:	400b      	ands	r3, r1
1a0033e4:	4926      	ldr	r1, [pc, #152]	; (1a003480 <_strtod_l+0x578>)
1a0033e6:	428b      	cmp	r3, r1
1a0033e8:	4682      	mov	sl, r0
1a0033ea:	d8bd      	bhi.n	1a003368 <_strtod_l+0x460>
1a0033ec:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
1a0033f0:	428b      	cmp	r3, r1
1a0033f2:	bf86      	itte	hi
1a0033f4:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 1a003484 <_strtod_l+0x57c>
1a0033f8:	f04f 3aff 	movhi.w	sl, #4294967295
1a0033fc:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
1a003400:	2300      	movs	r3, #0
1a003402:	9306      	str	r3, [sp, #24]
1a003404:	e079      	b.n	1a0034fa <_strtod_l+0x5f2>
1a003406:	07f2      	lsls	r2, r6, #31
1a003408:	d506      	bpl.n	1a003418 <_strtod_l+0x510>
1a00340a:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
1a00340e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003412:	f7fe ffe5 	bl	1a0023e0 <__aeabi_dmul>
1a003416:	2301      	movs	r3, #1
1a003418:	3701      	adds	r7, #1
1a00341a:	1076      	asrs	r6, r6, #1
1a00341c:	e7cf      	b.n	1a0033be <_strtod_l+0x4b6>
1a00341e:	d0ef      	beq.n	1a003400 <_strtod_l+0x4f8>
1a003420:	4276      	negs	r6, r6
1a003422:	f016 020f 	ands.w	r2, r6, #15
1a003426:	d00a      	beq.n	1a00343e <_strtod_l+0x536>
1a003428:	4b12      	ldr	r3, [pc, #72]	; (1a003474 <_strtod_l+0x56c>)
1a00342a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00342e:	4650      	mov	r0, sl
1a003430:	4659      	mov	r1, fp
1a003432:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003436:	f7ff f8fd 	bl	1a002634 <__aeabi_ddiv>
1a00343a:	4682      	mov	sl, r0
1a00343c:	468b      	mov	fp, r1
1a00343e:	1136      	asrs	r6, r6, #4
1a003440:	d0de      	beq.n	1a003400 <_strtod_l+0x4f8>
1a003442:	2e1f      	cmp	r6, #31
1a003444:	dd20      	ble.n	1a003488 <_strtod_l+0x580>
1a003446:	2400      	movs	r4, #0
1a003448:	9405      	str	r4, [sp, #20]
1a00344a:	9409      	str	r4, [sp, #36]	; 0x24
1a00344c:	9407      	str	r4, [sp, #28]
1a00344e:	9a04      	ldr	r2, [sp, #16]
1a003450:	2322      	movs	r3, #34	; 0x22
1a003452:	f04f 0a00 	mov.w	sl, #0
1a003456:	f04f 0b00 	mov.w	fp, #0
1a00345a:	6013      	str	r3, [r2, #0]
1a00345c:	e78f      	b.n	1a00337e <_strtod_l+0x476>
1a00345e:	bf00      	nop
1a003460:	1a005070 	.word	0x1a005070
1a003464:	1a005073 	.word	0x1a005073
1a003468:	1a005079 	.word	0x1a005079
1a00346c:	1a005090 	.word	0x1a005090
1a003470:	1a0050dd 	.word	0x1a0050dd
1a003474:	1a005110 	.word	0x1a005110
1a003478:	1a0050e8 	.word	0x1a0050e8
1a00347c:	7ff00000 	.word	0x7ff00000
1a003480:	7ca00000 	.word	0x7ca00000
1a003484:	7fefffff 	.word	0x7fefffff
1a003488:	f016 0310 	ands.w	r3, r6, #16
1a00348c:	bf18      	it	ne
1a00348e:	236a      	movne	r3, #106	; 0x6a
1a003490:	4fae      	ldr	r7, [pc, #696]	; (1a00374c <_strtod_l+0x844>)
1a003492:	9306      	str	r3, [sp, #24]
1a003494:	4650      	mov	r0, sl
1a003496:	4659      	mov	r1, fp
1a003498:	2300      	movs	r3, #0
1a00349a:	07f2      	lsls	r2, r6, #31
1a00349c:	d504      	bpl.n	1a0034a8 <_strtod_l+0x5a0>
1a00349e:	e9d7 2300 	ldrd	r2, r3, [r7]
1a0034a2:	f7fe ff9d 	bl	1a0023e0 <__aeabi_dmul>
1a0034a6:	2301      	movs	r3, #1
1a0034a8:	1076      	asrs	r6, r6, #1
1a0034aa:	f107 0708 	add.w	r7, r7, #8
1a0034ae:	d1f4      	bne.n	1a00349a <_strtod_l+0x592>
1a0034b0:	b10b      	cbz	r3, 1a0034b6 <_strtod_l+0x5ae>
1a0034b2:	4682      	mov	sl, r0
1a0034b4:	468b      	mov	fp, r1
1a0034b6:	9b06      	ldr	r3, [sp, #24]
1a0034b8:	b1bb      	cbz	r3, 1a0034ea <_strtod_l+0x5e2>
1a0034ba:	f3cb 530a 	ubfx	r3, fp, #20, #11
1a0034be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
1a0034c2:	2b00      	cmp	r3, #0
1a0034c4:	4659      	mov	r1, fp
1a0034c6:	dd10      	ble.n	1a0034ea <_strtod_l+0x5e2>
1a0034c8:	2b1f      	cmp	r3, #31
1a0034ca:	f340 8129 	ble.w	1a003720 <_strtod_l+0x818>
1a0034ce:	2b34      	cmp	r3, #52	; 0x34
1a0034d0:	bfde      	ittt	le
1a0034d2:	3b20      	suble	r3, #32
1a0034d4:	f04f 32ff 	movle.w	r2, #4294967295
1a0034d8:	fa02 f303 	lslle.w	r3, r2, r3
1a0034dc:	f04f 0a00 	mov.w	sl, #0
1a0034e0:	bfcc      	ite	gt
1a0034e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
1a0034e6:	ea03 0b01 	andle.w	fp, r3, r1
1a0034ea:	2200      	movs	r2, #0
1a0034ec:	2300      	movs	r3, #0
1a0034ee:	4650      	mov	r0, sl
1a0034f0:	4659      	mov	r1, fp
1a0034f2:	f7ff f9dd 	bl	1a0028b0 <__aeabi_dcmpeq>
1a0034f6:	2800      	cmp	r0, #0
1a0034f8:	d1a5      	bne.n	1a003446 <_strtod_l+0x53e>
1a0034fa:	9b07      	ldr	r3, [sp, #28]
1a0034fc:	9300      	str	r3, [sp, #0]
1a0034fe:	4642      	mov	r2, r8
1a003500:	4623      	mov	r3, r4
1a003502:	9909      	ldr	r1, [sp, #36]	; 0x24
1a003504:	9804      	ldr	r0, [sp, #16]
1a003506:	f000 feff 	bl	1a004308 <__s2b>
1a00350a:	9009      	str	r0, [sp, #36]	; 0x24
1a00350c:	2800      	cmp	r0, #0
1a00350e:	f43f af2b 	beq.w	1a003368 <_strtod_l+0x460>
1a003512:	9b05      	ldr	r3, [sp, #20]
1a003514:	1b5d      	subs	r5, r3, r5
1a003516:	9b08      	ldr	r3, [sp, #32]
1a003518:	2b00      	cmp	r3, #0
1a00351a:	bfb4      	ite	lt
1a00351c:	462b      	movlt	r3, r5
1a00351e:	2300      	movge	r3, #0
1a003520:	930e      	str	r3, [sp, #56]	; 0x38
1a003522:	9b08      	ldr	r3, [sp, #32]
1a003524:	2400      	movs	r4, #0
1a003526:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a00352a:	9316      	str	r3, [sp, #88]	; 0x58
1a00352c:	9405      	str	r4, [sp, #20]
1a00352e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003530:	9804      	ldr	r0, [sp, #16]
1a003532:	6859      	ldr	r1, [r3, #4]
1a003534:	f000 fe62 	bl	1a0041fc <_Balloc>
1a003538:	9007      	str	r0, [sp, #28]
1a00353a:	2800      	cmp	r0, #0
1a00353c:	f43f af18 	beq.w	1a003370 <_strtod_l+0x468>
1a003540:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003542:	691a      	ldr	r2, [r3, #16]
1a003544:	3202      	adds	r2, #2
1a003546:	f103 010c 	add.w	r1, r3, #12
1a00354a:	0092      	lsls	r2, r2, #2
1a00354c:	300c      	adds	r0, #12
1a00354e:	f7ff fc3f 	bl	1a002dd0 <memcpy>
1a003552:	aa1e      	add	r2, sp, #120	; 0x78
1a003554:	a91d      	add	r1, sp, #116	; 0x74
1a003556:	ec4b ab10 	vmov	d0, sl, fp
1a00355a:	9804      	ldr	r0, [sp, #16]
1a00355c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
1a003560:	f001 f988 	bl	1a004874 <__d2b>
1a003564:	901c      	str	r0, [sp, #112]	; 0x70
1a003566:	2800      	cmp	r0, #0
1a003568:	f43f af02 	beq.w	1a003370 <_strtod_l+0x468>
1a00356c:	2101      	movs	r1, #1
1a00356e:	9804      	ldr	r0, [sp, #16]
1a003570:	f000 ff58 	bl	1a004424 <__i2b>
1a003574:	9005      	str	r0, [sp, #20]
1a003576:	4603      	mov	r3, r0
1a003578:	2800      	cmp	r0, #0
1a00357a:	f43f aef9 	beq.w	1a003370 <_strtod_l+0x468>
1a00357e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
1a003580:	9a1e      	ldr	r2, [sp, #120]	; 0x78
1a003582:	2e00      	cmp	r6, #0
1a003584:	bfab      	itete	ge
1a003586:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
1a003588:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
1a00358a:	9d16      	ldrge	r5, [sp, #88]	; 0x58
1a00358c:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
1a00358e:	bfac      	ite	ge
1a003590:	18f7      	addge	r7, r6, r3
1a003592:	1b9d      	sublt	r5, r3, r6
1a003594:	9b06      	ldr	r3, [sp, #24]
1a003596:	1af6      	subs	r6, r6, r3
1a003598:	4416      	add	r6, r2
1a00359a:	4b6d      	ldr	r3, [pc, #436]	; (1a003750 <_strtod_l+0x848>)
1a00359c:	3e01      	subs	r6, #1
1a00359e:	429e      	cmp	r6, r3
1a0035a0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
1a0035a4:	f280 80c3 	bge.w	1a00372e <_strtod_l+0x826>
1a0035a8:	1b9b      	subs	r3, r3, r6
1a0035aa:	2b1f      	cmp	r3, #31
1a0035ac:	bfc2      	ittt	gt
1a0035ae:	f1c6 467f 	rsbgt	r6, r6, #4278190080	; 0xff000000
1a0035b2:	f506 067f 	addgt.w	r6, r6, #16711680	; 0xff0000
1a0035b6:	f506 467b 	addgt.w	r6, r6, #64256	; 0xfb00
1a0035ba:	f04f 0801 	mov.w	r8, #1
1a0035be:	bfc8      	it	gt
1a0035c0:	36e2      	addgt	r6, #226	; 0xe2
1a0035c2:	eba2 0203 	sub.w	r2, r2, r3
1a0035c6:	bfda      	itte	le
1a0035c8:	fa08 f803 	lslle.w	r8, r8, r3
1a0035cc:	2600      	movle	r6, #0
1a0035ce:	fa08 f606 	lslgt.w	r6, r8, r6
1a0035d2:	eb07 0902 	add.w	r9, r7, r2
1a0035d6:	9b06      	ldr	r3, [sp, #24]
1a0035d8:	454f      	cmp	r7, r9
1a0035da:	4415      	add	r5, r2
1a0035dc:	441d      	add	r5, r3
1a0035de:	463b      	mov	r3, r7
1a0035e0:	bfa8      	it	ge
1a0035e2:	464b      	movge	r3, r9
1a0035e4:	42ab      	cmp	r3, r5
1a0035e6:	bfa8      	it	ge
1a0035e8:	462b      	movge	r3, r5
1a0035ea:	2b00      	cmp	r3, #0
1a0035ec:	bfc2      	ittt	gt
1a0035ee:	eba9 0903 	subgt.w	r9, r9, r3
1a0035f2:	1aed      	subgt	r5, r5, r3
1a0035f4:	1aff      	subgt	r7, r7, r3
1a0035f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0035f8:	2b00      	cmp	r3, #0
1a0035fa:	dd17      	ble.n	1a00362c <_strtod_l+0x724>
1a0035fc:	461a      	mov	r2, r3
1a0035fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a003602:	f000 ffa9 	bl	1a004558 <__pow5mult>
1a003606:	9005      	str	r0, [sp, #20]
1a003608:	2800      	cmp	r0, #0
1a00360a:	f43f aeb1 	beq.w	1a003370 <_strtod_l+0x468>
1a00360e:	4601      	mov	r1, r0
1a003610:	9a1c      	ldr	r2, [sp, #112]	; 0x70
1a003612:	9804      	ldr	r0, [sp, #16]
1a003614:	f000 ff0f 	bl	1a004436 <__multiply>
1a003618:	900d      	str	r0, [sp, #52]	; 0x34
1a00361a:	2800      	cmp	r0, #0
1a00361c:	f43f aea8 	beq.w	1a003370 <_strtod_l+0x468>
1a003620:	991c      	ldr	r1, [sp, #112]	; 0x70
1a003622:	9804      	ldr	r0, [sp, #16]
1a003624:	f000 fe1e 	bl	1a004264 <_Bfree>
1a003628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00362a:	931c      	str	r3, [sp, #112]	; 0x70
1a00362c:	f1b9 0f00 	cmp.w	r9, #0
1a003630:	f300 8081 	bgt.w	1a003736 <_strtod_l+0x82e>
1a003634:	9b08      	ldr	r3, [sp, #32]
1a003636:	2b00      	cmp	r3, #0
1a003638:	dd08      	ble.n	1a00364c <_strtod_l+0x744>
1a00363a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a00363c:	9907      	ldr	r1, [sp, #28]
1a00363e:	9804      	ldr	r0, [sp, #16]
1a003640:	f000 ff8a 	bl	1a004558 <__pow5mult>
1a003644:	9007      	str	r0, [sp, #28]
1a003646:	2800      	cmp	r0, #0
1a003648:	f43f ae92 	beq.w	1a003370 <_strtod_l+0x468>
1a00364c:	2d00      	cmp	r5, #0
1a00364e:	dd08      	ble.n	1a003662 <_strtod_l+0x75a>
1a003650:	462a      	mov	r2, r5
1a003652:	9907      	ldr	r1, [sp, #28]
1a003654:	9804      	ldr	r0, [sp, #16]
1a003656:	f000 ffcd 	bl	1a0045f4 <__lshift>
1a00365a:	9007      	str	r0, [sp, #28]
1a00365c:	2800      	cmp	r0, #0
1a00365e:	f43f ae87 	beq.w	1a003370 <_strtod_l+0x468>
1a003662:	2f00      	cmp	r7, #0
1a003664:	dd08      	ble.n	1a003678 <_strtod_l+0x770>
1a003666:	463a      	mov	r2, r7
1a003668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00366c:	f000 ffc2 	bl	1a0045f4 <__lshift>
1a003670:	9005      	str	r0, [sp, #20]
1a003672:	2800      	cmp	r0, #0
1a003674:	f43f ae7c 	beq.w	1a003370 <_strtod_l+0x468>
1a003678:	9a07      	ldr	r2, [sp, #28]
1a00367a:	991c      	ldr	r1, [sp, #112]	; 0x70
1a00367c:	9804      	ldr	r0, [sp, #16]
1a00367e:	f001 f826 	bl	1a0046ce <__mdiff>
1a003682:	4604      	mov	r4, r0
1a003684:	2800      	cmp	r0, #0
1a003686:	f43f ae73 	beq.w	1a003370 <_strtod_l+0x468>
1a00368a:	68c3      	ldr	r3, [r0, #12]
1a00368c:	930d      	str	r3, [sp, #52]	; 0x34
1a00368e:	2300      	movs	r3, #0
1a003690:	60c3      	str	r3, [r0, #12]
1a003692:	9905      	ldr	r1, [sp, #20]
1a003694:	f001 f801 	bl	1a00469a <__mcmp>
1a003698:	2800      	cmp	r0, #0
1a00369a:	da5f      	bge.n	1a00375c <_strtod_l+0x854>
1a00369c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00369e:	ea53 030a 	orrs.w	r3, r3, sl
1a0036a2:	f040 8081 	bne.w	1a0037a8 <_strtod_l+0x8a0>
1a0036a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
1a0036aa:	2b00      	cmp	r3, #0
1a0036ac:	d17c      	bne.n	1a0037a8 <_strtod_l+0x8a0>
1a0036ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
1a0036b2:	0d1b      	lsrs	r3, r3, #20
1a0036b4:	051b      	lsls	r3, r3, #20
1a0036b6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
1a0036ba:	d975      	bls.n	1a0037a8 <_strtod_l+0x8a0>
1a0036bc:	6963      	ldr	r3, [r4, #20]
1a0036be:	b913      	cbnz	r3, 1a0036c6 <_strtod_l+0x7be>
1a0036c0:	6923      	ldr	r3, [r4, #16]
1a0036c2:	2b01      	cmp	r3, #1
1a0036c4:	dd70      	ble.n	1a0037a8 <_strtod_l+0x8a0>
1a0036c6:	4621      	mov	r1, r4
1a0036c8:	2201      	movs	r2, #1
1a0036ca:	9804      	ldr	r0, [sp, #16]
1a0036cc:	f000 ff92 	bl	1a0045f4 <__lshift>
1a0036d0:	9905      	ldr	r1, [sp, #20]
1a0036d2:	4604      	mov	r4, r0
1a0036d4:	f000 ffe1 	bl	1a00469a <__mcmp>
1a0036d8:	2800      	cmp	r0, #0
1a0036da:	dd65      	ble.n	1a0037a8 <_strtod_l+0x8a0>
1a0036dc:	9906      	ldr	r1, [sp, #24]
1a0036de:	4a1d      	ldr	r2, [pc, #116]	; (1a003754 <_strtod_l+0x84c>)
1a0036e0:	465b      	mov	r3, fp
1a0036e2:	2900      	cmp	r1, #0
1a0036e4:	d07f      	beq.n	1a0037e6 <_strtod_l+0x8de>
1a0036e6:	ea02 010b 	and.w	r1, r2, fp
1a0036ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
1a0036ee:	dc7a      	bgt.n	1a0037e6 <_strtod_l+0x8de>
1a0036f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
1a0036f4:	f77f aeab 	ble.w	1a00344e <_strtod_l+0x546>
1a0036f8:	4a17      	ldr	r2, [pc, #92]	; (1a003758 <_strtod_l+0x850>)
1a0036fa:	2300      	movs	r3, #0
1a0036fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
1a003700:	4650      	mov	r0, sl
1a003702:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a003706:	4659      	mov	r1, fp
1a003708:	f7fe fe6a 	bl	1a0023e0 <__aeabi_dmul>
1a00370c:	460b      	mov	r3, r1
1a00370e:	4303      	orrs	r3, r0
1a003710:	bf04      	itt	eq
1a003712:	9a04      	ldreq	r2, [sp, #16]
1a003714:	2322      	moveq	r3, #34	; 0x22
1a003716:	4682      	mov	sl, r0
1a003718:	468b      	mov	fp, r1
1a00371a:	bf08      	it	eq
1a00371c:	6013      	streq	r3, [r2, #0]
1a00371e:	e632      	b.n	1a003386 <_strtod_l+0x47e>
1a003720:	f04f 32ff 	mov.w	r2, #4294967295
1a003724:	fa02 f303 	lsl.w	r3, r2, r3
1a003728:	ea03 0a0a 	and.w	sl, r3, sl
1a00372c:	e6dd      	b.n	1a0034ea <_strtod_l+0x5e2>
1a00372e:	2600      	movs	r6, #0
1a003730:	f04f 0801 	mov.w	r8, #1
1a003734:	e74d      	b.n	1a0035d2 <_strtod_l+0x6ca>
1a003736:	464a      	mov	r2, r9
1a003738:	991c      	ldr	r1, [sp, #112]	; 0x70
1a00373a:	9804      	ldr	r0, [sp, #16]
1a00373c:	f000 ff5a 	bl	1a0045f4 <__lshift>
1a003740:	901c      	str	r0, [sp, #112]	; 0x70
1a003742:	2800      	cmp	r0, #0
1a003744:	f47f af76 	bne.w	1a003634 <_strtod_l+0x72c>
1a003748:	e612      	b.n	1a003370 <_strtod_l+0x468>
1a00374a:	bf00      	nop
1a00374c:	1a0050a8 	.word	0x1a0050a8
1a003750:	fffffc02 	.word	0xfffffc02
1a003754:	7ff00000 	.word	0x7ff00000
1a003758:	39500000 	.word	0x39500000
1a00375c:	465d      	mov	r5, fp
1a00375e:	d160      	bne.n	1a003822 <_strtod_l+0x91a>
1a003760:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a003762:	f3cb 0313 	ubfx	r3, fp, #0, #20
1a003766:	b342      	cbz	r2, 1a0037ba <_strtod_l+0x8b2>
1a003768:	4ab7      	ldr	r2, [pc, #732]	; (1a003a48 <_strtod_l+0xb40>)
1a00376a:	4293      	cmp	r3, r2
1a00376c:	d128      	bne.n	1a0037c0 <_strtod_l+0x8b8>
1a00376e:	9b06      	ldr	r3, [sp, #24]
1a003770:	4650      	mov	r0, sl
1a003772:	b1eb      	cbz	r3, 1a0037b0 <_strtod_l+0x8a8>
1a003774:	4ab5      	ldr	r2, [pc, #724]	; (1a003a4c <_strtod_l+0xb44>)
1a003776:	402a      	ands	r2, r5
1a003778:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
1a00377c:	f04f 31ff 	mov.w	r1, #4294967295
1a003780:	d819      	bhi.n	1a0037b6 <_strtod_l+0x8ae>
1a003782:	0d12      	lsrs	r2, r2, #20
1a003784:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
1a003788:	fa01 f303 	lsl.w	r3, r1, r3
1a00378c:	4298      	cmp	r0, r3
1a00378e:	d117      	bne.n	1a0037c0 <_strtod_l+0x8b8>
1a003790:	4baf      	ldr	r3, [pc, #700]	; (1a003a50 <_strtod_l+0xb48>)
1a003792:	429d      	cmp	r5, r3
1a003794:	d102      	bne.n	1a00379c <_strtod_l+0x894>
1a003796:	3001      	adds	r0, #1
1a003798:	f43f adea 	beq.w	1a003370 <_strtod_l+0x468>
1a00379c:	4bab      	ldr	r3, [pc, #684]	; (1a003a4c <_strtod_l+0xb44>)
1a00379e:	402b      	ands	r3, r5
1a0037a0:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
1a0037a4:	f04f 0a00 	mov.w	sl, #0
1a0037a8:	9b06      	ldr	r3, [sp, #24]
1a0037aa:	2b00      	cmp	r3, #0
1a0037ac:	d1a4      	bne.n	1a0036f8 <_strtod_l+0x7f0>
1a0037ae:	e5ea      	b.n	1a003386 <_strtod_l+0x47e>
1a0037b0:	f04f 33ff 	mov.w	r3, #4294967295
1a0037b4:	e7ea      	b.n	1a00378c <_strtod_l+0x884>
1a0037b6:	460b      	mov	r3, r1
1a0037b8:	e7e8      	b.n	1a00378c <_strtod_l+0x884>
1a0037ba:	ea53 030a 	orrs.w	r3, r3, sl
1a0037be:	d08d      	beq.n	1a0036dc <_strtod_l+0x7d4>
1a0037c0:	b1de      	cbz	r6, 1a0037fa <_strtod_l+0x8f2>
1a0037c2:	422e      	tst	r6, r5
1a0037c4:	d0f0      	beq.n	1a0037a8 <_strtod_l+0x8a0>
1a0037c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0037c8:	9a06      	ldr	r2, [sp, #24]
1a0037ca:	4650      	mov	r0, sl
1a0037cc:	4659      	mov	r1, fp
1a0037ce:	b1bb      	cbz	r3, 1a003800 <_strtod_l+0x8f8>
1a0037d0:	f7ff fb7e 	bl	1a002ed0 <sulp>
1a0037d4:	4602      	mov	r2, r0
1a0037d6:	460b      	mov	r3, r1
1a0037d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a0037dc:	f7fe fc4a 	bl	1a002074 <__adddf3>
1a0037e0:	4682      	mov	sl, r0
1a0037e2:	468b      	mov	fp, r1
1a0037e4:	e7e0      	b.n	1a0037a8 <_strtod_l+0x8a0>
1a0037e6:	4013      	ands	r3, r2
1a0037e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
1a0037ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
1a0037f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
1a0037f4:	f04f 3aff 	mov.w	sl, #4294967295
1a0037f8:	e7d6      	b.n	1a0037a8 <_strtod_l+0x8a0>
1a0037fa:	ea18 0f0a 	tst.w	r8, sl
1a0037fe:	e7e1      	b.n	1a0037c4 <_strtod_l+0x8bc>
1a003800:	f7ff fb66 	bl	1a002ed0 <sulp>
1a003804:	4602      	mov	r2, r0
1a003806:	460b      	mov	r3, r1
1a003808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00380c:	f7fe fc30 	bl	1a002070 <__aeabi_dsub>
1a003810:	2200      	movs	r2, #0
1a003812:	2300      	movs	r3, #0
1a003814:	4682      	mov	sl, r0
1a003816:	468b      	mov	fp, r1
1a003818:	f7ff f84a 	bl	1a0028b0 <__aeabi_dcmpeq>
1a00381c:	2800      	cmp	r0, #0
1a00381e:	d0c3      	beq.n	1a0037a8 <_strtod_l+0x8a0>
1a003820:	e615      	b.n	1a00344e <_strtod_l+0x546>
1a003822:	9905      	ldr	r1, [sp, #20]
1a003824:	4620      	mov	r0, r4
1a003826:	f001 f873 	bl	1a004910 <__ratio>
1a00382a:	ec57 6b10 	vmov	r6, r7, d0
1a00382e:	2200      	movs	r2, #0
1a003830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a003834:	ee10 0a10 	vmov	r0, s0
1a003838:	4639      	mov	r1, r7
1a00383a:	f7ff f84d 	bl	1a0028d8 <__aeabi_dcmple>
1a00383e:	2800      	cmp	r0, #0
1a003840:	d073      	beq.n	1a00392a <_strtod_l+0xa22>
1a003842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003844:	2b00      	cmp	r3, #0
1a003846:	d046      	beq.n	1a0038d6 <_strtod_l+0x9ce>
1a003848:	f8df 9208 	ldr.w	r9, [pc, #520]	; 1a003a54 <_strtod_l+0xb4c>
1a00384c:	f04f 0800 	mov.w	r8, #0
1a003850:	4f80      	ldr	r7, [pc, #512]	; (1a003a54 <_strtod_l+0xb4c>)
1a003852:	2600      	movs	r6, #0
1a003854:	4b7d      	ldr	r3, [pc, #500]	; (1a003a4c <_strtod_l+0xb44>)
1a003856:	402b      	ands	r3, r5
1a003858:	930f      	str	r3, [sp, #60]	; 0x3c
1a00385a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a00385c:	4b7e      	ldr	r3, [pc, #504]	; (1a003a58 <_strtod_l+0xb50>)
1a00385e:	429a      	cmp	r2, r3
1a003860:	f040 80ab 	bne.w	1a0039ba <_strtod_l+0xab2>
1a003864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a003868:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
1a00386c:	ec4b ab10 	vmov	d0, sl, fp
1a003870:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
1a003874:	f000 ff88 	bl	1a004788 <__ulp>
1a003878:	4640      	mov	r0, r8
1a00387a:	ec53 2b10 	vmov	r2, r3, d0
1a00387e:	4649      	mov	r1, r9
1a003880:	f7fe fdae 	bl	1a0023e0 <__aeabi_dmul>
1a003884:	4652      	mov	r2, sl
1a003886:	465b      	mov	r3, fp
1a003888:	f7fe fbf4 	bl	1a002074 <__adddf3>
1a00388c:	460b      	mov	r3, r1
1a00388e:	496f      	ldr	r1, [pc, #444]	; (1a003a4c <_strtod_l+0xb44>)
1a003890:	4a72      	ldr	r2, [pc, #456]	; (1a003a5c <_strtod_l+0xb54>)
1a003892:	4019      	ands	r1, r3
1a003894:	4291      	cmp	r1, r2
1a003896:	4682      	mov	sl, r0
1a003898:	d95b      	bls.n	1a003952 <_strtod_l+0xa4a>
1a00389a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00389c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
1a0038a0:	4293      	cmp	r3, r2
1a0038a2:	d103      	bne.n	1a0038ac <_strtod_l+0x9a4>
1a0038a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0038a6:	3301      	adds	r3, #1
1a0038a8:	f43f ad62 	beq.w	1a003370 <_strtod_l+0x468>
1a0038ac:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 1a003a50 <_strtod_l+0xb48>
1a0038b0:	f04f 3aff 	mov.w	sl, #4294967295
1a0038b4:	991c      	ldr	r1, [sp, #112]	; 0x70
1a0038b6:	9804      	ldr	r0, [sp, #16]
1a0038b8:	f000 fcd4 	bl	1a004264 <_Bfree>
1a0038bc:	9907      	ldr	r1, [sp, #28]
1a0038be:	9804      	ldr	r0, [sp, #16]
1a0038c0:	f000 fcd0 	bl	1a004264 <_Bfree>
1a0038c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0038c8:	f000 fccc 	bl	1a004264 <_Bfree>
1a0038cc:	4621      	mov	r1, r4
1a0038ce:	9804      	ldr	r0, [sp, #16]
1a0038d0:	f000 fcc8 	bl	1a004264 <_Bfree>
1a0038d4:	e62b      	b.n	1a00352e <_strtod_l+0x626>
1a0038d6:	f1ba 0f00 	cmp.w	sl, #0
1a0038da:	d118      	bne.n	1a00390e <_strtod_l+0xa06>
1a0038dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
1a0038e0:	b9db      	cbnz	r3, 1a00391a <_strtod_l+0xa12>
1a0038e2:	2200      	movs	r2, #0
1a0038e4:	4b5b      	ldr	r3, [pc, #364]	; (1a003a54 <_strtod_l+0xb4c>)
1a0038e6:	4630      	mov	r0, r6
1a0038e8:	4639      	mov	r1, r7
1a0038ea:	f7fe ffeb 	bl	1a0028c4 <__aeabi_dcmplt>
1a0038ee:	b9c8      	cbnz	r0, 1a003924 <_strtod_l+0xa1c>
1a0038f0:	4630      	mov	r0, r6
1a0038f2:	4639      	mov	r1, r7
1a0038f4:	2200      	movs	r2, #0
1a0038f6:	4b5a      	ldr	r3, [pc, #360]	; (1a003a60 <_strtod_l+0xb58>)
1a0038f8:	f7fe fd72 	bl	1a0023e0 <__aeabi_dmul>
1a0038fc:	4606      	mov	r6, r0
1a0038fe:	460f      	mov	r7, r1
1a003900:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a003904:	9618      	str	r6, [sp, #96]	; 0x60
1a003906:	9319      	str	r3, [sp, #100]	; 0x64
1a003908:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
1a00390c:	e7a2      	b.n	1a003854 <_strtod_l+0x94c>
1a00390e:	f1ba 0f01 	cmp.w	sl, #1
1a003912:	d102      	bne.n	1a00391a <_strtod_l+0xa12>
1a003914:	2d00      	cmp	r5, #0
1a003916:	f43f ad9a 	beq.w	1a00344e <_strtod_l+0x546>
1a00391a:	f04f 0800 	mov.w	r8, #0
1a00391e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 1a003a64 <_strtod_l+0xb5c>
1a003922:	e795      	b.n	1a003850 <_strtod_l+0x948>
1a003924:	2600      	movs	r6, #0
1a003926:	4f4e      	ldr	r7, [pc, #312]	; (1a003a60 <_strtod_l+0xb58>)
1a003928:	e7ea      	b.n	1a003900 <_strtod_l+0x9f8>
1a00392a:	4b4d      	ldr	r3, [pc, #308]	; (1a003a60 <_strtod_l+0xb58>)
1a00392c:	4630      	mov	r0, r6
1a00392e:	4639      	mov	r1, r7
1a003930:	2200      	movs	r2, #0
1a003932:	f7fe fd55 	bl	1a0023e0 <__aeabi_dmul>
1a003936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003938:	4606      	mov	r6, r0
1a00393a:	460f      	mov	r7, r1
1a00393c:	b933      	cbnz	r3, 1a00394c <_strtod_l+0xa44>
1a00393e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a003942:	9010      	str	r0, [sp, #64]	; 0x40
1a003944:	9311      	str	r3, [sp, #68]	; 0x44
1a003946:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
1a00394a:	e783      	b.n	1a003854 <_strtod_l+0x94c>
1a00394c:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
1a003950:	e7f9      	b.n	1a003946 <_strtod_l+0xa3e>
1a003952:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
1a003956:	9b06      	ldr	r3, [sp, #24]
1a003958:	2b00      	cmp	r3, #0
1a00395a:	d1ab      	bne.n	1a0038b4 <_strtod_l+0x9ac>
1a00395c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
1a003960:	0d1b      	lsrs	r3, r3, #20
1a003962:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a003964:	051b      	lsls	r3, r3, #20
1a003966:	429a      	cmp	r2, r3
1a003968:	d1a4      	bne.n	1a0038b4 <_strtod_l+0x9ac>
1a00396a:	4630      	mov	r0, r6
1a00396c:	4639      	mov	r1, r7
1a00396e:	f001 f873 	bl	1a004a58 <__aeabi_d2lz>
1a003972:	f7fe fd07 	bl	1a002384 <__aeabi_l2d>
1a003976:	4602      	mov	r2, r0
1a003978:	460b      	mov	r3, r1
1a00397a:	4630      	mov	r0, r6
1a00397c:	4639      	mov	r1, r7
1a00397e:	f7fe fb77 	bl	1a002070 <__aeabi_dsub>
1a003982:	f3cb 0313 	ubfx	r3, fp, #0, #20
1a003986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a003988:	ea43 030a 	orr.w	r3, r3, sl
1a00398c:	4313      	orrs	r3, r2
1a00398e:	4606      	mov	r6, r0
1a003990:	460f      	mov	r7, r1
1a003992:	d069      	beq.n	1a003a68 <_strtod_l+0xb60>
1a003994:	a326      	add	r3, pc, #152	; (adr r3, 1a003a30 <_strtod_l+0xb28>)
1a003996:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00399a:	f7fe ff93 	bl	1a0028c4 <__aeabi_dcmplt>
1a00399e:	2800      	cmp	r0, #0
1a0039a0:	f47f acf1 	bne.w	1a003386 <_strtod_l+0x47e>
1a0039a4:	a324      	add	r3, pc, #144	; (adr r3, 1a003a38 <_strtod_l+0xb30>)
1a0039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0039aa:	4630      	mov	r0, r6
1a0039ac:	4639      	mov	r1, r7
1a0039ae:	f7fe ffa7 	bl	1a002900 <__aeabi_dcmpgt>
1a0039b2:	2800      	cmp	r0, #0
1a0039b4:	f43f af7e 	beq.w	1a0038b4 <_strtod_l+0x9ac>
1a0039b8:	e4e5      	b.n	1a003386 <_strtod_l+0x47e>
1a0039ba:	9b06      	ldr	r3, [sp, #24]
1a0039bc:	b31b      	cbz	r3, 1a003a06 <_strtod_l+0xafe>
1a0039be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0039c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
1a0039c4:	d81f      	bhi.n	1a003a06 <_strtod_l+0xafe>
1a0039c6:	a31e      	add	r3, pc, #120	; (adr r3, 1a003a40 <_strtod_l+0xb38>)
1a0039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0039cc:	4630      	mov	r0, r6
1a0039ce:	4639      	mov	r1, r7
1a0039d0:	f7fe ff82 	bl	1a0028d8 <__aeabi_dcmple>
1a0039d4:	b190      	cbz	r0, 1a0039fc <_strtod_l+0xaf4>
1a0039d6:	4639      	mov	r1, r7
1a0039d8:	4630      	mov	r0, r6
1a0039da:	f7ff f9b3 	bl	1a002d44 <__aeabi_d2uiz>
1a0039de:	2800      	cmp	r0, #0
1a0039e0:	bf08      	it	eq
1a0039e2:	2001      	moveq	r0, #1
1a0039e4:	f7fe fc82 	bl	1a0022ec <__aeabi_ui2d>
1a0039e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0039ea:	4606      	mov	r6, r0
1a0039ec:	460f      	mov	r7, r1
1a0039ee:	b9db      	cbnz	r3, 1a003a28 <_strtod_l+0xb20>
1a0039f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a0039f4:	9012      	str	r0, [sp, #72]	; 0x48
1a0039f6:	9313      	str	r3, [sp, #76]	; 0x4c
1a0039f8:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
1a0039fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a0039fe:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
1a003a02:	eba3 0902 	sub.w	r9, r3, r2
1a003a06:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
1a003a0a:	f000 febd 	bl	1a004788 <__ulp>
1a003a0e:	4640      	mov	r0, r8
1a003a10:	ec53 2b10 	vmov	r2, r3, d0
1a003a14:	4649      	mov	r1, r9
1a003a16:	f7fe fce3 	bl	1a0023e0 <__aeabi_dmul>
1a003a1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a003a1e:	f7fe fb29 	bl	1a002074 <__adddf3>
1a003a22:	4682      	mov	sl, r0
1a003a24:	468b      	mov	fp, r1
1a003a26:	e796      	b.n	1a003956 <_strtod_l+0xa4e>
1a003a28:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
1a003a2c:	e7e4      	b.n	1a0039f8 <_strtod_l+0xaf0>
1a003a2e:	bf00      	nop
1a003a30:	94a03595 	.word	0x94a03595
1a003a34:	3fdfffff 	.word	0x3fdfffff
1a003a38:	35afe535 	.word	0x35afe535
1a003a3c:	3fe00000 	.word	0x3fe00000
1a003a40:	ffc00000 	.word	0xffc00000
1a003a44:	41dfffff 	.word	0x41dfffff
1a003a48:	000fffff 	.word	0x000fffff
1a003a4c:	7ff00000 	.word	0x7ff00000
1a003a50:	7fefffff 	.word	0x7fefffff
1a003a54:	3ff00000 	.word	0x3ff00000
1a003a58:	7fe00000 	.word	0x7fe00000
1a003a5c:	7c9fffff 	.word	0x7c9fffff
1a003a60:	3fe00000 	.word	0x3fe00000
1a003a64:	bff00000 	.word	0xbff00000
1a003a68:	a30b      	add	r3, pc, #44	; (adr r3, 1a003a98 <_strtod_l+0xb90>)
1a003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003a6e:	f7fe ff29 	bl	1a0028c4 <__aeabi_dcmplt>
1a003a72:	e79e      	b.n	1a0039b2 <_strtod_l+0xaaa>
1a003a74:	2300      	movs	r3, #0
1a003a76:	930c      	str	r3, [sp, #48]	; 0x30
1a003a78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
1a003a7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a003a7c:	6013      	str	r3, [r2, #0]
1a003a7e:	f7ff ba85 	b.w	1a002f8c <_strtod_l+0x84>
1a003a82:	2b65      	cmp	r3, #101	; 0x65
1a003a84:	f43f ab72 	beq.w	1a00316c <_strtod_l+0x264>
1a003a88:	2b45      	cmp	r3, #69	; 0x45
1a003a8a:	f43f ab6f 	beq.w	1a00316c <_strtod_l+0x264>
1a003a8e:	2201      	movs	r2, #1
1a003a90:	f7ff bba4 	b.w	1a0031dc <_strtod_l+0x2d4>
1a003a94:	f3af 8000 	nop.w
1a003a98:	94a03595 	.word	0x94a03595
1a003a9c:	3fcfffff 	.word	0x3fcfffff

1a003aa0 <strtod>:
1a003aa0:	460a      	mov	r2, r1
1a003aa2:	4601      	mov	r1, r0
1a003aa4:	4802      	ldr	r0, [pc, #8]	; (1a003ab0 <strtod+0x10>)
1a003aa6:	4b03      	ldr	r3, [pc, #12]	; (1a003ab4 <strtod+0x14>)
1a003aa8:	6800      	ldr	r0, [r0, #0]
1a003aaa:	f7ff ba2d 	b.w	1a002f08 <_strtod_l>
1a003aae:	bf00      	nop
1a003ab0:	100000dc 	.word	0x100000dc
1a003ab4:	10000144 	.word	0x10000144

1a003ab8 <strtok>:
1a003ab8:	4b13      	ldr	r3, [pc, #76]	; (1a003b08 <strtok+0x50>)
1a003aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003abe:	681d      	ldr	r5, [r3, #0]
1a003ac0:	6dac      	ldr	r4, [r5, #88]	; 0x58
1a003ac2:	4606      	mov	r6, r0
1a003ac4:	460f      	mov	r7, r1
1a003ac6:	b9b4      	cbnz	r4, 1a003af6 <strtok+0x3e>
1a003ac8:	2050      	movs	r0, #80	; 0x50
1a003aca:	f000 fb71 	bl	1a0041b0 <malloc>
1a003ace:	65a8      	str	r0, [r5, #88]	; 0x58
1a003ad0:	e9c0 4400 	strd	r4, r4, [r0]
1a003ad4:	e9c0 4402 	strd	r4, r4, [r0, #8]
1a003ad8:	e9c0 4404 	strd	r4, r4, [r0, #16]
1a003adc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
1a003ae0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
1a003ae4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
1a003ae8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
1a003aec:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
1a003af0:	6184      	str	r4, [r0, #24]
1a003af2:	7704      	strb	r4, [r0, #28]
1a003af4:	6244      	str	r4, [r0, #36]	; 0x24
1a003af6:	6daa      	ldr	r2, [r5, #88]	; 0x58
1a003af8:	4639      	mov	r1, r7
1a003afa:	4630      	mov	r0, r6
1a003afc:	2301      	movs	r3, #1
1a003afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003b02:	f000 b803 	b.w	1a003b0c <__strtok_r>
1a003b06:	bf00      	nop
1a003b08:	100000dc 	.word	0x100000dc

1a003b0c <__strtok_r>:
1a003b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003b0e:	b918      	cbnz	r0, 1a003b18 <__strtok_r+0xc>
1a003b10:	6810      	ldr	r0, [r2, #0]
1a003b12:	b908      	cbnz	r0, 1a003b18 <__strtok_r+0xc>
1a003b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003b16:	4620      	mov	r0, r4
1a003b18:	4604      	mov	r4, r0
1a003b1a:	460f      	mov	r7, r1
1a003b1c:	f814 5b01 	ldrb.w	r5, [r4], #1
1a003b20:	f817 6b01 	ldrb.w	r6, [r7], #1
1a003b24:	b91e      	cbnz	r6, 1a003b2e <__strtok_r+0x22>
1a003b26:	b965      	cbnz	r5, 1a003b42 <__strtok_r+0x36>
1a003b28:	6015      	str	r5, [r2, #0]
1a003b2a:	4628      	mov	r0, r5
1a003b2c:	e7f2      	b.n	1a003b14 <__strtok_r+0x8>
1a003b2e:	42b5      	cmp	r5, r6
1a003b30:	d1f6      	bne.n	1a003b20 <__strtok_r+0x14>
1a003b32:	2b00      	cmp	r3, #0
1a003b34:	d1ef      	bne.n	1a003b16 <__strtok_r+0xa>
1a003b36:	6014      	str	r4, [r2, #0]
1a003b38:	7003      	strb	r3, [r0, #0]
1a003b3a:	e7eb      	b.n	1a003b14 <__strtok_r+0x8>
1a003b3c:	461c      	mov	r4, r3
1a003b3e:	e00c      	b.n	1a003b5a <__strtok_r+0x4e>
1a003b40:	b915      	cbnz	r5, 1a003b48 <__strtok_r+0x3c>
1a003b42:	f814 3b01 	ldrb.w	r3, [r4], #1
1a003b46:	460e      	mov	r6, r1
1a003b48:	f816 5b01 	ldrb.w	r5, [r6], #1
1a003b4c:	42ab      	cmp	r3, r5
1a003b4e:	d1f7      	bne.n	1a003b40 <__strtok_r+0x34>
1a003b50:	2b00      	cmp	r3, #0
1a003b52:	d0f3      	beq.n	1a003b3c <__strtok_r+0x30>
1a003b54:	2300      	movs	r3, #0
1a003b56:	f804 3c01 	strb.w	r3, [r4, #-1]
1a003b5a:	6014      	str	r4, [r2, #0]
1a003b5c:	e7da      	b.n	1a003b14 <__strtok_r+0x8>

1a003b5e <rshift>:
1a003b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003b60:	6906      	ldr	r6, [r0, #16]
1a003b62:	114b      	asrs	r3, r1, #5
1a003b64:	429e      	cmp	r6, r3
1a003b66:	f100 0414 	add.w	r4, r0, #20
1a003b6a:	dd30      	ble.n	1a003bce <rshift+0x70>
1a003b6c:	f011 011f 	ands.w	r1, r1, #31
1a003b70:	eb04 0686 	add.w	r6, r4, r6, lsl #2
1a003b74:	eb04 0283 	add.w	r2, r4, r3, lsl #2
1a003b78:	d108      	bne.n	1a003b8c <rshift+0x2e>
1a003b7a:	4621      	mov	r1, r4
1a003b7c:	42b2      	cmp	r2, r6
1a003b7e:	460b      	mov	r3, r1
1a003b80:	d211      	bcs.n	1a003ba6 <rshift+0x48>
1a003b82:	f852 3b04 	ldr.w	r3, [r2], #4
1a003b86:	f841 3b04 	str.w	r3, [r1], #4
1a003b8a:	e7f7      	b.n	1a003b7c <rshift+0x1e>
1a003b8c:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
1a003b90:	f1c1 0c20 	rsb	ip, r1, #32
1a003b94:	40cd      	lsrs	r5, r1
1a003b96:	3204      	adds	r2, #4
1a003b98:	4623      	mov	r3, r4
1a003b9a:	4296      	cmp	r6, r2
1a003b9c:	4617      	mov	r7, r2
1a003b9e:	d80c      	bhi.n	1a003bba <rshift+0x5c>
1a003ba0:	601d      	str	r5, [r3, #0]
1a003ba2:	b105      	cbz	r5, 1a003ba6 <rshift+0x48>
1a003ba4:	3304      	adds	r3, #4
1a003ba6:	1b1a      	subs	r2, r3, r4
1a003ba8:	42a3      	cmp	r3, r4
1a003baa:	ea4f 02a2 	mov.w	r2, r2, asr #2
1a003bae:	bf08      	it	eq
1a003bb0:	2300      	moveq	r3, #0
1a003bb2:	6102      	str	r2, [r0, #16]
1a003bb4:	bf08      	it	eq
1a003bb6:	6143      	streq	r3, [r0, #20]
1a003bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003bba:	683f      	ldr	r7, [r7, #0]
1a003bbc:	fa07 f70c 	lsl.w	r7, r7, ip
1a003bc0:	433d      	orrs	r5, r7
1a003bc2:	f843 5b04 	str.w	r5, [r3], #4
1a003bc6:	f852 5b04 	ldr.w	r5, [r2], #4
1a003bca:	40cd      	lsrs	r5, r1
1a003bcc:	e7e5      	b.n	1a003b9a <rshift+0x3c>
1a003bce:	4623      	mov	r3, r4
1a003bd0:	e7e9      	b.n	1a003ba6 <rshift+0x48>

1a003bd2 <__hexdig_fun>:
1a003bd2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
1a003bd6:	2b09      	cmp	r3, #9
1a003bd8:	d802      	bhi.n	1a003be0 <__hexdig_fun+0xe>
1a003bda:	3820      	subs	r0, #32
1a003bdc:	b2c0      	uxtb	r0, r0
1a003bde:	4770      	bx	lr
1a003be0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
1a003be4:	2b05      	cmp	r3, #5
1a003be6:	d801      	bhi.n	1a003bec <__hexdig_fun+0x1a>
1a003be8:	3847      	subs	r0, #71	; 0x47
1a003bea:	e7f7      	b.n	1a003bdc <__hexdig_fun+0xa>
1a003bec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
1a003bf0:	2b05      	cmp	r3, #5
1a003bf2:	d801      	bhi.n	1a003bf8 <__hexdig_fun+0x26>
1a003bf4:	3827      	subs	r0, #39	; 0x27
1a003bf6:	e7f1      	b.n	1a003bdc <__hexdig_fun+0xa>
1a003bf8:	2000      	movs	r0, #0
1a003bfa:	4770      	bx	lr

1a003bfc <__gethex>:
1a003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003c00:	b08b      	sub	sp, #44	; 0x2c
1a003c02:	468b      	mov	fp, r1
1a003c04:	9306      	str	r3, [sp, #24]
1a003c06:	4bb7      	ldr	r3, [pc, #732]	; (1a003ee4 <__gethex+0x2e8>)
1a003c08:	9002      	str	r0, [sp, #8]
1a003c0a:	681b      	ldr	r3, [r3, #0]
1a003c0c:	9303      	str	r3, [sp, #12]
1a003c0e:	4618      	mov	r0, r3
1a003c10:	4690      	mov	r8, r2
1a003c12:	f7ff f955 	bl	1a002ec0 <strlen>
1a003c16:	9b03      	ldr	r3, [sp, #12]
1a003c18:	f8db 2000 	ldr.w	r2, [fp]
1a003c1c:	9001      	str	r0, [sp, #4]
1a003c1e:	4403      	add	r3, r0
1a003c20:	f813 3c01 	ldrb.w	r3, [r3, #-1]
1a003c24:	9307      	str	r3, [sp, #28]
1a003c26:	1c93      	adds	r3, r2, #2
1a003c28:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
1a003c2c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
1a003c30:	32fe      	adds	r2, #254	; 0xfe
1a003c32:	eb02 0a03 	add.w	sl, r2, r3
1a003c36:	461f      	mov	r7, r3
1a003c38:	f813 0b01 	ldrb.w	r0, [r3], #1
1a003c3c:	2830      	cmp	r0, #48	; 0x30
1a003c3e:	d0f8      	beq.n	1a003c32 <__gethex+0x36>
1a003c40:	f7ff ffc7 	bl	1a003bd2 <__hexdig_fun>
1a003c44:	4604      	mov	r4, r0
1a003c46:	2800      	cmp	r0, #0
1a003c48:	d167      	bne.n	1a003d1a <__gethex+0x11e>
1a003c4a:	9a01      	ldr	r2, [sp, #4]
1a003c4c:	9903      	ldr	r1, [sp, #12]
1a003c4e:	4638      	mov	r0, r7
1a003c50:	f000 fee2 	bl	1a004a18 <strncmp>
1a003c54:	2800      	cmp	r0, #0
1a003c56:	d163      	bne.n	1a003d20 <__gethex+0x124>
1a003c58:	9b01      	ldr	r3, [sp, #4]
1a003c5a:	5cf8      	ldrb	r0, [r7, r3]
1a003c5c:	18fe      	adds	r6, r7, r3
1a003c5e:	f7ff ffb8 	bl	1a003bd2 <__hexdig_fun>
1a003c62:	2800      	cmp	r0, #0
1a003c64:	d05f      	beq.n	1a003d26 <__gethex+0x12a>
1a003c66:	4633      	mov	r3, r6
1a003c68:	7818      	ldrb	r0, [r3, #0]
1a003c6a:	2830      	cmp	r0, #48	; 0x30
1a003c6c:	461f      	mov	r7, r3
1a003c6e:	f103 0301 	add.w	r3, r3, #1
1a003c72:	d0f9      	beq.n	1a003c68 <__gethex+0x6c>
1a003c74:	f7ff ffad 	bl	1a003bd2 <__hexdig_fun>
1a003c78:	fab0 f580 	clz	r5, r0
1a003c7c:	096d      	lsrs	r5, r5, #5
1a003c7e:	4634      	mov	r4, r6
1a003c80:	f04f 0a01 	mov.w	sl, #1
1a003c84:	463a      	mov	r2, r7
1a003c86:	4616      	mov	r6, r2
1a003c88:	3201      	adds	r2, #1
1a003c8a:	7830      	ldrb	r0, [r6, #0]
1a003c8c:	f7ff ffa1 	bl	1a003bd2 <__hexdig_fun>
1a003c90:	2800      	cmp	r0, #0
1a003c92:	d1f8      	bne.n	1a003c86 <__gethex+0x8a>
1a003c94:	9a01      	ldr	r2, [sp, #4]
1a003c96:	9903      	ldr	r1, [sp, #12]
1a003c98:	4630      	mov	r0, r6
1a003c9a:	f000 febd 	bl	1a004a18 <strncmp>
1a003c9e:	b950      	cbnz	r0, 1a003cb6 <__gethex+0xba>
1a003ca0:	b954      	cbnz	r4, 1a003cb8 <__gethex+0xbc>
1a003ca2:	9b01      	ldr	r3, [sp, #4]
1a003ca4:	18f4      	adds	r4, r6, r3
1a003ca6:	4622      	mov	r2, r4
1a003ca8:	4616      	mov	r6, r2
1a003caa:	3201      	adds	r2, #1
1a003cac:	7830      	ldrb	r0, [r6, #0]
1a003cae:	f7ff ff90 	bl	1a003bd2 <__hexdig_fun>
1a003cb2:	2800      	cmp	r0, #0
1a003cb4:	d1f8      	bne.n	1a003ca8 <__gethex+0xac>
1a003cb6:	b10c      	cbz	r4, 1a003cbc <__gethex+0xc0>
1a003cb8:	1ba4      	subs	r4, r4, r6
1a003cba:	00a4      	lsls	r4, r4, #2
1a003cbc:	7833      	ldrb	r3, [r6, #0]
1a003cbe:	2b50      	cmp	r3, #80	; 0x50
1a003cc0:	d001      	beq.n	1a003cc6 <__gethex+0xca>
1a003cc2:	2b70      	cmp	r3, #112	; 0x70
1a003cc4:	d13d      	bne.n	1a003d42 <__gethex+0x146>
1a003cc6:	7873      	ldrb	r3, [r6, #1]
1a003cc8:	2b2b      	cmp	r3, #43	; 0x2b
1a003cca:	d02e      	beq.n	1a003d2a <__gethex+0x12e>
1a003ccc:	2b2d      	cmp	r3, #45	; 0x2d
1a003cce:	d030      	beq.n	1a003d32 <__gethex+0x136>
1a003cd0:	1c71      	adds	r1, r6, #1
1a003cd2:	f04f 0900 	mov.w	r9, #0
1a003cd6:	7808      	ldrb	r0, [r1, #0]
1a003cd8:	f7ff ff7b 	bl	1a003bd2 <__hexdig_fun>
1a003cdc:	1e43      	subs	r3, r0, #1
1a003cde:	b2db      	uxtb	r3, r3
1a003ce0:	2b18      	cmp	r3, #24
1a003ce2:	d82e      	bhi.n	1a003d42 <__gethex+0x146>
1a003ce4:	f1a0 0210 	sub.w	r2, r0, #16
1a003ce8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
1a003cec:	f7ff ff71 	bl	1a003bd2 <__hexdig_fun>
1a003cf0:	1e43      	subs	r3, r0, #1
1a003cf2:	b2db      	uxtb	r3, r3
1a003cf4:	2b18      	cmp	r3, #24
1a003cf6:	d91f      	bls.n	1a003d38 <__gethex+0x13c>
1a003cf8:	f1b9 0f00 	cmp.w	r9, #0
1a003cfc:	d000      	beq.n	1a003d00 <__gethex+0x104>
1a003cfe:	4252      	negs	r2, r2
1a003d00:	4414      	add	r4, r2
1a003d02:	f8cb 1000 	str.w	r1, [fp]
1a003d06:	b1f5      	cbz	r5, 1a003d46 <__gethex+0x14a>
1a003d08:	f1ba 0f00 	cmp.w	sl, #0
1a003d0c:	bf14      	ite	ne
1a003d0e:	2700      	movne	r7, #0
1a003d10:	2706      	moveq	r7, #6
1a003d12:	4638      	mov	r0, r7
1a003d14:	b00b      	add	sp, #44	; 0x2c
1a003d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003d1a:	2500      	movs	r5, #0
1a003d1c:	462c      	mov	r4, r5
1a003d1e:	e7b1      	b.n	1a003c84 <__gethex+0x88>
1a003d20:	463e      	mov	r6, r7
1a003d22:	2501      	movs	r5, #1
1a003d24:	e7ca      	b.n	1a003cbc <__gethex+0xc0>
1a003d26:	4604      	mov	r4, r0
1a003d28:	e7fb      	b.n	1a003d22 <__gethex+0x126>
1a003d2a:	f04f 0900 	mov.w	r9, #0
1a003d2e:	1cb1      	adds	r1, r6, #2
1a003d30:	e7d1      	b.n	1a003cd6 <__gethex+0xda>
1a003d32:	f04f 0901 	mov.w	r9, #1
1a003d36:	e7fa      	b.n	1a003d2e <__gethex+0x132>
1a003d38:	230a      	movs	r3, #10
1a003d3a:	fb03 0202 	mla	r2, r3, r2, r0
1a003d3e:	3a10      	subs	r2, #16
1a003d40:	e7d2      	b.n	1a003ce8 <__gethex+0xec>
1a003d42:	4631      	mov	r1, r6
1a003d44:	e7dd      	b.n	1a003d02 <__gethex+0x106>
1a003d46:	1bf3      	subs	r3, r6, r7
1a003d48:	3b01      	subs	r3, #1
1a003d4a:	4629      	mov	r1, r5
1a003d4c:	2b07      	cmp	r3, #7
1a003d4e:	dc4f      	bgt.n	1a003df0 <__gethex+0x1f4>
1a003d50:	9802      	ldr	r0, [sp, #8]
1a003d52:	f000 fa53 	bl	1a0041fc <_Balloc>
1a003d56:	9b01      	ldr	r3, [sp, #4]
1a003d58:	f100 0914 	add.w	r9, r0, #20
1a003d5c:	f04f 0b00 	mov.w	fp, #0
1a003d60:	f1c3 0301 	rsb	r3, r3, #1
1a003d64:	4605      	mov	r5, r0
1a003d66:	f8cd 9010 	str.w	r9, [sp, #16]
1a003d6a:	46da      	mov	sl, fp
1a003d6c:	9308      	str	r3, [sp, #32]
1a003d6e:	42b7      	cmp	r7, r6
1a003d70:	d341      	bcc.n	1a003df6 <__gethex+0x1fa>
1a003d72:	9804      	ldr	r0, [sp, #16]
1a003d74:	f840 ab04 	str.w	sl, [r0], #4
1a003d78:	eba0 0009 	sub.w	r0, r0, r9
1a003d7c:	1080      	asrs	r0, r0, #2
1a003d7e:	6128      	str	r0, [r5, #16]
1a003d80:	0147      	lsls	r7, r0, #5
1a003d82:	4650      	mov	r0, sl
1a003d84:	f000 fafe 	bl	1a004384 <__hi0bits>
1a003d88:	f8d8 6000 	ldr.w	r6, [r8]
1a003d8c:	1a3f      	subs	r7, r7, r0
1a003d8e:	42b7      	cmp	r7, r6
1a003d90:	dd63      	ble.n	1a003e5a <__gethex+0x25e>
1a003d92:	1bbf      	subs	r7, r7, r6
1a003d94:	4639      	mov	r1, r7
1a003d96:	4628      	mov	r0, r5
1a003d98:	f000 fe07 	bl	1a0049aa <__any_on>
1a003d9c:	4682      	mov	sl, r0
1a003d9e:	b1a8      	cbz	r0, 1a003dcc <__gethex+0x1d0>
1a003da0:	1e7b      	subs	r3, r7, #1
1a003da2:	1159      	asrs	r1, r3, #5
1a003da4:	f003 021f 	and.w	r2, r3, #31
1a003da8:	f04f 0a01 	mov.w	sl, #1
1a003dac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
1a003db0:	fa0a f202 	lsl.w	r2, sl, r2
1a003db4:	420a      	tst	r2, r1
1a003db6:	d009      	beq.n	1a003dcc <__gethex+0x1d0>
1a003db8:	4553      	cmp	r3, sl
1a003dba:	dd05      	ble.n	1a003dc8 <__gethex+0x1cc>
1a003dbc:	1eb9      	subs	r1, r7, #2
1a003dbe:	4628      	mov	r0, r5
1a003dc0:	f000 fdf3 	bl	1a0049aa <__any_on>
1a003dc4:	2800      	cmp	r0, #0
1a003dc6:	d145      	bne.n	1a003e54 <__gethex+0x258>
1a003dc8:	f04f 0a02 	mov.w	sl, #2
1a003dcc:	4639      	mov	r1, r7
1a003dce:	4628      	mov	r0, r5
1a003dd0:	f7ff fec5 	bl	1a003b5e <rshift>
1a003dd4:	443c      	add	r4, r7
1a003dd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a003dda:	42a3      	cmp	r3, r4
1a003ddc:	da4b      	bge.n	1a003e76 <__gethex+0x27a>
1a003dde:	4629      	mov	r1, r5
1a003de0:	9802      	ldr	r0, [sp, #8]
1a003de2:	f000 fa3f 	bl	1a004264 <_Bfree>
1a003de6:	9a14      	ldr	r2, [sp, #80]	; 0x50
1a003de8:	2300      	movs	r3, #0
1a003dea:	6013      	str	r3, [r2, #0]
1a003dec:	27a3      	movs	r7, #163	; 0xa3
1a003dee:	e790      	b.n	1a003d12 <__gethex+0x116>
1a003df0:	3101      	adds	r1, #1
1a003df2:	105b      	asrs	r3, r3, #1
1a003df4:	e7aa      	b.n	1a003d4c <__gethex+0x150>
1a003df6:	1e73      	subs	r3, r6, #1
1a003df8:	9305      	str	r3, [sp, #20]
1a003dfa:	9a07      	ldr	r2, [sp, #28]
1a003dfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
1a003e00:	4293      	cmp	r3, r2
1a003e02:	d017      	beq.n	1a003e34 <__gethex+0x238>
1a003e04:	f1bb 0f20 	cmp.w	fp, #32
1a003e08:	d106      	bne.n	1a003e18 <__gethex+0x21c>
1a003e0a:	9b04      	ldr	r3, [sp, #16]
1a003e0c:	f843 ab04 	str.w	sl, [r3], #4
1a003e10:	f04f 0a00 	mov.w	sl, #0
1a003e14:	9304      	str	r3, [sp, #16]
1a003e16:	46d3      	mov	fp, sl
1a003e18:	f816 0c01 	ldrb.w	r0, [r6, #-1]
1a003e1c:	f7ff fed9 	bl	1a003bd2 <__hexdig_fun>
1a003e20:	f000 000f 	and.w	r0, r0, #15
1a003e24:	fa00 f00b 	lsl.w	r0, r0, fp
1a003e28:	ea4a 0a00 	orr.w	sl, sl, r0
1a003e2c:	f10b 0b04 	add.w	fp, fp, #4
1a003e30:	9b05      	ldr	r3, [sp, #20]
1a003e32:	e00d      	b.n	1a003e50 <__gethex+0x254>
1a003e34:	9b05      	ldr	r3, [sp, #20]
1a003e36:	9a08      	ldr	r2, [sp, #32]
1a003e38:	4413      	add	r3, r2
1a003e3a:	42bb      	cmp	r3, r7
1a003e3c:	d3e2      	bcc.n	1a003e04 <__gethex+0x208>
1a003e3e:	4618      	mov	r0, r3
1a003e40:	9a01      	ldr	r2, [sp, #4]
1a003e42:	9903      	ldr	r1, [sp, #12]
1a003e44:	9309      	str	r3, [sp, #36]	; 0x24
1a003e46:	f000 fde7 	bl	1a004a18 <strncmp>
1a003e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003e4c:	2800      	cmp	r0, #0
1a003e4e:	d1d9      	bne.n	1a003e04 <__gethex+0x208>
1a003e50:	461e      	mov	r6, r3
1a003e52:	e78c      	b.n	1a003d6e <__gethex+0x172>
1a003e54:	f04f 0a03 	mov.w	sl, #3
1a003e58:	e7b8      	b.n	1a003dcc <__gethex+0x1d0>
1a003e5a:	da09      	bge.n	1a003e70 <__gethex+0x274>
1a003e5c:	1bf7      	subs	r7, r6, r7
1a003e5e:	4629      	mov	r1, r5
1a003e60:	463a      	mov	r2, r7
1a003e62:	9802      	ldr	r0, [sp, #8]
1a003e64:	f000 fbc6 	bl	1a0045f4 <__lshift>
1a003e68:	1be4      	subs	r4, r4, r7
1a003e6a:	4605      	mov	r5, r0
1a003e6c:	f100 0914 	add.w	r9, r0, #20
1a003e70:	f04f 0a00 	mov.w	sl, #0
1a003e74:	e7af      	b.n	1a003dd6 <__gethex+0x1da>
1a003e76:	f8d8 0004 	ldr.w	r0, [r8, #4]
1a003e7a:	42a0      	cmp	r0, r4
1a003e7c:	dd6d      	ble.n	1a003f5a <__gethex+0x35e>
1a003e7e:	1b04      	subs	r4, r0, r4
1a003e80:	42a6      	cmp	r6, r4
1a003e82:	dc31      	bgt.n	1a003ee8 <__gethex+0x2ec>
1a003e84:	f8d8 300c 	ldr.w	r3, [r8, #12]
1a003e88:	2b02      	cmp	r3, #2
1a003e8a:	d022      	beq.n	1a003ed2 <__gethex+0x2d6>
1a003e8c:	2b03      	cmp	r3, #3
1a003e8e:	d024      	beq.n	1a003eda <__gethex+0x2de>
1a003e90:	2b01      	cmp	r3, #1
1a003e92:	d115      	bne.n	1a003ec0 <__gethex+0x2c4>
1a003e94:	42a6      	cmp	r6, r4
1a003e96:	d113      	bne.n	1a003ec0 <__gethex+0x2c4>
1a003e98:	2e01      	cmp	r6, #1
1a003e9a:	d10b      	bne.n	1a003eb4 <__gethex+0x2b8>
1a003e9c:	9a06      	ldr	r2, [sp, #24]
1a003e9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a003ea2:	6013      	str	r3, [r2, #0]
1a003ea4:	2301      	movs	r3, #1
1a003ea6:	612b      	str	r3, [r5, #16]
1a003ea8:	f8c9 3000 	str.w	r3, [r9]
1a003eac:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a003eae:	2762      	movs	r7, #98	; 0x62
1a003eb0:	601d      	str	r5, [r3, #0]
1a003eb2:	e72e      	b.n	1a003d12 <__gethex+0x116>
1a003eb4:	1e71      	subs	r1, r6, #1
1a003eb6:	4628      	mov	r0, r5
1a003eb8:	f000 fd77 	bl	1a0049aa <__any_on>
1a003ebc:	2800      	cmp	r0, #0
1a003ebe:	d1ed      	bne.n	1a003e9c <__gethex+0x2a0>
1a003ec0:	4629      	mov	r1, r5
1a003ec2:	9802      	ldr	r0, [sp, #8]
1a003ec4:	f000 f9ce 	bl	1a004264 <_Bfree>
1a003ec8:	9a14      	ldr	r2, [sp, #80]	; 0x50
1a003eca:	2300      	movs	r3, #0
1a003ecc:	6013      	str	r3, [r2, #0]
1a003ece:	2750      	movs	r7, #80	; 0x50
1a003ed0:	e71f      	b.n	1a003d12 <__gethex+0x116>
1a003ed2:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a003ed4:	2b00      	cmp	r3, #0
1a003ed6:	d1f3      	bne.n	1a003ec0 <__gethex+0x2c4>
1a003ed8:	e7e0      	b.n	1a003e9c <__gethex+0x2a0>
1a003eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a003edc:	2b00      	cmp	r3, #0
1a003ede:	d1dd      	bne.n	1a003e9c <__gethex+0x2a0>
1a003ee0:	e7ee      	b.n	1a003ec0 <__gethex+0x2c4>
1a003ee2:	bf00      	nop
1a003ee4:	1a0050d0 	.word	0x1a0050d0
1a003ee8:	1e67      	subs	r7, r4, #1
1a003eea:	f1ba 0f00 	cmp.w	sl, #0
1a003eee:	d131      	bne.n	1a003f54 <__gethex+0x358>
1a003ef0:	b127      	cbz	r7, 1a003efc <__gethex+0x300>
1a003ef2:	4639      	mov	r1, r7
1a003ef4:	4628      	mov	r0, r5
1a003ef6:	f000 fd58 	bl	1a0049aa <__any_on>
1a003efa:	4682      	mov	sl, r0
1a003efc:	117a      	asrs	r2, r7, #5
1a003efe:	2301      	movs	r3, #1
1a003f00:	f007 071f 	and.w	r7, r7, #31
1a003f04:	fa03 f707 	lsl.w	r7, r3, r7
1a003f08:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
1a003f0c:	4621      	mov	r1, r4
1a003f0e:	421f      	tst	r7, r3
1a003f10:	4628      	mov	r0, r5
1a003f12:	bf18      	it	ne
1a003f14:	f04a 0a02 	orrne.w	sl, sl, #2
1a003f18:	1b36      	subs	r6, r6, r4
1a003f1a:	f7ff fe20 	bl	1a003b5e <rshift>
1a003f1e:	f8d8 4004 	ldr.w	r4, [r8, #4]
1a003f22:	2702      	movs	r7, #2
1a003f24:	f1ba 0f00 	cmp.w	sl, #0
1a003f28:	d048      	beq.n	1a003fbc <__gethex+0x3c0>
1a003f2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
1a003f2e:	2b02      	cmp	r3, #2
1a003f30:	d015      	beq.n	1a003f5e <__gethex+0x362>
1a003f32:	2b03      	cmp	r3, #3
1a003f34:	d017      	beq.n	1a003f66 <__gethex+0x36a>
1a003f36:	2b01      	cmp	r3, #1
1a003f38:	d109      	bne.n	1a003f4e <__gethex+0x352>
1a003f3a:	f01a 0f02 	tst.w	sl, #2
1a003f3e:	d006      	beq.n	1a003f4e <__gethex+0x352>
1a003f40:	f8d9 3000 	ldr.w	r3, [r9]
1a003f44:	ea4a 0a03 	orr.w	sl, sl, r3
1a003f48:	f01a 0f01 	tst.w	sl, #1
1a003f4c:	d10e      	bne.n	1a003f6c <__gethex+0x370>
1a003f4e:	f047 0710 	orr.w	r7, r7, #16
1a003f52:	e033      	b.n	1a003fbc <__gethex+0x3c0>
1a003f54:	f04f 0a01 	mov.w	sl, #1
1a003f58:	e7d0      	b.n	1a003efc <__gethex+0x300>
1a003f5a:	2701      	movs	r7, #1
1a003f5c:	e7e2      	b.n	1a003f24 <__gethex+0x328>
1a003f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a003f60:	f1c3 0301 	rsb	r3, r3, #1
1a003f64:	9315      	str	r3, [sp, #84]	; 0x54
1a003f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a003f68:	2b00      	cmp	r3, #0
1a003f6a:	d0f0      	beq.n	1a003f4e <__gethex+0x352>
1a003f6c:	f8d5 9010 	ldr.w	r9, [r5, #16]
1a003f70:	f105 0314 	add.w	r3, r5, #20
1a003f74:	ea4f 0a89 	mov.w	sl, r9, lsl #2
1a003f78:	eb03 010a 	add.w	r1, r3, sl
1a003f7c:	f04f 0c00 	mov.w	ip, #0
1a003f80:	4618      	mov	r0, r3
1a003f82:	f853 2b04 	ldr.w	r2, [r3], #4
1a003f86:	f1b2 3fff 	cmp.w	r2, #4294967295
1a003f8a:	d01c      	beq.n	1a003fc6 <__gethex+0x3ca>
1a003f8c:	3201      	adds	r2, #1
1a003f8e:	6002      	str	r2, [r0, #0]
1a003f90:	2f02      	cmp	r7, #2
1a003f92:	f105 0314 	add.w	r3, r5, #20
1a003f96:	d138      	bne.n	1a00400a <__gethex+0x40e>
1a003f98:	f8d8 2000 	ldr.w	r2, [r8]
1a003f9c:	3a01      	subs	r2, #1
1a003f9e:	42b2      	cmp	r2, r6
1a003fa0:	d10a      	bne.n	1a003fb8 <__gethex+0x3bc>
1a003fa2:	1171      	asrs	r1, r6, #5
1a003fa4:	2201      	movs	r2, #1
1a003fa6:	f006 061f 	and.w	r6, r6, #31
1a003faa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
1a003fae:	fa02 f606 	lsl.w	r6, r2, r6
1a003fb2:	421e      	tst	r6, r3
1a003fb4:	bf18      	it	ne
1a003fb6:	4617      	movne	r7, r2
1a003fb8:	f047 0720 	orr.w	r7, r7, #32
1a003fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a003fbe:	601d      	str	r5, [r3, #0]
1a003fc0:	9b06      	ldr	r3, [sp, #24]
1a003fc2:	601c      	str	r4, [r3, #0]
1a003fc4:	e6a5      	b.n	1a003d12 <__gethex+0x116>
1a003fc6:	4299      	cmp	r1, r3
1a003fc8:	f843 cc04 	str.w	ip, [r3, #-4]
1a003fcc:	d8d8      	bhi.n	1a003f80 <__gethex+0x384>
1a003fce:	68ab      	ldr	r3, [r5, #8]
1a003fd0:	4599      	cmp	r9, r3
1a003fd2:	db12      	blt.n	1a003ffa <__gethex+0x3fe>
1a003fd4:	6869      	ldr	r1, [r5, #4]
1a003fd6:	9802      	ldr	r0, [sp, #8]
1a003fd8:	3101      	adds	r1, #1
1a003fda:	f000 f90f 	bl	1a0041fc <_Balloc>
1a003fde:	692a      	ldr	r2, [r5, #16]
1a003fe0:	3202      	adds	r2, #2
1a003fe2:	f105 010c 	add.w	r1, r5, #12
1a003fe6:	4683      	mov	fp, r0
1a003fe8:	0092      	lsls	r2, r2, #2
1a003fea:	300c      	adds	r0, #12
1a003fec:	f7fe fef0 	bl	1a002dd0 <memcpy>
1a003ff0:	4629      	mov	r1, r5
1a003ff2:	9802      	ldr	r0, [sp, #8]
1a003ff4:	f000 f936 	bl	1a004264 <_Bfree>
1a003ff8:	465d      	mov	r5, fp
1a003ffa:	692b      	ldr	r3, [r5, #16]
1a003ffc:	1c5a      	adds	r2, r3, #1
1a003ffe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a004002:	612a      	str	r2, [r5, #16]
1a004004:	2201      	movs	r2, #1
1a004006:	615a      	str	r2, [r3, #20]
1a004008:	e7c2      	b.n	1a003f90 <__gethex+0x394>
1a00400a:	692a      	ldr	r2, [r5, #16]
1a00400c:	454a      	cmp	r2, r9
1a00400e:	dd0b      	ble.n	1a004028 <__gethex+0x42c>
1a004010:	2101      	movs	r1, #1
1a004012:	4628      	mov	r0, r5
1a004014:	f7ff fda3 	bl	1a003b5e <rshift>
1a004018:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00401c:	3401      	adds	r4, #1
1a00401e:	42a3      	cmp	r3, r4
1a004020:	f6ff aedd 	blt.w	1a003dde <__gethex+0x1e2>
1a004024:	2701      	movs	r7, #1
1a004026:	e7c7      	b.n	1a003fb8 <__gethex+0x3bc>
1a004028:	f016 061f 	ands.w	r6, r6, #31
1a00402c:	d0fa      	beq.n	1a004024 <__gethex+0x428>
1a00402e:	449a      	add	sl, r3
1a004030:	f1c6 0620 	rsb	r6, r6, #32
1a004034:	f85a 0c04 	ldr.w	r0, [sl, #-4]
1a004038:	f000 f9a4 	bl	1a004384 <__hi0bits>
1a00403c:	42b0      	cmp	r0, r6
1a00403e:	dbe7      	blt.n	1a004010 <__gethex+0x414>
1a004040:	e7f0      	b.n	1a004024 <__gethex+0x428>
1a004042:	bf00      	nop

1a004044 <L_shift>:
1a004044:	f1c2 0208 	rsb	r2, r2, #8
1a004048:	0092      	lsls	r2, r2, #2
1a00404a:	b570      	push	{r4, r5, r6, lr}
1a00404c:	f1c2 0620 	rsb	r6, r2, #32
1a004050:	6843      	ldr	r3, [r0, #4]
1a004052:	6804      	ldr	r4, [r0, #0]
1a004054:	fa03 f506 	lsl.w	r5, r3, r6
1a004058:	432c      	orrs	r4, r5
1a00405a:	40d3      	lsrs	r3, r2
1a00405c:	6004      	str	r4, [r0, #0]
1a00405e:	f840 3f04 	str.w	r3, [r0, #4]!
1a004062:	4288      	cmp	r0, r1
1a004064:	d3f4      	bcc.n	1a004050 <L_shift+0xc>
1a004066:	bd70      	pop	{r4, r5, r6, pc}

1a004068 <__match>:
1a004068:	b530      	push	{r4, r5, lr}
1a00406a:	6803      	ldr	r3, [r0, #0]
1a00406c:	3301      	adds	r3, #1
1a00406e:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004072:	b914      	cbnz	r4, 1a00407a <__match+0x12>
1a004074:	6003      	str	r3, [r0, #0]
1a004076:	2001      	movs	r0, #1
1a004078:	bd30      	pop	{r4, r5, pc}
1a00407a:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00407e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
1a004082:	2d19      	cmp	r5, #25
1a004084:	bf98      	it	ls
1a004086:	3220      	addls	r2, #32
1a004088:	42a2      	cmp	r2, r4
1a00408a:	d0f0      	beq.n	1a00406e <__match+0x6>
1a00408c:	2000      	movs	r0, #0
1a00408e:	e7f3      	b.n	1a004078 <__match+0x10>

1a004090 <__hexnan>:
1a004090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004094:	680b      	ldr	r3, [r1, #0]
1a004096:	6801      	ldr	r1, [r0, #0]
1a004098:	115f      	asrs	r7, r3, #5
1a00409a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
1a00409e:	f013 031f 	ands.w	r3, r3, #31
1a0040a2:	b087      	sub	sp, #28
1a0040a4:	bf18      	it	ne
1a0040a6:	3704      	addne	r7, #4
1a0040a8:	2500      	movs	r5, #0
1a0040aa:	1f3e      	subs	r6, r7, #4
1a0040ac:	4682      	mov	sl, r0
1a0040ae:	4690      	mov	r8, r2
1a0040b0:	9301      	str	r3, [sp, #4]
1a0040b2:	f847 5c04 	str.w	r5, [r7, #-4]
1a0040b6:	46b1      	mov	r9, r6
1a0040b8:	4634      	mov	r4, r6
1a0040ba:	9502      	str	r5, [sp, #8]
1a0040bc:	46ab      	mov	fp, r5
1a0040be:	784a      	ldrb	r2, [r1, #1]
1a0040c0:	1c4b      	adds	r3, r1, #1
1a0040c2:	9303      	str	r3, [sp, #12]
1a0040c4:	b342      	cbz	r2, 1a004118 <__hexnan+0x88>
1a0040c6:	4610      	mov	r0, r2
1a0040c8:	9105      	str	r1, [sp, #20]
1a0040ca:	9204      	str	r2, [sp, #16]
1a0040cc:	f7ff fd81 	bl	1a003bd2 <__hexdig_fun>
1a0040d0:	2800      	cmp	r0, #0
1a0040d2:	d143      	bne.n	1a00415c <__hexnan+0xcc>
1a0040d4:	9a04      	ldr	r2, [sp, #16]
1a0040d6:	9905      	ldr	r1, [sp, #20]
1a0040d8:	2a20      	cmp	r2, #32
1a0040da:	d818      	bhi.n	1a00410e <__hexnan+0x7e>
1a0040dc:	9b02      	ldr	r3, [sp, #8]
1a0040de:	459b      	cmp	fp, r3
1a0040e0:	dd13      	ble.n	1a00410a <__hexnan+0x7a>
1a0040e2:	454c      	cmp	r4, r9
1a0040e4:	d206      	bcs.n	1a0040f4 <__hexnan+0x64>
1a0040e6:	2d07      	cmp	r5, #7
1a0040e8:	dc04      	bgt.n	1a0040f4 <__hexnan+0x64>
1a0040ea:	462a      	mov	r2, r5
1a0040ec:	4649      	mov	r1, r9
1a0040ee:	4620      	mov	r0, r4
1a0040f0:	f7ff ffa8 	bl	1a004044 <L_shift>
1a0040f4:	4544      	cmp	r4, r8
1a0040f6:	d944      	bls.n	1a004182 <__hexnan+0xf2>
1a0040f8:	2300      	movs	r3, #0
1a0040fa:	f1a4 0904 	sub.w	r9, r4, #4
1a0040fe:	f844 3c04 	str.w	r3, [r4, #-4]
1a004102:	f8cd b008 	str.w	fp, [sp, #8]
1a004106:	464c      	mov	r4, r9
1a004108:	461d      	mov	r5, r3
1a00410a:	9903      	ldr	r1, [sp, #12]
1a00410c:	e7d7      	b.n	1a0040be <__hexnan+0x2e>
1a00410e:	2a29      	cmp	r2, #41	; 0x29
1a004110:	d14a      	bne.n	1a0041a8 <__hexnan+0x118>
1a004112:	3102      	adds	r1, #2
1a004114:	f8ca 1000 	str.w	r1, [sl]
1a004118:	f1bb 0f00 	cmp.w	fp, #0
1a00411c:	d044      	beq.n	1a0041a8 <__hexnan+0x118>
1a00411e:	454c      	cmp	r4, r9
1a004120:	d206      	bcs.n	1a004130 <__hexnan+0xa0>
1a004122:	2d07      	cmp	r5, #7
1a004124:	dc04      	bgt.n	1a004130 <__hexnan+0xa0>
1a004126:	462a      	mov	r2, r5
1a004128:	4649      	mov	r1, r9
1a00412a:	4620      	mov	r0, r4
1a00412c:	f7ff ff8a 	bl	1a004044 <L_shift>
1a004130:	4544      	cmp	r4, r8
1a004132:	d928      	bls.n	1a004186 <__hexnan+0xf6>
1a004134:	4643      	mov	r3, r8
1a004136:	f854 2b04 	ldr.w	r2, [r4], #4
1a00413a:	f843 2b04 	str.w	r2, [r3], #4
1a00413e:	42a6      	cmp	r6, r4
1a004140:	d2f9      	bcs.n	1a004136 <__hexnan+0xa6>
1a004142:	2200      	movs	r2, #0
1a004144:	f843 2b04 	str.w	r2, [r3], #4
1a004148:	429e      	cmp	r6, r3
1a00414a:	d2fb      	bcs.n	1a004144 <__hexnan+0xb4>
1a00414c:	6833      	ldr	r3, [r6, #0]
1a00414e:	b91b      	cbnz	r3, 1a004158 <__hexnan+0xc8>
1a004150:	4546      	cmp	r6, r8
1a004152:	d127      	bne.n	1a0041a4 <__hexnan+0x114>
1a004154:	2301      	movs	r3, #1
1a004156:	6033      	str	r3, [r6, #0]
1a004158:	2005      	movs	r0, #5
1a00415a:	e026      	b.n	1a0041aa <__hexnan+0x11a>
1a00415c:	3501      	adds	r5, #1
1a00415e:	2d08      	cmp	r5, #8
1a004160:	f10b 0b01 	add.w	fp, fp, #1
1a004164:	dd06      	ble.n	1a004174 <__hexnan+0xe4>
1a004166:	4544      	cmp	r4, r8
1a004168:	d9cf      	bls.n	1a00410a <__hexnan+0x7a>
1a00416a:	2300      	movs	r3, #0
1a00416c:	f844 3c04 	str.w	r3, [r4, #-4]
1a004170:	2501      	movs	r5, #1
1a004172:	3c04      	subs	r4, #4
1a004174:	6822      	ldr	r2, [r4, #0]
1a004176:	f000 000f 	and.w	r0, r0, #15
1a00417a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
1a00417e:	6020      	str	r0, [r4, #0]
1a004180:	e7c3      	b.n	1a00410a <__hexnan+0x7a>
1a004182:	2508      	movs	r5, #8
1a004184:	e7c1      	b.n	1a00410a <__hexnan+0x7a>
1a004186:	9b01      	ldr	r3, [sp, #4]
1a004188:	2b00      	cmp	r3, #0
1a00418a:	d0df      	beq.n	1a00414c <__hexnan+0xbc>
1a00418c:	f04f 32ff 	mov.w	r2, #4294967295
1a004190:	f1c3 0320 	rsb	r3, r3, #32
1a004194:	fa22 f303 	lsr.w	r3, r2, r3
1a004198:	f857 2c04 	ldr.w	r2, [r7, #-4]
1a00419c:	401a      	ands	r2, r3
1a00419e:	f847 2c04 	str.w	r2, [r7, #-4]
1a0041a2:	e7d3      	b.n	1a00414c <__hexnan+0xbc>
1a0041a4:	3e04      	subs	r6, #4
1a0041a6:	e7d1      	b.n	1a00414c <__hexnan+0xbc>
1a0041a8:	2004      	movs	r0, #4
1a0041aa:	b007      	add	sp, #28
1a0041ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a0041b0 <malloc>:
1a0041b0:	4b02      	ldr	r3, [pc, #8]	; (1a0041bc <malloc+0xc>)
1a0041b2:	4601      	mov	r1, r0
1a0041b4:	6818      	ldr	r0, [r3, #0]
1a0041b6:	f7fe be21 	b.w	1a002dfc <_malloc_r>
1a0041ba:	bf00      	nop
1a0041bc:	100000dc 	.word	0x100000dc

1a0041c0 <__ascii_mbtowc>:
1a0041c0:	b082      	sub	sp, #8
1a0041c2:	b901      	cbnz	r1, 1a0041c6 <__ascii_mbtowc+0x6>
1a0041c4:	a901      	add	r1, sp, #4
1a0041c6:	b142      	cbz	r2, 1a0041da <__ascii_mbtowc+0x1a>
1a0041c8:	b14b      	cbz	r3, 1a0041de <__ascii_mbtowc+0x1e>
1a0041ca:	7813      	ldrb	r3, [r2, #0]
1a0041cc:	600b      	str	r3, [r1, #0]
1a0041ce:	7812      	ldrb	r2, [r2, #0]
1a0041d0:	1c10      	adds	r0, r2, #0
1a0041d2:	bf18      	it	ne
1a0041d4:	2001      	movne	r0, #1
1a0041d6:	b002      	add	sp, #8
1a0041d8:	4770      	bx	lr
1a0041da:	4610      	mov	r0, r2
1a0041dc:	e7fb      	b.n	1a0041d6 <__ascii_mbtowc+0x16>
1a0041de:	f06f 0001 	mvn.w	r0, #1
1a0041e2:	e7f8      	b.n	1a0041d6 <__ascii_mbtowc+0x16>

1a0041e4 <__malloc_lock>:
1a0041e4:	4801      	ldr	r0, [pc, #4]	; (1a0041ec <__malloc_lock+0x8>)
1a0041e6:	f7fe bdf1 	b.w	1a002dcc <__retarget_lock_acquire_recursive>
1a0041ea:	bf00      	nop
1a0041ec:	100007cc 	.word	0x100007cc

1a0041f0 <__malloc_unlock>:
1a0041f0:	4801      	ldr	r0, [pc, #4]	; (1a0041f8 <__malloc_unlock+0x8>)
1a0041f2:	f7fe bdec 	b.w	1a002dce <__retarget_lock_release_recursive>
1a0041f6:	bf00      	nop
1a0041f8:	100007cc 	.word	0x100007cc

1a0041fc <_Balloc>:
1a0041fc:	b570      	push	{r4, r5, r6, lr}
1a0041fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
1a004200:	4604      	mov	r4, r0
1a004202:	460e      	mov	r6, r1
1a004204:	b93d      	cbnz	r5, 1a004216 <_Balloc+0x1a>
1a004206:	2010      	movs	r0, #16
1a004208:	f7ff ffd2 	bl	1a0041b0 <malloc>
1a00420c:	e9c0 5501 	strd	r5, r5, [r0, #4]
1a004210:	6260      	str	r0, [r4, #36]	; 0x24
1a004212:	6005      	str	r5, [r0, #0]
1a004214:	60c5      	str	r5, [r0, #12]
1a004216:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a004218:	68eb      	ldr	r3, [r5, #12]
1a00421a:	b183      	cbz	r3, 1a00423e <_Balloc+0x42>
1a00421c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00421e:	68db      	ldr	r3, [r3, #12]
1a004220:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
1a004224:	b9b8      	cbnz	r0, 1a004256 <_Balloc+0x5a>
1a004226:	2101      	movs	r1, #1
1a004228:	fa01 f506 	lsl.w	r5, r1, r6
1a00422c:	1d6a      	adds	r2, r5, #5
1a00422e:	0092      	lsls	r2, r2, #2
1a004230:	4620      	mov	r0, r4
1a004232:	f000 fbdb 	bl	1a0049ec <_calloc_r>
1a004236:	b160      	cbz	r0, 1a004252 <_Balloc+0x56>
1a004238:	e9c0 6501 	strd	r6, r5, [r0, #4]
1a00423c:	e00e      	b.n	1a00425c <_Balloc+0x60>
1a00423e:	2221      	movs	r2, #33	; 0x21
1a004240:	2104      	movs	r1, #4
1a004242:	4620      	mov	r0, r4
1a004244:	f000 fbd2 	bl	1a0049ec <_calloc_r>
1a004248:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00424a:	60e8      	str	r0, [r5, #12]
1a00424c:	68db      	ldr	r3, [r3, #12]
1a00424e:	2b00      	cmp	r3, #0
1a004250:	d1e4      	bne.n	1a00421c <_Balloc+0x20>
1a004252:	2000      	movs	r0, #0
1a004254:	bd70      	pop	{r4, r5, r6, pc}
1a004256:	6802      	ldr	r2, [r0, #0]
1a004258:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
1a00425c:	2300      	movs	r3, #0
1a00425e:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a004262:	e7f7      	b.n	1a004254 <_Balloc+0x58>

1a004264 <_Bfree>:
1a004264:	b570      	push	{r4, r5, r6, lr}
1a004266:	6a44      	ldr	r4, [r0, #36]	; 0x24
1a004268:	4606      	mov	r6, r0
1a00426a:	460d      	mov	r5, r1
1a00426c:	b93c      	cbnz	r4, 1a00427e <_Bfree+0x1a>
1a00426e:	2010      	movs	r0, #16
1a004270:	f7ff ff9e 	bl	1a0041b0 <malloc>
1a004274:	e9c0 4401 	strd	r4, r4, [r0, #4]
1a004278:	6270      	str	r0, [r6, #36]	; 0x24
1a00427a:	6004      	str	r4, [r0, #0]
1a00427c:	60c4      	str	r4, [r0, #12]
1a00427e:	b13d      	cbz	r5, 1a004290 <_Bfree+0x2c>
1a004280:	6a73      	ldr	r3, [r6, #36]	; 0x24
1a004282:	686a      	ldr	r2, [r5, #4]
1a004284:	68db      	ldr	r3, [r3, #12]
1a004286:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00428a:	6029      	str	r1, [r5, #0]
1a00428c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a004290:	bd70      	pop	{r4, r5, r6, pc}

1a004292 <__multadd>:
1a004292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004296:	690d      	ldr	r5, [r1, #16]
1a004298:	461f      	mov	r7, r3
1a00429a:	4606      	mov	r6, r0
1a00429c:	460c      	mov	r4, r1
1a00429e:	f101 0c14 	add.w	ip, r1, #20
1a0042a2:	2300      	movs	r3, #0
1a0042a4:	f8dc 0000 	ldr.w	r0, [ip]
1a0042a8:	b281      	uxth	r1, r0
1a0042aa:	fb02 7101 	mla	r1, r2, r1, r7
1a0042ae:	0c0f      	lsrs	r7, r1, #16
1a0042b0:	0c00      	lsrs	r0, r0, #16
1a0042b2:	fb02 7000 	mla	r0, r2, r0, r7
1a0042b6:	b289      	uxth	r1, r1
1a0042b8:	3301      	adds	r3, #1
1a0042ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
1a0042be:	429d      	cmp	r5, r3
1a0042c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
1a0042c4:	f84c 1b04 	str.w	r1, [ip], #4
1a0042c8:	dcec      	bgt.n	1a0042a4 <__multadd+0x12>
1a0042ca:	b1d7      	cbz	r7, 1a004302 <__multadd+0x70>
1a0042cc:	68a3      	ldr	r3, [r4, #8]
1a0042ce:	42ab      	cmp	r3, r5
1a0042d0:	dc12      	bgt.n	1a0042f8 <__multadd+0x66>
1a0042d2:	6861      	ldr	r1, [r4, #4]
1a0042d4:	4630      	mov	r0, r6
1a0042d6:	3101      	adds	r1, #1
1a0042d8:	f7ff ff90 	bl	1a0041fc <_Balloc>
1a0042dc:	6922      	ldr	r2, [r4, #16]
1a0042de:	3202      	adds	r2, #2
1a0042e0:	f104 010c 	add.w	r1, r4, #12
1a0042e4:	4680      	mov	r8, r0
1a0042e6:	0092      	lsls	r2, r2, #2
1a0042e8:	300c      	adds	r0, #12
1a0042ea:	f7fe fd71 	bl	1a002dd0 <memcpy>
1a0042ee:	4621      	mov	r1, r4
1a0042f0:	4630      	mov	r0, r6
1a0042f2:	f7ff ffb7 	bl	1a004264 <_Bfree>
1a0042f6:	4644      	mov	r4, r8
1a0042f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
1a0042fc:	3501      	adds	r5, #1
1a0042fe:	615f      	str	r7, [r3, #20]
1a004300:	6125      	str	r5, [r4, #16]
1a004302:	4620      	mov	r0, r4
1a004304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a004308 <__s2b>:
1a004308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00430c:	460c      	mov	r4, r1
1a00430e:	4615      	mov	r5, r2
1a004310:	461f      	mov	r7, r3
1a004312:	2209      	movs	r2, #9
1a004314:	3308      	adds	r3, #8
1a004316:	4606      	mov	r6, r0
1a004318:	fb93 f3f2 	sdiv	r3, r3, r2
1a00431c:	2100      	movs	r1, #0
1a00431e:	2201      	movs	r2, #1
1a004320:	429a      	cmp	r2, r3
1a004322:	db20      	blt.n	1a004366 <__s2b+0x5e>
1a004324:	4630      	mov	r0, r6
1a004326:	f7ff ff69 	bl	1a0041fc <_Balloc>
1a00432a:	9b08      	ldr	r3, [sp, #32]
1a00432c:	6143      	str	r3, [r0, #20]
1a00432e:	2d09      	cmp	r5, #9
1a004330:	f04f 0301 	mov.w	r3, #1
1a004334:	6103      	str	r3, [r0, #16]
1a004336:	dd19      	ble.n	1a00436c <__s2b+0x64>
1a004338:	f104 0909 	add.w	r9, r4, #9
1a00433c:	46c8      	mov	r8, r9
1a00433e:	442c      	add	r4, r5
1a004340:	f818 3b01 	ldrb.w	r3, [r8], #1
1a004344:	4601      	mov	r1, r0
1a004346:	3b30      	subs	r3, #48	; 0x30
1a004348:	220a      	movs	r2, #10
1a00434a:	4630      	mov	r0, r6
1a00434c:	f7ff ffa1 	bl	1a004292 <__multadd>
1a004350:	45a0      	cmp	r8, r4
1a004352:	d1f5      	bne.n	1a004340 <__s2b+0x38>
1a004354:	f1a5 0408 	sub.w	r4, r5, #8
1a004358:	444c      	add	r4, r9
1a00435a:	1b2d      	subs	r5, r5, r4
1a00435c:	1963      	adds	r3, r4, r5
1a00435e:	42bb      	cmp	r3, r7
1a004360:	db07      	blt.n	1a004372 <__s2b+0x6a>
1a004362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004366:	0052      	lsls	r2, r2, #1
1a004368:	3101      	adds	r1, #1
1a00436a:	e7d9      	b.n	1a004320 <__s2b+0x18>
1a00436c:	340a      	adds	r4, #10
1a00436e:	2509      	movs	r5, #9
1a004370:	e7f3      	b.n	1a00435a <__s2b+0x52>
1a004372:	f814 3b01 	ldrb.w	r3, [r4], #1
1a004376:	4601      	mov	r1, r0
1a004378:	3b30      	subs	r3, #48	; 0x30
1a00437a:	220a      	movs	r2, #10
1a00437c:	4630      	mov	r0, r6
1a00437e:	f7ff ff88 	bl	1a004292 <__multadd>
1a004382:	e7eb      	b.n	1a00435c <__s2b+0x54>

1a004384 <__hi0bits>:
1a004384:	0c02      	lsrs	r2, r0, #16
1a004386:	0412      	lsls	r2, r2, #16
1a004388:	4603      	mov	r3, r0
1a00438a:	b9ca      	cbnz	r2, 1a0043c0 <__hi0bits+0x3c>
1a00438c:	0403      	lsls	r3, r0, #16
1a00438e:	2010      	movs	r0, #16
1a004390:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a004394:	bf04      	itt	eq
1a004396:	021b      	lsleq	r3, r3, #8
1a004398:	3008      	addeq	r0, #8
1a00439a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a00439e:	bf04      	itt	eq
1a0043a0:	011b      	lsleq	r3, r3, #4
1a0043a2:	3004      	addeq	r0, #4
1a0043a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a0043a8:	bf04      	itt	eq
1a0043aa:	009b      	lsleq	r3, r3, #2
1a0043ac:	3002      	addeq	r0, #2
1a0043ae:	2b00      	cmp	r3, #0
1a0043b0:	db05      	blt.n	1a0043be <__hi0bits+0x3a>
1a0043b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a0043b6:	f100 0001 	add.w	r0, r0, #1
1a0043ba:	bf08      	it	eq
1a0043bc:	2020      	moveq	r0, #32
1a0043be:	4770      	bx	lr
1a0043c0:	2000      	movs	r0, #0
1a0043c2:	e7e5      	b.n	1a004390 <__hi0bits+0xc>

1a0043c4 <__lo0bits>:
1a0043c4:	6803      	ldr	r3, [r0, #0]
1a0043c6:	f013 0207 	ands.w	r2, r3, #7
1a0043ca:	4601      	mov	r1, r0
1a0043cc:	d00b      	beq.n	1a0043e6 <__lo0bits+0x22>
1a0043ce:	07da      	lsls	r2, r3, #31
1a0043d0:	d424      	bmi.n	1a00441c <__lo0bits+0x58>
1a0043d2:	0798      	lsls	r0, r3, #30
1a0043d4:	bf49      	itett	mi
1a0043d6:	085b      	lsrmi	r3, r3, #1
1a0043d8:	089b      	lsrpl	r3, r3, #2
1a0043da:	2001      	movmi	r0, #1
1a0043dc:	600b      	strmi	r3, [r1, #0]
1a0043de:	bf5c      	itt	pl
1a0043e0:	600b      	strpl	r3, [r1, #0]
1a0043e2:	2002      	movpl	r0, #2
1a0043e4:	4770      	bx	lr
1a0043e6:	b298      	uxth	r0, r3
1a0043e8:	b9b0      	cbnz	r0, 1a004418 <__lo0bits+0x54>
1a0043ea:	0c1b      	lsrs	r3, r3, #16
1a0043ec:	2010      	movs	r0, #16
1a0043ee:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0043f2:	bf04      	itt	eq
1a0043f4:	0a1b      	lsreq	r3, r3, #8
1a0043f6:	3008      	addeq	r0, #8
1a0043f8:	071a      	lsls	r2, r3, #28
1a0043fa:	bf04      	itt	eq
1a0043fc:	091b      	lsreq	r3, r3, #4
1a0043fe:	3004      	addeq	r0, #4
1a004400:	079a      	lsls	r2, r3, #30
1a004402:	bf04      	itt	eq
1a004404:	089b      	lsreq	r3, r3, #2
1a004406:	3002      	addeq	r0, #2
1a004408:	07da      	lsls	r2, r3, #31
1a00440a:	d403      	bmi.n	1a004414 <__lo0bits+0x50>
1a00440c:	085b      	lsrs	r3, r3, #1
1a00440e:	f100 0001 	add.w	r0, r0, #1
1a004412:	d005      	beq.n	1a004420 <__lo0bits+0x5c>
1a004414:	600b      	str	r3, [r1, #0]
1a004416:	4770      	bx	lr
1a004418:	4610      	mov	r0, r2
1a00441a:	e7e8      	b.n	1a0043ee <__lo0bits+0x2a>
1a00441c:	2000      	movs	r0, #0
1a00441e:	4770      	bx	lr
1a004420:	2020      	movs	r0, #32
1a004422:	4770      	bx	lr

1a004424 <__i2b>:
1a004424:	b510      	push	{r4, lr}
1a004426:	460c      	mov	r4, r1
1a004428:	2101      	movs	r1, #1
1a00442a:	f7ff fee7 	bl	1a0041fc <_Balloc>
1a00442e:	2201      	movs	r2, #1
1a004430:	6144      	str	r4, [r0, #20]
1a004432:	6102      	str	r2, [r0, #16]
1a004434:	bd10      	pop	{r4, pc}

1a004436 <__multiply>:
1a004436:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00443a:	4690      	mov	r8, r2
1a00443c:	690a      	ldr	r2, [r1, #16]
1a00443e:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a004442:	429a      	cmp	r2, r3
1a004444:	bfb8      	it	lt
1a004446:	460b      	movlt	r3, r1
1a004448:	460c      	mov	r4, r1
1a00444a:	bfbc      	itt	lt
1a00444c:	4644      	movlt	r4, r8
1a00444e:	4698      	movlt	r8, r3
1a004450:	6927      	ldr	r7, [r4, #16]
1a004452:	f8d8 9010 	ldr.w	r9, [r8, #16]
1a004456:	68a3      	ldr	r3, [r4, #8]
1a004458:	6861      	ldr	r1, [r4, #4]
1a00445a:	eb07 0609 	add.w	r6, r7, r9
1a00445e:	42b3      	cmp	r3, r6
1a004460:	bfb8      	it	lt
1a004462:	3101      	addlt	r1, #1
1a004464:	f7ff feca 	bl	1a0041fc <_Balloc>
1a004468:	f100 0514 	add.w	r5, r0, #20
1a00446c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
1a004470:	462b      	mov	r3, r5
1a004472:	2200      	movs	r2, #0
1a004474:	4573      	cmp	r3, lr
1a004476:	d316      	bcc.n	1a0044a6 <__multiply+0x70>
1a004478:	f104 0314 	add.w	r3, r4, #20
1a00447c:	f108 0214 	add.w	r2, r8, #20
1a004480:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a004484:	eb02 0389 	add.w	r3, r2, r9, lsl #2
1a004488:	9300      	str	r3, [sp, #0]
1a00448a:	9b00      	ldr	r3, [sp, #0]
1a00448c:	9201      	str	r2, [sp, #4]
1a00448e:	4293      	cmp	r3, r2
1a004490:	d80c      	bhi.n	1a0044ac <__multiply+0x76>
1a004492:	2e00      	cmp	r6, #0
1a004494:	dd03      	ble.n	1a00449e <__multiply+0x68>
1a004496:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1a00449a:	2b00      	cmp	r3, #0
1a00449c:	d059      	beq.n	1a004552 <__multiply+0x11c>
1a00449e:	6106      	str	r6, [r0, #16]
1a0044a0:	b003      	add	sp, #12
1a0044a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0044a6:	f843 2b04 	str.w	r2, [r3], #4
1a0044aa:	e7e3      	b.n	1a004474 <__multiply+0x3e>
1a0044ac:	f8b2 a000 	ldrh.w	sl, [r2]
1a0044b0:	f1ba 0f00 	cmp.w	sl, #0
1a0044b4:	d023      	beq.n	1a0044fe <__multiply+0xc8>
1a0044b6:	f104 0914 	add.w	r9, r4, #20
1a0044ba:	46ac      	mov	ip, r5
1a0044bc:	f04f 0800 	mov.w	r8, #0
1a0044c0:	f859 1b04 	ldr.w	r1, [r9], #4
1a0044c4:	f8dc b000 	ldr.w	fp, [ip]
1a0044c8:	b28b      	uxth	r3, r1
1a0044ca:	fa1f fb8b 	uxth.w	fp, fp
1a0044ce:	fb0a b303 	mla	r3, sl, r3, fp
1a0044d2:	ea4f 4b11 	mov.w	fp, r1, lsr #16
1a0044d6:	f8dc 1000 	ldr.w	r1, [ip]
1a0044da:	4443      	add	r3, r8
1a0044dc:	ea4f 4811 	mov.w	r8, r1, lsr #16
1a0044e0:	fb0a 810b 	mla	r1, sl, fp, r8
1a0044e4:	eb01 4113 	add.w	r1, r1, r3, lsr #16
1a0044e8:	b29b      	uxth	r3, r3
1a0044ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0044ee:	454f      	cmp	r7, r9
1a0044f0:	ea4f 4811 	mov.w	r8, r1, lsr #16
1a0044f4:	f84c 3b04 	str.w	r3, [ip], #4
1a0044f8:	d8e2      	bhi.n	1a0044c0 <__multiply+0x8a>
1a0044fa:	f8cc 8000 	str.w	r8, [ip]
1a0044fe:	9b01      	ldr	r3, [sp, #4]
1a004500:	f8b3 9002 	ldrh.w	r9, [r3, #2]
1a004504:	3204      	adds	r2, #4
1a004506:	f1b9 0f00 	cmp.w	r9, #0
1a00450a:	d020      	beq.n	1a00454e <__multiply+0x118>
1a00450c:	682b      	ldr	r3, [r5, #0]
1a00450e:	f104 0814 	add.w	r8, r4, #20
1a004512:	46ac      	mov	ip, r5
1a004514:	f04f 0a00 	mov.w	sl, #0
1a004518:	f8b8 1000 	ldrh.w	r1, [r8]
1a00451c:	f8bc b002 	ldrh.w	fp, [ip, #2]
1a004520:	fb09 b101 	mla	r1, r9, r1, fp
1a004524:	448a      	add	sl, r1
1a004526:	b29b      	uxth	r3, r3
1a004528:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
1a00452c:	f84c 3b04 	str.w	r3, [ip], #4
1a004530:	f858 3b04 	ldr.w	r3, [r8], #4
1a004534:	f8bc 1000 	ldrh.w	r1, [ip]
1a004538:	0c1b      	lsrs	r3, r3, #16
1a00453a:	fb09 1303 	mla	r3, r9, r3, r1
1a00453e:	eb03 431a 	add.w	r3, r3, sl, lsr #16
1a004542:	4547      	cmp	r7, r8
1a004544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
1a004548:	d8e6      	bhi.n	1a004518 <__multiply+0xe2>
1a00454a:	f8cc 3000 	str.w	r3, [ip]
1a00454e:	3504      	adds	r5, #4
1a004550:	e79b      	b.n	1a00448a <__multiply+0x54>
1a004552:	3e01      	subs	r6, #1
1a004554:	e79d      	b.n	1a004492 <__multiply+0x5c>
1a004556:	Address 0x1a004556 is out of bounds.


1a004558 <__pow5mult>:
1a004558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00455c:	4615      	mov	r5, r2
1a00455e:	f012 0203 	ands.w	r2, r2, #3
1a004562:	4606      	mov	r6, r0
1a004564:	460f      	mov	r7, r1
1a004566:	d007      	beq.n	1a004578 <__pow5mult+0x20>
1a004568:	3a01      	subs	r2, #1
1a00456a:	4c21      	ldr	r4, [pc, #132]	; (1a0045f0 <__pow5mult+0x98>)
1a00456c:	2300      	movs	r3, #0
1a00456e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
1a004572:	f7ff fe8e 	bl	1a004292 <__multadd>
1a004576:	4607      	mov	r7, r0
1a004578:	10ad      	asrs	r5, r5, #2
1a00457a:	d035      	beq.n	1a0045e8 <__pow5mult+0x90>
1a00457c:	6a74      	ldr	r4, [r6, #36]	; 0x24
1a00457e:	b93c      	cbnz	r4, 1a004590 <__pow5mult+0x38>
1a004580:	2010      	movs	r0, #16
1a004582:	f7ff fe15 	bl	1a0041b0 <malloc>
1a004586:	e9c0 4401 	strd	r4, r4, [r0, #4]
1a00458a:	6270      	str	r0, [r6, #36]	; 0x24
1a00458c:	6004      	str	r4, [r0, #0]
1a00458e:	60c4      	str	r4, [r0, #12]
1a004590:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
1a004594:	f8d8 4008 	ldr.w	r4, [r8, #8]
1a004598:	b94c      	cbnz	r4, 1a0045ae <__pow5mult+0x56>
1a00459a:	f240 2171 	movw	r1, #625	; 0x271
1a00459e:	4630      	mov	r0, r6
1a0045a0:	f7ff ff40 	bl	1a004424 <__i2b>
1a0045a4:	2300      	movs	r3, #0
1a0045a6:	f8c8 0008 	str.w	r0, [r8, #8]
1a0045aa:	4604      	mov	r4, r0
1a0045ac:	6003      	str	r3, [r0, #0]
1a0045ae:	f04f 0800 	mov.w	r8, #0
1a0045b2:	07eb      	lsls	r3, r5, #31
1a0045b4:	d50a      	bpl.n	1a0045cc <__pow5mult+0x74>
1a0045b6:	4639      	mov	r1, r7
1a0045b8:	4622      	mov	r2, r4
1a0045ba:	4630      	mov	r0, r6
1a0045bc:	f7ff ff3b 	bl	1a004436 <__multiply>
1a0045c0:	4639      	mov	r1, r7
1a0045c2:	4681      	mov	r9, r0
1a0045c4:	4630      	mov	r0, r6
1a0045c6:	f7ff fe4d 	bl	1a004264 <_Bfree>
1a0045ca:	464f      	mov	r7, r9
1a0045cc:	106d      	asrs	r5, r5, #1
1a0045ce:	d00b      	beq.n	1a0045e8 <__pow5mult+0x90>
1a0045d0:	6820      	ldr	r0, [r4, #0]
1a0045d2:	b938      	cbnz	r0, 1a0045e4 <__pow5mult+0x8c>
1a0045d4:	4622      	mov	r2, r4
1a0045d6:	4621      	mov	r1, r4
1a0045d8:	4630      	mov	r0, r6
1a0045da:	f7ff ff2c 	bl	1a004436 <__multiply>
1a0045de:	6020      	str	r0, [r4, #0]
1a0045e0:	f8c0 8000 	str.w	r8, [r0]
1a0045e4:	4604      	mov	r4, r0
1a0045e6:	e7e4      	b.n	1a0045b2 <__pow5mult+0x5a>
1a0045e8:	4638      	mov	r0, r7
1a0045ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0045ee:	bf00      	nop
1a0045f0:	1a0051d8 	.word	0x1a0051d8

1a0045f4 <__lshift>:
1a0045f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0045f8:	460c      	mov	r4, r1
1a0045fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
1a0045fe:	6923      	ldr	r3, [r4, #16]
1a004600:	6849      	ldr	r1, [r1, #4]
1a004602:	eb0a 0903 	add.w	r9, sl, r3
1a004606:	68a3      	ldr	r3, [r4, #8]
1a004608:	4607      	mov	r7, r0
1a00460a:	4616      	mov	r6, r2
1a00460c:	f109 0501 	add.w	r5, r9, #1
1a004610:	42ab      	cmp	r3, r5
1a004612:	db33      	blt.n	1a00467c <__lshift+0x88>
1a004614:	4638      	mov	r0, r7
1a004616:	f7ff fdf1 	bl	1a0041fc <_Balloc>
1a00461a:	2300      	movs	r3, #0
1a00461c:	4680      	mov	r8, r0
1a00461e:	f100 0114 	add.w	r1, r0, #20
1a004622:	f100 0210 	add.w	r2, r0, #16
1a004626:	4618      	mov	r0, r3
1a004628:	4553      	cmp	r3, sl
1a00462a:	db2a      	blt.n	1a004682 <__lshift+0x8e>
1a00462c:	6920      	ldr	r0, [r4, #16]
1a00462e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
1a004632:	f104 0314 	add.w	r3, r4, #20
1a004636:	f016 021f 	ands.w	r2, r6, #31
1a00463a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
1a00463e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
1a004642:	d022      	beq.n	1a00468a <__lshift+0x96>
1a004644:	f1c2 0e20 	rsb	lr, r2, #32
1a004648:	2000      	movs	r0, #0
1a00464a:	681e      	ldr	r6, [r3, #0]
1a00464c:	4096      	lsls	r6, r2
1a00464e:	4330      	orrs	r0, r6
1a004650:	f841 0b04 	str.w	r0, [r1], #4
1a004654:	f853 0b04 	ldr.w	r0, [r3], #4
1a004658:	459c      	cmp	ip, r3
1a00465a:	fa20 f00e 	lsr.w	r0, r0, lr
1a00465e:	d8f4      	bhi.n	1a00464a <__lshift+0x56>
1a004660:	6008      	str	r0, [r1, #0]
1a004662:	b108      	cbz	r0, 1a004668 <__lshift+0x74>
1a004664:	f109 0502 	add.w	r5, r9, #2
1a004668:	3d01      	subs	r5, #1
1a00466a:	4638      	mov	r0, r7
1a00466c:	f8c8 5010 	str.w	r5, [r8, #16]
1a004670:	4621      	mov	r1, r4
1a004672:	f7ff fdf7 	bl	1a004264 <_Bfree>
1a004676:	4640      	mov	r0, r8
1a004678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00467c:	3101      	adds	r1, #1
1a00467e:	005b      	lsls	r3, r3, #1
1a004680:	e7c6      	b.n	1a004610 <__lshift+0x1c>
1a004682:	f842 0f04 	str.w	r0, [r2, #4]!
1a004686:	3301      	adds	r3, #1
1a004688:	e7ce      	b.n	1a004628 <__lshift+0x34>
1a00468a:	3904      	subs	r1, #4
1a00468c:	f853 2b04 	ldr.w	r2, [r3], #4
1a004690:	f841 2f04 	str.w	r2, [r1, #4]!
1a004694:	459c      	cmp	ip, r3
1a004696:	d8f9      	bhi.n	1a00468c <__lshift+0x98>
1a004698:	e7e6      	b.n	1a004668 <__lshift+0x74>

1a00469a <__mcmp>:
1a00469a:	6903      	ldr	r3, [r0, #16]
1a00469c:	690a      	ldr	r2, [r1, #16]
1a00469e:	1a9b      	subs	r3, r3, r2
1a0046a0:	b530      	push	{r4, r5, lr}
1a0046a2:	d10c      	bne.n	1a0046be <__mcmp+0x24>
1a0046a4:	0092      	lsls	r2, r2, #2
1a0046a6:	3014      	adds	r0, #20
1a0046a8:	3114      	adds	r1, #20
1a0046aa:	1884      	adds	r4, r0, r2
1a0046ac:	4411      	add	r1, r2
1a0046ae:	f854 5d04 	ldr.w	r5, [r4, #-4]!
1a0046b2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a0046b6:	4295      	cmp	r5, r2
1a0046b8:	d003      	beq.n	1a0046c2 <__mcmp+0x28>
1a0046ba:	d305      	bcc.n	1a0046c8 <__mcmp+0x2e>
1a0046bc:	2301      	movs	r3, #1
1a0046be:	4618      	mov	r0, r3
1a0046c0:	bd30      	pop	{r4, r5, pc}
1a0046c2:	42a0      	cmp	r0, r4
1a0046c4:	d3f3      	bcc.n	1a0046ae <__mcmp+0x14>
1a0046c6:	e7fa      	b.n	1a0046be <__mcmp+0x24>
1a0046c8:	f04f 33ff 	mov.w	r3, #4294967295
1a0046cc:	e7f7      	b.n	1a0046be <__mcmp+0x24>

1a0046ce <__mdiff>:
1a0046ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0046d2:	460d      	mov	r5, r1
1a0046d4:	4607      	mov	r7, r0
1a0046d6:	4611      	mov	r1, r2
1a0046d8:	4628      	mov	r0, r5
1a0046da:	4614      	mov	r4, r2
1a0046dc:	f7ff ffdd 	bl	1a00469a <__mcmp>
1a0046e0:	1e06      	subs	r6, r0, #0
1a0046e2:	d108      	bne.n	1a0046f6 <__mdiff+0x28>
1a0046e4:	4631      	mov	r1, r6
1a0046e6:	4638      	mov	r0, r7
1a0046e8:	f7ff fd88 	bl	1a0041fc <_Balloc>
1a0046ec:	2301      	movs	r3, #1
1a0046ee:	e9c0 3604 	strd	r3, r6, [r0, #16]
1a0046f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0046f6:	bfa4      	itt	ge
1a0046f8:	4623      	movge	r3, r4
1a0046fa:	462c      	movge	r4, r5
1a0046fc:	4638      	mov	r0, r7
1a0046fe:	6861      	ldr	r1, [r4, #4]
1a004700:	bfa6      	itte	ge
1a004702:	461d      	movge	r5, r3
1a004704:	2600      	movge	r6, #0
1a004706:	2601      	movlt	r6, #1
1a004708:	f7ff fd78 	bl	1a0041fc <_Balloc>
1a00470c:	692b      	ldr	r3, [r5, #16]
1a00470e:	60c6      	str	r6, [r0, #12]
1a004710:	6926      	ldr	r6, [r4, #16]
1a004712:	f105 0914 	add.w	r9, r5, #20
1a004716:	f104 0214 	add.w	r2, r4, #20
1a00471a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
1a00471e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
1a004722:	f100 0514 	add.w	r5, r0, #20
1a004726:	f04f 0e00 	mov.w	lr, #0
1a00472a:	f852 ab04 	ldr.w	sl, [r2], #4
1a00472e:	f859 4b04 	ldr.w	r4, [r9], #4
1a004732:	fa1e f18a 	uxtah	r1, lr, sl
1a004736:	b2a3      	uxth	r3, r4
1a004738:	1ac9      	subs	r1, r1, r3
1a00473a:	0c23      	lsrs	r3, r4, #16
1a00473c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
1a004740:	eb03 4321 	add.w	r3, r3, r1, asr #16
1a004744:	b289      	uxth	r1, r1
1a004746:	ea4f 4e23 	mov.w	lr, r3, asr #16
1a00474a:	45c8      	cmp	r8, r9
1a00474c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a004750:	4694      	mov	ip, r2
1a004752:	f845 3b04 	str.w	r3, [r5], #4
1a004756:	d8e8      	bhi.n	1a00472a <__mdiff+0x5c>
1a004758:	45bc      	cmp	ip, r7
1a00475a:	d304      	bcc.n	1a004766 <__mdiff+0x98>
1a00475c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a004760:	b183      	cbz	r3, 1a004784 <__mdiff+0xb6>
1a004762:	6106      	str	r6, [r0, #16]
1a004764:	e7c5      	b.n	1a0046f2 <__mdiff+0x24>
1a004766:	f85c 1b04 	ldr.w	r1, [ip], #4
1a00476a:	fa1e f381 	uxtah	r3, lr, r1
1a00476e:	141a      	asrs	r2, r3, #16
1a004770:	eb02 4211 	add.w	r2, r2, r1, lsr #16
1a004774:	b29b      	uxth	r3, r3
1a004776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00477a:	ea4f 4e22 	mov.w	lr, r2, asr #16
1a00477e:	f845 3b04 	str.w	r3, [r5], #4
1a004782:	e7e9      	b.n	1a004758 <__mdiff+0x8a>
1a004784:	3e01      	subs	r6, #1
1a004786:	e7e9      	b.n	1a00475c <__mdiff+0x8e>

1a004788 <__ulp>:
1a004788:	4b11      	ldr	r3, [pc, #68]	; (1a0047d0 <__ulp+0x48>)
1a00478a:	ee10 2a90 	vmov	r2, s1
1a00478e:	401a      	ands	r2, r3
1a004790:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
1a004794:	2b00      	cmp	r3, #0
1a004796:	dd04      	ble.n	1a0047a2 <__ulp+0x1a>
1a004798:	2000      	movs	r0, #0
1a00479a:	4619      	mov	r1, r3
1a00479c:	ec41 0b10 	vmov	d0, r0, r1
1a0047a0:	4770      	bx	lr
1a0047a2:	425b      	negs	r3, r3
1a0047a4:	151b      	asrs	r3, r3, #20
1a0047a6:	2b13      	cmp	r3, #19
1a0047a8:	f04f 0000 	mov.w	r0, #0
1a0047ac:	f04f 0100 	mov.w	r1, #0
1a0047b0:	dc04      	bgt.n	1a0047bc <__ulp+0x34>
1a0047b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
1a0047b6:	fa42 f103 	asr.w	r1, r2, r3
1a0047ba:	e7ef      	b.n	1a00479c <__ulp+0x14>
1a0047bc:	3b14      	subs	r3, #20
1a0047be:	2b1e      	cmp	r3, #30
1a0047c0:	bfda      	itte	le
1a0047c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
1a0047c6:	fa22 f303 	lsrle.w	r3, r2, r3
1a0047ca:	2301      	movgt	r3, #1
1a0047cc:	4618      	mov	r0, r3
1a0047ce:	e7e5      	b.n	1a00479c <__ulp+0x14>
1a0047d0:	7ff00000 	.word	0x7ff00000

1a0047d4 <__b2d>:
1a0047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0047d6:	6905      	ldr	r5, [r0, #16]
1a0047d8:	f100 0714 	add.w	r7, r0, #20
1a0047dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
1a0047e0:	1f2e      	subs	r6, r5, #4
1a0047e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
1a0047e6:	4620      	mov	r0, r4
1a0047e8:	f7ff fdcc 	bl	1a004384 <__hi0bits>
1a0047ec:	f1c0 0320 	rsb	r3, r0, #32
1a0047f0:	280a      	cmp	r0, #10
1a0047f2:	600b      	str	r3, [r1, #0]
1a0047f4:	f8df c078 	ldr.w	ip, [pc, #120]	; 1a004870 <__b2d+0x9c>
1a0047f8:	dc14      	bgt.n	1a004824 <__b2d+0x50>
1a0047fa:	f1c0 0e0b 	rsb	lr, r0, #11
1a0047fe:	fa24 f10e 	lsr.w	r1, r4, lr
1a004802:	42b7      	cmp	r7, r6
1a004804:	ea41 030c 	orr.w	r3, r1, ip
1a004808:	bf34      	ite	cc
1a00480a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
1a00480e:	2100      	movcs	r1, #0
1a004810:	3015      	adds	r0, #21
1a004812:	fa04 f000 	lsl.w	r0, r4, r0
1a004816:	fa21 f10e 	lsr.w	r1, r1, lr
1a00481a:	ea40 0201 	orr.w	r2, r0, r1
1a00481e:	ec43 2b10 	vmov	d0, r2, r3
1a004822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004824:	42b7      	cmp	r7, r6
1a004826:	bf3a      	itte	cc
1a004828:	f1a5 0608 	subcc.w	r6, r5, #8
1a00482c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
1a004830:	2100      	movcs	r1, #0
1a004832:	380b      	subs	r0, #11
1a004834:	d017      	beq.n	1a004866 <__b2d+0x92>
1a004836:	f1c0 0c20 	rsb	ip, r0, #32
1a00483a:	fa04 f500 	lsl.w	r5, r4, r0
1a00483e:	42be      	cmp	r6, r7
1a004840:	fa21 f40c 	lsr.w	r4, r1, ip
1a004844:	ea45 0504 	orr.w	r5, r5, r4
1a004848:	bf8c      	ite	hi
1a00484a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
1a00484e:	2400      	movls	r4, #0
1a004850:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
1a004854:	fa01 f000 	lsl.w	r0, r1, r0
1a004858:	fa24 f40c 	lsr.w	r4, r4, ip
1a00485c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a004860:	ea40 0204 	orr.w	r2, r0, r4
1a004864:	e7db      	b.n	1a00481e <__b2d+0x4a>
1a004866:	ea44 030c 	orr.w	r3, r4, ip
1a00486a:	460a      	mov	r2, r1
1a00486c:	e7d7      	b.n	1a00481e <__b2d+0x4a>
1a00486e:	bf00      	nop
1a004870:	3ff00000 	.word	0x3ff00000

1a004874 <__d2b>:
1a004874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
1a004878:	460e      	mov	r6, r1
1a00487a:	2101      	movs	r1, #1
1a00487c:	ec59 8b10 	vmov	r8, r9, d0
1a004880:	4615      	mov	r5, r2
1a004882:	f7ff fcbb 	bl	1a0041fc <_Balloc>
1a004886:	f3c9 540a 	ubfx	r4, r9, #20, #11
1a00488a:	4607      	mov	r7, r0
1a00488c:	f3c9 0313 	ubfx	r3, r9, #0, #20
1a004890:	bb2c      	cbnz	r4, 1a0048de <__d2b+0x6a>
1a004892:	9301      	str	r3, [sp, #4]
1a004894:	f1b8 0300 	subs.w	r3, r8, #0
1a004898:	d026      	beq.n	1a0048e8 <__d2b+0x74>
1a00489a:	4668      	mov	r0, sp
1a00489c:	9300      	str	r3, [sp, #0]
1a00489e:	f7ff fd91 	bl	1a0043c4 <__lo0bits>
1a0048a2:	9900      	ldr	r1, [sp, #0]
1a0048a4:	b1f0      	cbz	r0, 1a0048e4 <__d2b+0x70>
1a0048a6:	9a01      	ldr	r2, [sp, #4]
1a0048a8:	f1c0 0320 	rsb	r3, r0, #32
1a0048ac:	fa02 f303 	lsl.w	r3, r2, r3
1a0048b0:	430b      	orrs	r3, r1
1a0048b2:	40c2      	lsrs	r2, r0
1a0048b4:	617b      	str	r3, [r7, #20]
1a0048b6:	9201      	str	r2, [sp, #4]
1a0048b8:	9b01      	ldr	r3, [sp, #4]
1a0048ba:	61bb      	str	r3, [r7, #24]
1a0048bc:	2b00      	cmp	r3, #0
1a0048be:	bf14      	ite	ne
1a0048c0:	2102      	movne	r1, #2
1a0048c2:	2101      	moveq	r1, #1
1a0048c4:	6139      	str	r1, [r7, #16]
1a0048c6:	b1c4      	cbz	r4, 1a0048fa <__d2b+0x86>
1a0048c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
1a0048cc:	4404      	add	r4, r0
1a0048ce:	6034      	str	r4, [r6, #0]
1a0048d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a0048d4:	6028      	str	r0, [r5, #0]
1a0048d6:	4638      	mov	r0, r7
1a0048d8:	b003      	add	sp, #12
1a0048da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0048de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0048e2:	e7d6      	b.n	1a004892 <__d2b+0x1e>
1a0048e4:	6179      	str	r1, [r7, #20]
1a0048e6:	e7e7      	b.n	1a0048b8 <__d2b+0x44>
1a0048e8:	a801      	add	r0, sp, #4
1a0048ea:	f7ff fd6b 	bl	1a0043c4 <__lo0bits>
1a0048ee:	9b01      	ldr	r3, [sp, #4]
1a0048f0:	617b      	str	r3, [r7, #20]
1a0048f2:	2101      	movs	r1, #1
1a0048f4:	6139      	str	r1, [r7, #16]
1a0048f6:	3020      	adds	r0, #32
1a0048f8:	e7e5      	b.n	1a0048c6 <__d2b+0x52>
1a0048fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
1a0048fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a004902:	6030      	str	r0, [r6, #0]
1a004904:	6918      	ldr	r0, [r3, #16]
1a004906:	f7ff fd3d 	bl	1a004384 <__hi0bits>
1a00490a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a00490e:	e7e1      	b.n	1a0048d4 <__d2b+0x60>

1a004910 <__ratio>:
1a004910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004914:	4688      	mov	r8, r1
1a004916:	4669      	mov	r1, sp
1a004918:	4681      	mov	r9, r0
1a00491a:	f7ff ff5b 	bl	1a0047d4 <__b2d>
1a00491e:	a901      	add	r1, sp, #4
1a004920:	4640      	mov	r0, r8
1a004922:	ec57 6b10 	vmov	r6, r7, d0
1a004926:	f7ff ff55 	bl	1a0047d4 <__b2d>
1a00492a:	f8d9 3010 	ldr.w	r3, [r9, #16]
1a00492e:	f8d8 2010 	ldr.w	r2, [r8, #16]
1a004932:	eba3 0c02 	sub.w	ip, r3, r2
1a004936:	e9dd 3200 	ldrd	r3, r2, [sp]
1a00493a:	1a9b      	subs	r3, r3, r2
1a00493c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
1a004940:	ec5b ab10 	vmov	sl, fp, d0
1a004944:	2b00      	cmp	r3, #0
1a004946:	bfce      	itee	gt
1a004948:	463a      	movgt	r2, r7
1a00494a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
1a00494e:	465a      	movle	r2, fp
1a004950:	4659      	mov	r1, fp
1a004952:	463d      	mov	r5, r7
1a004954:	bfd4      	ite	le
1a004956:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
1a00495a:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
1a00495e:	4630      	mov	r0, r6
1a004960:	ee10 2a10 	vmov	r2, s0
1a004964:	460b      	mov	r3, r1
1a004966:	4629      	mov	r1, r5
1a004968:	f7fd fe64 	bl	1a002634 <__aeabi_ddiv>
1a00496c:	ec41 0b10 	vmov	d0, r0, r1
1a004970:	b003      	add	sp, #12
1a004972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a004976 <__copybits>:
1a004976:	3901      	subs	r1, #1
1a004978:	b510      	push	{r4, lr}
1a00497a:	1149      	asrs	r1, r1, #5
1a00497c:	6914      	ldr	r4, [r2, #16]
1a00497e:	3101      	adds	r1, #1
1a004980:	f102 0314 	add.w	r3, r2, #20
1a004984:	eb00 0181 	add.w	r1, r0, r1, lsl #2
1a004988:	eb03 0484 	add.w	r4, r3, r4, lsl #2
1a00498c:	42a3      	cmp	r3, r4
1a00498e:	4602      	mov	r2, r0
1a004990:	d303      	bcc.n	1a00499a <__copybits+0x24>
1a004992:	2300      	movs	r3, #0
1a004994:	428a      	cmp	r2, r1
1a004996:	d305      	bcc.n	1a0049a4 <__copybits+0x2e>
1a004998:	bd10      	pop	{r4, pc}
1a00499a:	f853 2b04 	ldr.w	r2, [r3], #4
1a00499e:	f840 2b04 	str.w	r2, [r0], #4
1a0049a2:	e7f3      	b.n	1a00498c <__copybits+0x16>
1a0049a4:	f842 3b04 	str.w	r3, [r2], #4
1a0049a8:	e7f4      	b.n	1a004994 <__copybits+0x1e>

1a0049aa <__any_on>:
1a0049aa:	f100 0214 	add.w	r2, r0, #20
1a0049ae:	6900      	ldr	r0, [r0, #16]
1a0049b0:	114b      	asrs	r3, r1, #5
1a0049b2:	4298      	cmp	r0, r3
1a0049b4:	b510      	push	{r4, lr}
1a0049b6:	db11      	blt.n	1a0049dc <__any_on+0x32>
1a0049b8:	dd0a      	ble.n	1a0049d0 <__any_on+0x26>
1a0049ba:	f011 011f 	ands.w	r1, r1, #31
1a0049be:	d007      	beq.n	1a0049d0 <__any_on+0x26>
1a0049c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
1a0049c4:	fa24 f001 	lsr.w	r0, r4, r1
1a0049c8:	fa00 f101 	lsl.w	r1, r0, r1
1a0049cc:	428c      	cmp	r4, r1
1a0049ce:	d10b      	bne.n	1a0049e8 <__any_on+0x3e>
1a0049d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1a0049d4:	4293      	cmp	r3, r2
1a0049d6:	d803      	bhi.n	1a0049e0 <__any_on+0x36>
1a0049d8:	2000      	movs	r0, #0
1a0049da:	bd10      	pop	{r4, pc}
1a0049dc:	4603      	mov	r3, r0
1a0049de:	e7f7      	b.n	1a0049d0 <__any_on+0x26>
1a0049e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1a0049e4:	2900      	cmp	r1, #0
1a0049e6:	d0f5      	beq.n	1a0049d4 <__any_on+0x2a>
1a0049e8:	2001      	movs	r0, #1
1a0049ea:	e7f6      	b.n	1a0049da <__any_on+0x30>

1a0049ec <_calloc_r>:
1a0049ec:	b538      	push	{r3, r4, r5, lr}
1a0049ee:	fb02 f401 	mul.w	r4, r2, r1
1a0049f2:	4621      	mov	r1, r4
1a0049f4:	f7fe fa02 	bl	1a002dfc <_malloc_r>
1a0049f8:	4605      	mov	r5, r0
1a0049fa:	b118      	cbz	r0, 1a004a04 <_calloc_r+0x18>
1a0049fc:	4622      	mov	r2, r4
1a0049fe:	2100      	movs	r1, #0
1a004a00:	f7fe f9f4 	bl	1a002dec <memset>
1a004a04:	4628      	mov	r0, r5
1a004a06:	bd38      	pop	{r3, r4, r5, pc}

1a004a08 <nan>:
1a004a08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1a004a10 <nan+0x8>
1a004a0c:	4770      	bx	lr
1a004a0e:	bf00      	nop
1a004a10:	00000000 	.word	0x00000000
1a004a14:	7ff80000 	.word	0x7ff80000

1a004a18 <strncmp>:
1a004a18:	b510      	push	{r4, lr}
1a004a1a:	b16a      	cbz	r2, 1a004a38 <strncmp+0x20>
1a004a1c:	3901      	subs	r1, #1
1a004a1e:	1884      	adds	r4, r0, r2
1a004a20:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004a24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
1a004a28:	4293      	cmp	r3, r2
1a004a2a:	d103      	bne.n	1a004a34 <strncmp+0x1c>
1a004a2c:	42a0      	cmp	r0, r4
1a004a2e:	d001      	beq.n	1a004a34 <strncmp+0x1c>
1a004a30:	2b00      	cmp	r3, #0
1a004a32:	d1f5      	bne.n	1a004a20 <strncmp+0x8>
1a004a34:	1a98      	subs	r0, r3, r2
1a004a36:	bd10      	pop	{r4, pc}
1a004a38:	4610      	mov	r0, r2
1a004a3a:	e7fc      	b.n	1a004a36 <strncmp+0x1e>

1a004a3c <__ascii_wctomb>:
1a004a3c:	b149      	cbz	r1, 1a004a52 <__ascii_wctomb+0x16>
1a004a3e:	2aff      	cmp	r2, #255	; 0xff
1a004a40:	bf85      	ittet	hi
1a004a42:	238a      	movhi	r3, #138	; 0x8a
1a004a44:	6003      	strhi	r3, [r0, #0]
1a004a46:	700a      	strbls	r2, [r1, #0]
1a004a48:	f04f 30ff 	movhi.w	r0, #4294967295
1a004a4c:	bf98      	it	ls
1a004a4e:	2001      	movls	r0, #1
1a004a50:	4770      	bx	lr
1a004a52:	4608      	mov	r0, r1
1a004a54:	4770      	bx	lr
1a004a56:	Address 0x1a004a56 is out of bounds.


1a004a58 <__aeabi_d2lz>:
1a004a58:	b538      	push	{r3, r4, r5, lr}
1a004a5a:	2200      	movs	r2, #0
1a004a5c:	2300      	movs	r3, #0
1a004a5e:	4604      	mov	r4, r0
1a004a60:	460d      	mov	r5, r1
1a004a62:	f7fd ff2f 	bl	1a0028c4 <__aeabi_dcmplt>
1a004a66:	b928      	cbnz	r0, 1a004a74 <__aeabi_d2lz+0x1c>
1a004a68:	4620      	mov	r0, r4
1a004a6a:	4629      	mov	r1, r5
1a004a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004a70:	f7fd bfe0 	b.w	1a002a34 <__aeabi_d2ulz>
1a004a74:	4620      	mov	r0, r4
1a004a76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
1a004a7a:	f7fd ffdb 	bl	1a002a34 <__aeabi_d2ulz>
1a004a7e:	4240      	negs	r0, r0
1a004a80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004a84:	bd38      	pop	{r3, r4, r5, pc}
1a004a86:	bf00      	nop
1a004a88:	3e3e3e3e 	.word	0x3e3e3e3e
1a004a8c:	65744120 	.word	0x65744120
1a004a90:	6569646e 	.word	0x6569646e
1a004a94:	206f646e 	.word	0x206f646e
1a004a98:	65746e69 	.word	0x65746e69
1a004a9c:	70757272 	.word	0x70757272
1a004aa0:	6e6f6963 	.word	0x6e6f6963
1a004aa4:	0a0d202e 	.word	0x0a0d202e
1a004aa8:	ffffff00 	.word	0xffffff00
1a004aac:	3e3e3e3e 	.word	0x3e3e3e3e
1a004ab0:	6e6f4d20 	.word	0x6e6f4d20
1a004ab4:	696e4920 	.word	0x696e4920
1a004ab8:	0d202e74 	.word	0x0d202e74
1a004abc:	0000000a 	.word	0x0000000a
1a004ac0:	3e3e3e3e 	.word	0x3e3e3e3e
1a004ac4:	6e694620 	.word	0x6e694620
1a004ac8:	000a0d20 	.word	0x000a0d20
1a004acc:	3e3e3e3e 	.word	0x3e3e3e3e
1a004ad0:	656c4c20 	.word	0x656c4c20
1a004ad4:	75206f67 	.word	0x75206f67
1a004ad8:	6920616e 	.word	0x6920616e
1a004adc:	7265746e 	.word	0x7265746e
1a004ae0:	63707572 	.word	0x63707572
1a004ae4:	206e6f69 	.word	0x206e6f69
1a004ae8:	00000a0d 	.word	0x00000a0d
1a004aec:	69636552 	.word	0x69636552
1a004af0:	65206962 	.word	0x65206962
1a004af4:	6973206c 	.word	0x6973206c
1a004af8:	65697567 	.word	0x65697567
1a004afc:	2065746e 	.word	0x2065746e
1a004b00:	736e656d 	.word	0x736e656d
1a004b04:	3a656a61 	.word	0x3a656a61
1a004b08:	00000000 	.word	0x00000000
1a004b0c:	50200a0d 	.word	0x50200a0d
1a004b10:	65636f72 	.word	0x65636f72
1a004b14:	65206573 	.word	0x65206573
1a004b18:	6973206c 	.word	0x6973206c
1a004b1c:	65697567 	.word	0x65697567
1a004b20:	2065746e 	.word	0x2065746e
1a004b24:	736e656d 	.word	0x736e656d
1a004b28:	3a656a61 	.word	0x3a656a61
1a004b2c:	000a0d20 	.word	0x000a0d20
1a004b30:	0000002c 	.word	0x0000002c
1a004b34:	67656c4c 	.word	0x67656c4c
1a004b38:	6e75206f 	.word	0x6e75206f
1a004b3c:	30303220 	.word	0x30303220
1a004b40:	0000002e 	.word	0x0000002e
1a004b44:	67656c4c 	.word	0x67656c4c
1a004b48:	6e75206f 	.word	0x6e75206f
1a004b4c:	30303420 	.word	0x30303420
1a004b50:	0000002e 	.word	0x0000002e
1a004b54:	69766e45 	.word	0x69766e45
1a004b58:	6f646e61 	.word	0x6f646e61
1a004b5c:	726f4320 	.word	0x726f4320
1a004b60:	616e6564 	.word	0x616e6564
1a004b64:	20736164 	.word	0x20736164
1a004b68:	41206c61 	.word	0x41206c61
1a004b6c:	3a6f7475 	.word	0x3a6f7475
1a004b70:	ffff0020 	.word	0xffff0020
1a004b74:	54524155 	.word	0x54524155
1a004b78:	4253555f 	.word	0x4253555f
1a004b7c:	6e6f6320 	.word	0x6e6f6320
1a004b80:	75676966 	.word	0x75676966
1a004b84:	61646172 	.word	0x61646172
1a004b88:	726f6320 	.word	0x726f6320
1a004b8c:	74636572 	.word	0x74636572
1a004b90:	6e656d61 	.word	0x6e656d61
1a004b94:	0d2e6574 	.word	0x0d2e6574
1a004b98:	0000000a 	.word	0x0000000a
1a004b9c:	3e3e3e3e 	.word	0x3e3e3e3e
1a004ba0:	52415520 	.word	0x52415520
1a004ba4:	53455f54 	.word	0x53455f54
1a004ba8:	64282050 	.word	0x64282050
1a004bac:	65646e6f 	.word	0x65646e6f
1a004bb0:	20657320 	.word	0x20657320
1a004bb4:	656e6f63 	.word	0x656e6f63
1a004bb8:	20617463 	.word	0x20617463
1a004bbc:	45206c65 	.word	0x45206c65
1a004bc0:	32335053 	.word	0x32335053
1a004bc4:	0d202c29 	.word	0x0d202c29
1a004bc8:	3e3e3e0a 	.word	0x3e3e3e0a
1a004bcc:	6f63203e 	.word	0x6f63203e
1a004bd0:	6769666e 	.word	0x6769666e
1a004bd4:	64617275 	.word	0x64617275
1a004bd8:	6f632061 	.word	0x6f632061
1a004bdc:	73206f6d 	.word	0x73206f6d
1a004be0:	64696c61 	.word	0x64696c61
1a004be4:	65642061 	.word	0x65642061
1a004be8:	6e6f6320 	.word	0x6e6f6320
1a004bec:	616c6f73 	.word	0x616c6f73
1a004bf0:	000a0d2e 	.word	0x000a0d2e

1a004bf4 <InitClkStates>:
1a004bf4:	01010f01                                ....

1a004bf8 <pinmuxing>:
1a004bf8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004c08:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004c18:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004c28:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004c38:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004c48:	00d50301 00d50401 00160107 00560207     ..............V.
1a004c58:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004c68:	00570206                                ..W.

1a004c6c <ExtRateIn>:
1a004c6c:	00000000                                ....

1a004c70 <GpioButtons>:
1a004c70:	08000400 09010900                       ........

1a004c78 <GpioLeds>:
1a004c78:	01050005 0e000205 0c010b01              ............

1a004c84 <GpioPorts>:
1a004c84:	03030003 0f050403 05031005 07030603     ................
1a004c94:	ffff0802                                ....

1a004c98 <OscRateIn>:
1a004c98:	00b71b00                                ....

1a004c9c <InitClkStates>:
1a004c9c:	00010100 00010909 0001090a 01010701     ................
1a004cac:	00010902 00010906 0101090c 0001090d     ................
1a004cbc:	0001090e 0001090f 00010910 00010911     ................
1a004ccc:	00010912 00010913 00011114 00011119     ................
1a004cdc:	0001111a 0001111b 08040201 0f0f0f03     ................
1a004cec:	ffff00ff                                ....

1a004cf0 <periph_to_base>:
1a004cf0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004d00:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004d10:	000100e0 01000100 01200003 00060120     .......... . ...
1a004d20:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004d30:	01820013 00120182 01a201a2 01c20011     ................
1a004d40:	001001c2 01e201e2 0202000f 000e0202     ................
1a004d50:	02220222 0223000d 001c0223              "."...#.#...

1a004d5c <UART_BClock>:
1a004d5c:	01a201c2 01620182                       ......b.

1a004d64 <UART_PClock>:
1a004d64:	00820081 00a200a1                       ........

1a004d6c <gpioPinsInit>:
1a004d6c:	02000104 00050701 05010d03 04080100     ................
1a004d7c:	02020002 02000304 00000403 04070002     ................
1a004d8c:	030c0300 09050402 05040103 04030208     ................
1a004d9c:	04020305 06040504 0802000c 03000b06     ................
1a004dac:	00090607 07060503 060f0504 03030004     ................
1a004dbc:	02000404 00050404 06040502 04060200     ................
1a004dcc:	0c050408 05040a04 0003010e 14010a00     ................
1a004ddc:	010f0000 0d000012 00001101 0010010c     ................
1a004dec:	07070300 000f0300 01000001 00000000     ................
1a004dfc:	000a0600 08060603 06100504 04030005     ................
1a004e0c:	03000106 04090400 04010d05 010b0000     ................
1a004e1c:	0200000f 00000001 00010104 02010800     ................
1a004e2c:	01090000 09010006 05040002 04010200     ................
1a004e3c:	02020105 02020504 0e00000a 01000b02     ................
1a004e4c:	000c020b ffff0c01                       ........

1a004e54 <pwmMap>:
1a004e54:	000a0c01 02070d03 ff060405              ............

1a004e60 <lpcUarts>:
1a004e60:	40081000 06020406 00180205 40081000     ...@...........@
1a004e70:	09070509 00180706 40082000 00000000     ......... .@....
1a004e80:	00190000 400c1000 07060107 001a0602     .......@........
1a004e90:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004ea0:	02020302 001b0204                       ........

1a004ea8 <SCTdataList>:
1a004ea8:	01040204 03040a02 0b020c02 0c060506     ................
1a004eb8:	04010301 00000501 04070507 7778797a     ............zyxw
1a004ec8:	73747576 6f707172 6b6c6d6e 6768696a     vutsrqponmlkjihg
1a004ed8:	63646566 38396162 34353637 30313233     fedcba9876543210
1a004ee8:	34333231 38373635 63626139 67666564     123456789abcdefg
1a004ef8:	6b6a6968 6f6e6d6c 73727170 77767574     hijklmnopqrstuvw
1a004f08:	007a7978                                xyz.

1a004f0c <ultrasonicSensorsIrqMap>:
1a004f0c:	                                         ...

1a004f0f <_ctype_>:
1a004f0f:	20202000 20202020 28282020 20282828     .         ((((( 
1a004f1f:	20202020 20202020 20202020 20202020                     
1a004f2f:	10108820 10101010 10101010 10101010      ...............
1a004f3f:	04040410 04040404 10040404 10101010     ................
1a004f4f:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a004f5f:	01010101 01010101 01010101 10101010     ................
1a004f6f:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a004f7f:	02020202 02020202 02020202 10101010     ................
1a004f8f:	00000020 00000000 00000000 00000000      ...............
	...

1a005010 <__sf_fake_stderr>:
	...

1a005030 <__sf_fake_stdin>:
	...

1a005050 <__sf_fake_stdout>:
	...
1a005070:	6900666e 7974696e 006e6100              nf.inity.an.

1a00507c <fpi.7530>:
1a00507c:	00000035 fffffbce 000003cb 00000001     5...............
1a00508c:	00000000                                ....

1a005090 <fpinan.7566>:
1a005090:	00000034 fffffbce 000003cb 00000001     4...............
1a0050a0:	00000000 ffffffff                       ........

1a0050a8 <tinytens>:
1a0050a8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
1a0050b8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
1a0050c8:	64ac6f43 11680628                       Co.d(.h.

1a0050d0 <_C_numeric_locale>:
1a0050d0:	1a0050dc 1a0050dd 10000140 0043002e     .P...P..@.....C.
1a0050e0:	49534f50 ffff0058                       POSIX...

1a0050e8 <__mprec_bigtens>:
1a0050e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a0050f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a005108:	7f73bf3c 75154fdd                       <.s..O.u

1a005110 <__mprec_tens>:
1a005110:	00000000 3ff00000 00000000 40240000     .......?......$@
1a005120:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a005130:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a005140:	00000000 412e8480 00000000 416312d0     .......A......cA
1a005150:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a005160:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a005170:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a005180:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a005190:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a0051a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a0051b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a0051c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a0051d0:	79d99db4 44ea7843                       ...yCx.D

1a0051d8 <p05.7454>:
1a0051d8:	00000005 00000019 0000007d              ........}...
