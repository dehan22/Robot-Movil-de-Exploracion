#include <WiFi.h>
#include <WiFiUdp.h>

const char* ssid = "ESP32-AP";
const char* password = "123456789";
WiFiUDP udp;

const unsigned int localPort = 12345; // Puerto para recibir
const char* responseMessage = "Conexión aceptada"; // Mensaje de respuesta
IPAddress clientIP; // IP del cliente conectado
bool clientConnected = false; // Bandera para verificar si ya hay un cliente conectado

void setup() {
  Serial.begin(115200);
  WiFi.softAP(ssid, password);
  udp.begin(localPort);
  Serial.println("AP Started and listening for broadcasts...");
}

void loop() {
  // Verificar si hay paquetes UDP disponibles
  int packetSize = udp.parsePacket();
  if (packetSize) {
    IPAddress remoteIP = udp.remoteIP();
    
    // Leer el mensaje del cliente
    char incomingPacket[255];
    int len = udp.read(incomingPacket, 255);
    if (len > 0) {
      incomingPacket[len] = 0; // Terminar la cadena
      Serial.printf("Paquete recibido de %s: %s\n", remoteIP.toString().c_str(), incomingPacket);

      // Si es un broadcast de un cliente y no hay otro cliente conectado
      if (incomingPacket == String("CONN_REQUEST") && !clientConnected) {
        clientIP = remoteIP; // Guardar IP del cliente
        udp.beginPacket(remoteIP, localPort); // Preparar respuesta
        udp.write(responseMessage);
        udp.endPacket(); // Enviar respuesta
        clientConnected = true; // Marcar que hay un cliente conectado
        Serial.println("Cliente conectado: " + clientIP.toString());
      } else if (incomingPacket == String("CONN_REQUEST") && clientConnected) {
        Serial.println("Conexión rechazada, ya hay un cliente conectado.");
      }
    }
  }

  // Aquí puedes implementar lógica adicional para manejar la conexión con el cliente
  delay(500);
}
